{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9wADwK78DCz"
      },
      "source": [
        "# Proyek Analisis Data: E-Commerce Public Dataset\n",
        "- **Nama:** Rozalina Zahra\n",
        "- **Email:** rozalinazahra02@gmail.com\n",
        "- **ID Dicoding:** rozalina_zahra"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eE0raob58DC0"
      },
      "source": [
        "## Menentukan Pertanyaan Bisnis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GmQeQ5YF8DC0"
      },
      "source": [
        "1. Bagaimana performa penjualan dan revenue perusahaan dalam beberapa bulan terakhir?\n",
        "2. Produk apa yang paling banyak dan paling sedikit terjual?\n",
        "3. Bagaimana demografi pelanggan yang kita miliki?\n",
        "4. Kapan terakhir pelanggan melakukan transaksi?\n",
        "5. Seberapa sering seorang pelanggan melakukan pembelian dalam beberapa bulan terakhir?\n",
        "6. Berapa banyak uang yang dihabiskan pelanggan dalam beberapa bulan terakhir?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-z4QGlO8DC1"
      },
      "source": [
        "## Import Semua Packages/Library yang Digunakan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "FVYwaObI8DC1"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import urllib"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_Sh51Xy8DC1"
      },
      "source": [
        "## Data Wrangling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sXU2GBYu8DC1"
      },
      "source": [
        "### Gathering Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "72GKCMW_lcyT"
      },
      "source": [
        "Data yang digunakan adalah E-Commerce Public Dataset yang terdiri dari data geolocation, orders, order items, order reviews, customers, order payments, products, sellers, dan product category."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gaZeutI7AqWY",
        "outputId": "9b7f21b7-7d63-47c0-99dc-980bd703ed38"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "geoloc"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-386aa116-54c6-4140-b8d6-2dd432e983b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geolocation_zip_code_prefix</th>\n",
              "      <th>geolocation_lat</th>\n",
              "      <th>geolocation_lng</th>\n",
              "      <th>geolocation_city</th>\n",
              "      <th>geolocation_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1037</td>\n",
              "      <td>-23.545621</td>\n",
              "      <td>-46.639292</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1046</td>\n",
              "      <td>-23.546081</td>\n",
              "      <td>-46.644820</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1046</td>\n",
              "      <td>-23.546129</td>\n",
              "      <td>-46.642951</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1041</td>\n",
              "      <td>-23.544392</td>\n",
              "      <td>-46.639499</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1035</td>\n",
              "      <td>-23.541578</td>\n",
              "      <td>-46.641607</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-386aa116-54c6-4140-b8d6-2dd432e983b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-386aa116-54c6-4140-b8d6-2dd432e983b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-386aa116-54c6-4140-b8d6-2dd432e983b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2b7a650e-9174-45c0-9430-76dc45eb89b3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b7a650e-9174-45c0-9430-76dc45eb89b3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2b7a650e-9174-45c0-9430-76dc45eb89b3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   geolocation_zip_code_prefix  geolocation_lat  geolocation_lng  \\\n",
              "0                         1037       -23.545621       -46.639292   \n",
              "1                         1046       -23.546081       -46.644820   \n",
              "2                         1046       -23.546129       -46.642951   \n",
              "3                         1041       -23.544392       -46.639499   \n",
              "4                         1035       -23.541578       -46.641607   \n",
              "\n",
              "  geolocation_city geolocation_state  \n",
              "0        sao paulo                SP  \n",
              "1        sao paulo                SP  \n",
              "2        sao paulo                SP  \n",
              "3        sao paulo                SP  \n",
              "4        sao paulo                SP  "
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geoloc = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/geolocation_dataset.csv\")\n",
        "geoloc.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "cfAPisOmDO-O",
        "outputId": "f95c7bc2-4395-4d6e-e0f6-23b2dcaf124d"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "repr_error": "'str' object has no attribute 'empty'",
              "type": "dataframe",
              "variable_name": "orders"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a238bb9f-fafa-4ec4-aa33-304f1afcb130\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>2018-07-26 03:24:27</td>\n",
              "      <td>2018-07-26 14:31:00</td>\n",
              "      <td>2018-08-07 15:27:45</td>\n",
              "      <td>2018-08-13 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>41ce2a54c0b03bf3443c3d931a367089</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>2018-08-08 08:55:23</td>\n",
              "      <td>2018-08-08 13:50:00</td>\n",
              "      <td>2018-08-17 18:06:29</td>\n",
              "      <td>2018-09-04 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>949d5b44dbf5de918fe9c16f97b45f8a</td>\n",
              "      <td>f88197465ea7920adcdbec7375364d82</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 19:28:06</td>\n",
              "      <td>2017-11-18 19:45:59</td>\n",
              "      <td>2017-11-22 13:39:59</td>\n",
              "      <td>2017-12-02 00:28:42</td>\n",
              "      <td>2017-12-15 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ad21c59c0840e6cb83a9ceb5573f8159</td>\n",
              "      <td>8ab97904e6daea8866dbdbc4fb7aad2c</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-13 21:18:39</td>\n",
              "      <td>2018-02-13 22:20:29</td>\n",
              "      <td>2018-02-14 19:46:34</td>\n",
              "      <td>2018-02-16 18:17:02</td>\n",
              "      <td>2018-02-26 00:00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a238bb9f-fafa-4ec4-aa33-304f1afcb130')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a238bb9f-fafa-4ec4-aa33-304f1afcb130 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a238bb9f-fafa-4ec4-aa33-304f1afcb130');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c07c62c2-3682-4ec9-bce7-f11529414cd6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c07c62c2-3682-4ec9-bce7-f11529414cd6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c07c62c2-3682-4ec9-bce7-f11529414cd6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                           order_id                       customer_id  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "1  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef   \n",
              "2  47770eb9100c2d0c44946d9cf07ec65d  41ce2a54c0b03bf3443c3d931a367089   \n",
              "3  949d5b44dbf5de918fe9c16f97b45f8a  f88197465ea7920adcdbec7375364d82   \n",
              "4  ad21c59c0840e6cb83a9ceb5573f8159  8ab97904e6daea8866dbdbc4fb7aad2c   \n",
              "\n",
              "  order_status order_purchase_timestamp    order_approved_at  \\\n",
              "0    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15   \n",
              "1    delivered      2018-07-24 20:41:37  2018-07-26 03:24:27   \n",
              "2    delivered      2018-08-08 08:38:49  2018-08-08 08:55:23   \n",
              "3    delivered      2017-11-18 19:28:06  2017-11-18 19:45:59   \n",
              "4    delivered      2018-02-13 21:18:39  2018-02-13 22:20:29   \n",
              "\n",
              "  order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "0          2017-10-04 19:55:00           2017-10-10 21:25:13   \n",
              "1          2018-07-26 14:31:00           2018-08-07 15:27:45   \n",
              "2          2018-08-08 13:50:00           2018-08-17 18:06:29   \n",
              "3          2017-11-22 13:39:59           2017-12-02 00:28:42   \n",
              "4          2018-02-14 19:46:34           2018-02-16 18:17:02   \n",
              "\n",
              "  order_estimated_delivery_date  \n",
              "0           2017-10-18 00:00:00  \n",
              "1           2018-08-13 00:00:00  \n",
              "2           2018-09-04 00:00:00  \n",
              "3           2017-12-15 00:00:00  \n",
              "4           2018-02-26 00:00:00  "
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "orders = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/orders_dataset.csv\")\n",
        "orders.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "H3alT0K-DcdS",
        "outputId": "94f4697c-6362-4786-ae25-837f599069a8"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "order_items"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-47e8dcef-5aef-4c83-9ede-0a3065c64fd5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>product_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>00010242fe8c5a6d1ba2dd792cb16214</td>\n",
              "      <td>1</td>\n",
              "      <td>4244733e06e7ecb4970a6e2683c13e61</td>\n",
              "      <td>48436dade18ac8b2bce089ec2a041202</td>\n",
              "      <td>2017-09-19 09:45:35</td>\n",
              "      <td>58.90</td>\n",
              "      <td>13.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>00018f77f2f0320c557190d7a144bdd3</td>\n",
              "      <td>1</td>\n",
              "      <td>e5f2d52b802189ee658865ca93d83a8f</td>\n",
              "      <td>dd7ddc04e1b6c2c614352b383efe2d36</td>\n",
              "      <td>2017-05-03 11:05:13</td>\n",
              "      <td>239.90</td>\n",
              "      <td>19.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>000229ec398224ef6ca0657da4fc703e</td>\n",
              "      <td>1</td>\n",
              "      <td>c777355d18b72b67abbeef9df44fd0fd</td>\n",
              "      <td>5b51032eddd242adc84c38acab88f23d</td>\n",
              "      <td>2018-01-18 14:48:30</td>\n",
              "      <td>199.00</td>\n",
              "      <td>17.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>00024acbcdf0a6daa1e931b038114c75</td>\n",
              "      <td>1</td>\n",
              "      <td>7634da152a4610f1595efa32f14722fc</td>\n",
              "      <td>9d7a1d34a5052409006425275ba1c2b4</td>\n",
              "      <td>2018-08-15 10:10:18</td>\n",
              "      <td>12.99</td>\n",
              "      <td>12.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>00042b26cf59d7ce69dfabb4e55b4fd9</td>\n",
              "      <td>1</td>\n",
              "      <td>ac6c3623068f30de03045865e4e10089</td>\n",
              "      <td>df560393f3a51e74553ab94004ba5c87</td>\n",
              "      <td>2017-02-13 13:57:51</td>\n",
              "      <td>199.90</td>\n",
              "      <td>18.14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47e8dcef-5aef-4c83-9ede-0a3065c64fd5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-47e8dcef-5aef-4c83-9ede-0a3065c64fd5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-47e8dcef-5aef-4c83-9ede-0a3065c64fd5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3a9853b7-0ea9-46b0-9593-47bdee69a2c3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3a9853b7-0ea9-46b0-9593-47bdee69a2c3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3a9853b7-0ea9-46b0-9593-47bdee69a2c3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                           order_id  order_item_id  \\\n",
              "0  00010242fe8c5a6d1ba2dd792cb16214              1   \n",
              "1  00018f77f2f0320c557190d7a144bdd3              1   \n",
              "2  000229ec398224ef6ca0657da4fc703e              1   \n",
              "3  00024acbcdf0a6daa1e931b038114c75              1   \n",
              "4  00042b26cf59d7ce69dfabb4e55b4fd9              1   \n",
              "\n",
              "                         product_id                         seller_id  \\\n",
              "0  4244733e06e7ecb4970a6e2683c13e61  48436dade18ac8b2bce089ec2a041202   \n",
              "1  e5f2d52b802189ee658865ca93d83a8f  dd7ddc04e1b6c2c614352b383efe2d36   \n",
              "2  c777355d18b72b67abbeef9df44fd0fd  5b51032eddd242adc84c38acab88f23d   \n",
              "3  7634da152a4610f1595efa32f14722fc  9d7a1d34a5052409006425275ba1c2b4   \n",
              "4  ac6c3623068f30de03045865e4e10089  df560393f3a51e74553ab94004ba5c87   \n",
              "\n",
              "   shipping_limit_date   price  freight_value  \n",
              "0  2017-09-19 09:45:35   58.90          13.29  \n",
              "1  2017-05-03 11:05:13  239.90          19.93  \n",
              "2  2018-01-18 14:48:30  199.00          17.87  \n",
              "3  2018-08-15 10:10:18   12.99          12.79  \n",
              "4  2017-02-13 13:57:51  199.90          18.14  "
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "order_items = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/order_items_dataset.csv\")\n",
        "order_items.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "5KSbX99_DdI5",
        "outputId": "9f89ff91-c6cf-402f-9f7d-8afa599614c9"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "repr_error": "'str' object has no attribute 'empty'",
              "type": "dataframe",
              "variable_name": "order_revs"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-3c03f40d-dcd6-4d06-b2b4-6375719a6b76\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_id</th>\n",
              "      <th>order_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_title</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7bc2406110b926393aa56f80a40eba40</td>\n",
              "      <td>73fc7af87114b39712e6da79b0a377eb</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-01-18 00:00:00</td>\n",
              "      <td>2018-01-18 21:46:59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80e641a11e56f04c1ad469d5645fdfde</td>\n",
              "      <td>a548910a1c6147796b98fdf73dbeba33</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-03-10 00:00:00</td>\n",
              "      <td>2018-03-11 03:05:13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>228ce5500dc1d8e020d8d1322874b6f0</td>\n",
              "      <td>f9e4b658b201a9f2ecdecbb34bed034b</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-02-17 00:00:00</td>\n",
              "      <td>2018-02-18 14:36:24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e64fb393e7b32834bb789ff8bb30750e</td>\n",
              "      <td>658677c97b385a9be170737859d3511b</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recebi bem antes do prazo estipulado.</td>\n",
              "      <td>2017-04-21 00:00:00</td>\n",
              "      <td>2017-04-21 22:02:06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>f7c4243c7fe1938f181bec41a392bdeb</td>\n",
              "      <td>8e6bfb81e283fa7e4f11123a3fb894f1</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Parabéns lojas lannister adorei comprar pela I...</td>\n",
              "      <td>2018-03-01 00:00:00</td>\n",
              "      <td>2018-03-02 10:26:53</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c03f40d-dcd6-4d06-b2b4-6375719a6b76')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c03f40d-dcd6-4d06-b2b4-6375719a6b76 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c03f40d-dcd6-4d06-b2b4-6375719a6b76');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3c48c929-51ca-479d-b0d2-5530f67aeeaa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c48c929-51ca-479d-b0d2-5530f67aeeaa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3c48c929-51ca-479d-b0d2-5530f67aeeaa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                          review_id                          order_id  \\\n",
              "0  7bc2406110b926393aa56f80a40eba40  73fc7af87114b39712e6da79b0a377eb   \n",
              "1  80e641a11e56f04c1ad469d5645fdfde  a548910a1c6147796b98fdf73dbeba33   \n",
              "2  228ce5500dc1d8e020d8d1322874b6f0  f9e4b658b201a9f2ecdecbb34bed034b   \n",
              "3  e64fb393e7b32834bb789ff8bb30750e  658677c97b385a9be170737859d3511b   \n",
              "4  f7c4243c7fe1938f181bec41a392bdeb  8e6bfb81e283fa7e4f11123a3fb894f1   \n",
              "\n",
              "   review_score review_comment_title  \\\n",
              "0             4                  NaN   \n",
              "1             5                  NaN   \n",
              "2             5                  NaN   \n",
              "3             5                  NaN   \n",
              "4             5                  NaN   \n",
              "\n",
              "                              review_comment_message review_creation_date  \\\n",
              "0                                                NaN  2018-01-18 00:00:00   \n",
              "1                                                NaN  2018-03-10 00:00:00   \n",
              "2                                                NaN  2018-02-17 00:00:00   \n",
              "3              Recebi bem antes do prazo estipulado.  2017-04-21 00:00:00   \n",
              "4  Parabéns lojas lannister adorei comprar pela I...  2018-03-01 00:00:00   \n",
              "\n",
              "  review_answer_timestamp  \n",
              "0     2018-01-18 21:46:59  \n",
              "1     2018-03-11 03:05:13  \n",
              "2     2018-02-18 14:36:24  \n",
              "3     2017-04-21 22:02:06  \n",
              "4     2018-03-02 10:26:53  "
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "order_revs = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/order_reviews_dataset.csv\")\n",
        "order_revs.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "RtfHeQf-DdUW",
        "outputId": "773e110c-1157-4776-86b4-f125f221bc31"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"customers\",\n  \"rows\": 99441,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99441,\n        \"samples\": [\n          \"c7432c6d237ffd6aa36a007b4237ec38\",\n          \"7f399d641e2e2064470145178c9e8778\",\n          \"ba5642b730704dc0f74b7cf715b41ed5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_unique_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 96096,\n        \"samples\": [\n          \"b5d6fa3d2213927296ac893f14f4461c\",\n          \"0520a11c7af8a73b703f1d2e722c7c8a\",\n          \"7a19f3fff09616cbb1cf8fdaa05ae032\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_zip_code_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29797,\n        \"min\": 1003,\n        \"max\": 99990,\n        \"num_unique_values\": 14994,\n        \"samples\": [\n          4343,\n          96820,\n          8598\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4119,\n        \"samples\": [\n          \"luis antonio\",\n          \"canitar\",\n          \"lagoinha do piaui\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"ES\",\n          \"DF\",\n          \"BA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "customers"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-74ecf3f4-9905-470e-8c5d-a885a4f4d461\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>06b8999e2fba1a1fbc88172c00ba8bc7</td>\n",
              "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
              "      <td>14409</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18955e83d337fd6b2def6b18a428ac77</td>\n",
              "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
              "      <td>9790</td>\n",
              "      <td>sao bernardo do campo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4e7b3e00288586ebd08712fdd0374a03</td>\n",
              "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
              "      <td>1151</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b2b6027bc5c5109e529d4dc6358b12c3</td>\n",
              "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
              "      <td>8775</td>\n",
              "      <td>mogi das cruzes</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4f2d8ab171c80ec8364f7c12e35b23ad</td>\n",
              "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
              "      <td>13056</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74ecf3f4-9905-470e-8c5d-a885a4f4d461')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74ecf3f4-9905-470e-8c5d-a885a4f4d461 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74ecf3f4-9905-470e-8c5d-a885a4f4d461');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-988e38af-a1d4-48d7-9417-ad88a52d3f58\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-988e38af-a1d4-48d7-9417-ad88a52d3f58')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-988e38af-a1d4-48d7-9417-ad88a52d3f58 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                        customer_id                customer_unique_id  \\\n",
              "0  06b8999e2fba1a1fbc88172c00ba8bc7  861eff4711a542e4b93843c6dd7febb0   \n",
              "1  18955e83d337fd6b2def6b18a428ac77  290c77bc529b7ac935b93aa66c333dc3   \n",
              "2  4e7b3e00288586ebd08712fdd0374a03  060e732b5b29e8181a18229c7b0b2b5e   \n",
              "3  b2b6027bc5c5109e529d4dc6358b12c3  259dac757896d24d7702b9acbbff3f3c   \n",
              "4  4f2d8ab171c80ec8364f7c12e35b23ad  345ecd01c38d18a9036ed96c73b8d066   \n",
              "\n",
              "   customer_zip_code_prefix          customer_city customer_state  \n",
              "0                     14409                 franca             SP  \n",
              "1                      9790  sao bernardo do campo             SP  \n",
              "2                      1151              sao paulo             SP  \n",
              "3                      8775        mogi das cruzes             SP  \n",
              "4                     13056               campinas             SP  "
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "customers = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/customers_dataset.csv\")\n",
        "customers.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "JlOVqdR8DdeH",
        "outputId": "d2bb421c-c962-424a-ae1c-ad561b1cd07c"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "order_pays"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-2b2ed882-d1b0-4b06-ac70-c563faacc86b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>b81ef226f3fe1789b1e8b2acac839d17</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>99.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>a9810da82917af2d9aefd1278f1dcfa0</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>24.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25e8ea4e93396b6fa0d3dd708e76c1bd</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>65.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ba78997921bbcdc1373bb41e913ab953</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>107.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42fdf880ba16b47b59251dd489d4441a</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2</td>\n",
              "      <td>128.45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b2ed882-d1b0-4b06-ac70-c563faacc86b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b2ed882-d1b0-4b06-ac70-c563faacc86b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b2ed882-d1b0-4b06-ac70-c563faacc86b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3f45309c-2897-4cba-88f1-3327572470b7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f45309c-2897-4cba-88f1-3327572470b7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3f45309c-2897-4cba-88f1-3327572470b7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                           order_id  payment_sequential payment_type  \\\n",
              "0  b81ef226f3fe1789b1e8b2acac839d17                   1  credit_card   \n",
              "1  a9810da82917af2d9aefd1278f1dcfa0                   1  credit_card   \n",
              "2  25e8ea4e93396b6fa0d3dd708e76c1bd                   1  credit_card   \n",
              "3  ba78997921bbcdc1373bb41e913ab953                   1  credit_card   \n",
              "4  42fdf880ba16b47b59251dd489d4441a                   1  credit_card   \n",
              "\n",
              "   payment_installments  payment_value  \n",
              "0                     8          99.33  \n",
              "1                     1          24.39  \n",
              "2                     1          65.71  \n",
              "3                     8         107.78  \n",
              "4                     2         128.45  "
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "order_pays = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/order_payments_dataset.csv\")\n",
        "order_pays.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "153fhlSdDdoV",
        "outputId": "3eaeaca3-8096-4932-8de5-00a4974489b5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"products\",\n  \"rows\": 32951,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 32951,\n        \"samples\": [\n          \"f819f0c84a64f02d3a5606ca95edd272\",\n          \"b9de40e43fccb6ba53b7eadbd5c49077\",\n          \"26afe4ed5890d941fcba14205863eec7\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_category_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"utilidades_domesticas\",\n          \"pc_gamer\",\n          \"eletronicos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name_lenght\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.245740725237239,\n        \"min\": 5.0,\n        \"max\": 76.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          13.0,\n          72.0,\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_description_lenght\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 635.1152246349538,\n        \"min\": 4.0,\n        \"max\": 3992.0,\n        \"num_unique_values\": 2960,\n        \"samples\": [\n          1314.0,\n          40.0,\n          123.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_photos_qty\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7367656379315444,\n        \"min\": 1.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1.0,\n          9.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_weight_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4282.038730977007,\n        \"min\": 0.0,\n        \"max\": 40425.0,\n        \"num_unique_values\": 2204,\n        \"samples\": [\n          567.0,\n          241.0,\n          2646.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_length_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.914458054065967,\n        \"min\": 7.0,\n        \"max\": 105.0,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          88.0,\n          75.0,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_height_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.637554061749494,\n        \"min\": 2.0,\n        \"max\": 105.0,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          6.0,\n          38.0,\n          54.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_width_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.079047453227835,\n        \"min\": 6.0,\n        \"max\": 118.0,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          80.0,\n          38.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "products"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-3106a1dd-3a40-435b-8fe0-bc15244f28c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_photos_qty</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1e9e8ef04dbcff4541ed26657ea517e5</td>\n",
              "      <td>perfumaria</td>\n",
              "      <td>40.0</td>\n",
              "      <td>287.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>14.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3aa071139cb16b67ca9e5dea641aaa2f</td>\n",
              "      <td>artes</td>\n",
              "      <td>44.0</td>\n",
              "      <td>276.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>96bd76ec8810374ed1b65e291975717f</td>\n",
              "      <td>esporte_lazer</td>\n",
              "      <td>46.0</td>\n",
              "      <td>250.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>cef67bcfe19066a932b7673e239eb23d</td>\n",
              "      <td>bebes</td>\n",
              "      <td>27.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9dc1a7de274444849c219cff195d0b71</td>\n",
              "      <td>utilidades_domesticas</td>\n",
              "      <td>37.0</td>\n",
              "      <td>402.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>625.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3106a1dd-3a40-435b-8fe0-bc15244f28c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3106a1dd-3a40-435b-8fe0-bc15244f28c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3106a1dd-3a40-435b-8fe0-bc15244f28c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3bcd4f6e-e16f-4221-ba92-9bf5c090ea81\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bcd4f6e-e16f-4221-ba92-9bf5c090ea81')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3bcd4f6e-e16f-4221-ba92-9bf5c090ea81 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                         product_id  product_category_name  \\\n",
              "0  1e9e8ef04dbcff4541ed26657ea517e5             perfumaria   \n",
              "1  3aa071139cb16b67ca9e5dea641aaa2f                  artes   \n",
              "2  96bd76ec8810374ed1b65e291975717f          esporte_lazer   \n",
              "3  cef67bcfe19066a932b7673e239eb23d                  bebes   \n",
              "4  9dc1a7de274444849c219cff195d0b71  utilidades_domesticas   \n",
              "\n",
              "   product_name_lenght  product_description_lenght  product_photos_qty  \\\n",
              "0                 40.0                       287.0                 1.0   \n",
              "1                 44.0                       276.0                 1.0   \n",
              "2                 46.0                       250.0                 1.0   \n",
              "3                 27.0                       261.0                 1.0   \n",
              "4                 37.0                       402.0                 4.0   \n",
              "\n",
              "   product_weight_g  product_length_cm  product_height_cm  product_width_cm  \n",
              "0             225.0               16.0               10.0              14.0  \n",
              "1            1000.0               30.0               18.0              20.0  \n",
              "2             154.0               18.0                9.0              15.0  \n",
              "3             371.0               26.0                4.0              26.0  \n",
              "4             625.0               20.0               17.0              13.0  "
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "products = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/products_dataset.csv\")\n",
        "products.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8ZBTLmvNDfs9",
        "outputId": "35d63bb3-be4f-429f-fa18-223751552233"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"sellers\",\n  \"rows\": 3095,\n  \"fields\": [\n    {\n      \"column\": \"seller_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3095,\n        \"samples\": [\n          \"1f7fd2a6fcd5a6fa5d8a4dabc72aaae0\",\n          \"6e1862e15f33d9994bc25922a85e1efc\",\n          \"e628d4a53c109f09ca88098338b3a3f5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"seller_zip_code_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32713,\n        \"min\": 1001,\n        \"max\": 99730,\n        \"num_unique_values\": 2246,\n        \"samples\": [\n          87160,\n          6787,\n          36325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"seller_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 611,\n        \"samples\": [\n          \"salvador\",\n          \"guaira\",\n          \"echapora\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"seller_state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"ES\",\n          \"MG\",\n          \"SP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "sellers"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-d6d341c7-bf92-4678-997d-8c19e98d62ba\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>seller_id</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3442f8959a84dea7ee197c632cb2df15</td>\n",
              "      <td>13023</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>d1b65fc7debc3361ea86b5f14c68d2e2</td>\n",
              "      <td>13844</td>\n",
              "      <td>mogi guacu</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ce3ad9de960102d0677a81f5d0bb7b2d</td>\n",
              "      <td>20031</td>\n",
              "      <td>rio de janeiro</td>\n",
              "      <td>RJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>c0f3eea2e14555b6faeea3dd58c1b1c3</td>\n",
              "      <td>4195</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>51a04a8a6bdcb23deccc82b0b80742cf</td>\n",
              "      <td>12914</td>\n",
              "      <td>braganca paulista</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6d341c7-bf92-4678-997d-8c19e98d62ba')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6d341c7-bf92-4678-997d-8c19e98d62ba button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6d341c7-bf92-4678-997d-8c19e98d62ba');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8c171066-6313-4849-a450-ff5b98dfc0e4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c171066-6313-4849-a450-ff5b98dfc0e4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8c171066-6313-4849-a450-ff5b98dfc0e4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                          seller_id  seller_zip_code_prefix  \\\n",
              "0  3442f8959a84dea7ee197c632cb2df15                   13023   \n",
              "1  d1b65fc7debc3361ea86b5f14c68d2e2                   13844   \n",
              "2  ce3ad9de960102d0677a81f5d0bb7b2d                   20031   \n",
              "3  c0f3eea2e14555b6faeea3dd58c1b1c3                    4195   \n",
              "4  51a04a8a6bdcb23deccc82b0b80742cf                   12914   \n",
              "\n",
              "         seller_city seller_state  \n",
              "0           campinas           SP  \n",
              "1         mogi guacu           SP  \n",
              "2     rio de janeiro           RJ  \n",
              "3          sao paulo           SP  \n",
              "4  braganca paulista           SP  "
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sellers = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/sellers_dataset.csv\")\n",
        "sellers.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "R0IvpYyuDf2l",
        "outputId": "a124951d-d1c0-4d3c-f359-d2e7f33edca5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"product_cat\",\n  \"rows\": 71,\n  \"fields\": [\n    {\n      \"column\": \"product_category_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          \"cool_stuff\",\n          \"beleza_saude\",\n          \"construcao_ferramentas_seguranca\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_category_name_english\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          \"cool_stuff\",\n          \"health_beauty\",\n          \"construction_tools_safety\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "product_cat"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-fd48711f-2b1e-43f8-9459-3839f35e1f29\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_category_name_english</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>beleza_saude</td>\n",
              "      <td>health_beauty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>informatica_acessorios</td>\n",
              "      <td>computers_accessories</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>automotivo</td>\n",
              "      <td>auto</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>cama_mesa_banho</td>\n",
              "      <td>bed_bath_table</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>moveis_decoracao</td>\n",
              "      <td>furniture_decor</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd48711f-2b1e-43f8-9459-3839f35e1f29')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fd48711f-2b1e-43f8-9459-3839f35e1f29 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fd48711f-2b1e-43f8-9459-3839f35e1f29');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-41403ad2-48b0-49cb-82e1-7dd639de159e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41403ad2-48b0-49cb-82e1-7dd639de159e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-41403ad2-48b0-49cb-82e1-7dd639de159e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    product_category_name product_category_name_english\n",
              "0            beleza_saude                 health_beauty\n",
              "1  informatica_acessorios         computers_accessories\n",
              "2              automotivo                          auto\n",
              "3         cama_mesa_banho                bed_bath_table\n",
              "4        moveis_decoracao               furniture_decor"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "product_cat = pd.read_csv(\"https://media.githubusercontent.com/media/desikanra/submission-analisis-data-dengan-python/main/data/product_category_name_translation.csv\")\n",
        "product_cat.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FHSiqaZp8DC1"
      },
      "source": [
        "### Assessing Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wsJ8-CnQHSS9"
      },
      "source": [
        "#### Memeriksa data type pada setiap DataFrame."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ax-3tEjc9Cj1",
        "outputId": "900a399b-24b9-4dfa-ff80-f67652ecfcfd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000163 entries, 0 to 1000162\n",
            "Data columns (total 5 columns):\n",
            " #   Column                       Non-Null Count    Dtype  \n",
            "---  ------                       --------------    -----  \n",
            " 0   geolocation_zip_code_prefix  1000163 non-null  int64  \n",
            " 1   geolocation_lat              1000163 non-null  float64\n",
            " 2   geolocation_lng              1000163 non-null  float64\n",
            " 3   geolocation_city             1000163 non-null  object \n",
            " 4   geolocation_state            1000163 non-null  object \n",
            "dtypes: float64(2), int64(1), object(2)\n",
            "memory usage: 38.2+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99441 entries, 0 to 99440\n",
            "Data columns (total 8 columns):\n",
            " #   Column                         Non-Null Count  Dtype \n",
            "---  ------                         --------------  ----- \n",
            " 0   order_id                       99441 non-null  object\n",
            " 1   customer_id                    99441 non-null  object\n",
            " 2   order_status                   99441 non-null  object\n",
            " 3   order_purchase_timestamp       99441 non-null  object\n",
            " 4   order_approved_at              99281 non-null  object\n",
            " 5   order_delivered_carrier_date   97658 non-null  object\n",
            " 6   order_delivered_customer_date  96476 non-null  object\n",
            " 7   order_estimated_delivery_date  99441 non-null  object\n",
            "dtypes: object(8)\n",
            "memory usage: 6.1+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 112650 entries, 0 to 112649\n",
            "Data columns (total 7 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   order_id             112650 non-null  object \n",
            " 1   order_item_id        112650 non-null  int64  \n",
            " 2   product_id           112650 non-null  object \n",
            " 3   seller_id            112650 non-null  object \n",
            " 4   shipping_limit_date  112650 non-null  object \n",
            " 5   price                112650 non-null  float64\n",
            " 6   freight_value        112650 non-null  float64\n",
            "dtypes: float64(2), int64(1), object(4)\n",
            "memory usage: 6.0+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99224 entries, 0 to 99223\n",
            "Data columns (total 7 columns):\n",
            " #   Column                   Non-Null Count  Dtype \n",
            "---  ------                   --------------  ----- \n",
            " 0   review_id                99224 non-null  object\n",
            " 1   order_id                 99224 non-null  object\n",
            " 2   review_score             99224 non-null  int64 \n",
            " 3   review_comment_title     11568 non-null  object\n",
            " 4   review_comment_message   40977 non-null  object\n",
            " 5   review_creation_date     99224 non-null  object\n",
            " 6   review_answer_timestamp  99224 non-null  object\n",
            "dtypes: int64(1), object(6)\n",
            "memory usage: 5.3+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99441 entries, 0 to 99440\n",
            "Data columns (total 5 columns):\n",
            " #   Column                    Non-Null Count  Dtype \n",
            "---  ------                    --------------  ----- \n",
            " 0   customer_id               99441 non-null  object\n",
            " 1   customer_unique_id        99441 non-null  object\n",
            " 2   customer_zip_code_prefix  99441 non-null  int64 \n",
            " 3   customer_city             99441 non-null  object\n",
            " 4   customer_state            99441 non-null  object\n",
            "dtypes: int64(1), object(4)\n",
            "memory usage: 3.8+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 103886 entries, 0 to 103885\n",
            "Data columns (total 5 columns):\n",
            " #   Column                Non-Null Count   Dtype  \n",
            "---  ------                --------------   -----  \n",
            " 0   order_id              103886 non-null  object \n",
            " 1   payment_sequential    103886 non-null  int64  \n",
            " 2   payment_type          103886 non-null  object \n",
            " 3   payment_installments  103886 non-null  int64  \n",
            " 4   payment_value         103886 non-null  float64\n",
            "dtypes: float64(1), int64(2), object(2)\n",
            "memory usage: 4.0+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 32951 entries, 0 to 32950\n",
            "Data columns (total 9 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   product_id                  32951 non-null  object \n",
            " 1   product_category_name       32341 non-null  object \n",
            " 2   product_name_lenght         32341 non-null  float64\n",
            " 3   product_description_lenght  32341 non-null  float64\n",
            " 4   product_photos_qty          32341 non-null  float64\n",
            " 5   product_weight_g            32949 non-null  float64\n",
            " 6   product_length_cm           32949 non-null  float64\n",
            " 7   product_height_cm           32949 non-null  float64\n",
            " 8   product_width_cm            32949 non-null  float64\n",
            "dtypes: float64(7), object(2)\n",
            "memory usage: 2.3+ MB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3095 entries, 0 to 3094\n",
            "Data columns (total 4 columns):\n",
            " #   Column                  Non-Null Count  Dtype \n",
            "---  ------                  --------------  ----- \n",
            " 0   seller_id               3095 non-null   object\n",
            " 1   seller_zip_code_prefix  3095 non-null   int64 \n",
            " 2   seller_city             3095 non-null   object\n",
            " 3   seller_state            3095 non-null   object\n",
            "dtypes: int64(1), object(3)\n",
            "memory usage: 96.8+ KB\n",
            "None \n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 71 entries, 0 to 70\n",
            "Data columns (total 2 columns):\n",
            " #   Column                         Non-Null Count  Dtype \n",
            "---  ------                         --------------  ----- \n",
            " 0   product_category_name          71 non-null     object\n",
            " 1   product_category_name_english  71 non-null     object\n",
            "dtypes: object(2)\n",
            "memory usage: 1.2+ KB\n",
            "None \n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(geoloc.info(), \"\\n\")\n",
        "print(orders.info(), \"\\n\")\n",
        "print(order_items.info(), \"\\n\")\n",
        "print(order_revs.info(), \"\\n\")\n",
        "print(customers.info(), \"\\n\")\n",
        "print(order_pays.info(), \"\\n\")\n",
        "print(products.info(), \"\\n\")\n",
        "print(sellers.info(), \"\\n\")\n",
        "print(product_cat.info(), \"\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "prUP7INngC7k"
      },
      "source": [
        "Berdasarkan hasil tersebut dapat dilihat bahwa terdapat kesalahan data type pada DataFrame **orders** di kolom *order_purchase_timestamp*, *order_approved_at*, *order_delivered_carrier_date*, *order_delivered_customer_date*, dan *order_estimated_delivery_date* yang seharusnya memiliki data type berupa datetime tetapi di DataFrame tersebut data type adalah object. Terdapat kesalahan yang sama di DataFrame **order_items** di kolom *shipping_limit_date* dan pada DataFrame **order_revs** di kolom review_creation_date. Ketidaksesuaian data type ini akan diperbaiki di data cleaning."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AUh58wcjHV-s"
      },
      "source": [
        "#### Memeriksa data null pada setiap DataFrames."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OU9aEFLrHrL1",
        "outputId": "4baf4df2-7613-439d-94b8-d7e7a896533c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Info data null pada geolocation: \n",
            " geolocation_zip_code_prefix    0\n",
            "geolocation_lat                0\n",
            "geolocation_lng                0\n",
            "geolocation_city               0\n",
            "geolocation_state              0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada orders: \n",
            " order_id                            0\n",
            "customer_id                         0\n",
            "order_status                        0\n",
            "order_purchase_timestamp            0\n",
            "order_approved_at                 160\n",
            "order_delivered_carrier_date     1783\n",
            "order_delivered_customer_date    2965\n",
            "order_estimated_delivery_date       0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada order items: \n",
            " order_id               0\n",
            "order_item_id          0\n",
            "product_id             0\n",
            "seller_id              0\n",
            "shipping_limit_date    0\n",
            "price                  0\n",
            "freight_value          0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada order reviews: \n",
            " review_id                      0\n",
            "order_id                       0\n",
            "review_score                   0\n",
            "review_comment_title       87656\n",
            "review_comment_message     58247\n",
            "review_creation_date           0\n",
            "review_answer_timestamp        0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada customers: \n",
            " customer_id                 0\n",
            "customer_unique_id          0\n",
            "customer_zip_code_prefix    0\n",
            "customer_city               0\n",
            "customer_state              0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada order payments: \n",
            " order_id                0\n",
            "payment_sequential      0\n",
            "payment_type            0\n",
            "payment_installments    0\n",
            "payment_value           0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada product: \n",
            " product_id                      0\n",
            "product_category_name         610\n",
            "product_name_lenght           610\n",
            "product_description_lenght    610\n",
            "product_photos_qty            610\n",
            "product_weight_g                2\n",
            "product_length_cm               2\n",
            "product_height_cm               2\n",
            "product_width_cm                2\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada sellers: \n",
            " seller_id                 0\n",
            "seller_zip_code_prefix    0\n",
            "seller_city               0\n",
            "seller_state              0\n",
            "dtype: int64 \n",
            "\n",
            "Info data null pada product category: \n",
            " product_category_name            0\n",
            "product_category_name_english    0\n",
            "dtype: int64 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(\"Info data null pada geolocation: \\n\", geoloc.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada orders: \\n\", orders.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada order items: \\n\", order_items.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada order reviews: \\n\", order_revs.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada customers: \\n\", customers.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada order payments: \\n\", order_pays.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada product: \\n\", products.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada sellers: \\n\", sellers.isna().sum(), \"\\n\")\n",
        "print(\"Info data null pada product category: \\n\", product_cat.isna().sum(), \"\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e9I0wReClOjj"
      },
      "source": [
        "Berdasarkan hasil tersebut terlihat bahwa terdapat data null pada DataFrame **orders** di kolom *order_approved_at*, *order_delivered_carrier_date*, dan *order_delivered_customer_date*. Pada DataFrame **order_revs** terdapat data null pada kolom *review_comment_title*, dan *review_comment_message*. Pada DataFrame **products** terdapat data null pada kolom *product_category_name*, *product_name_length*, *product_description_length*, *product_photos_qt*, *product_weight_g*, *product_length_cm*, *product_height_cm*, dan *product_width_cm*."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kNI2QfYgJPKr"
      },
      "source": [
        "#### Memeriksa data duplicate pada setiap DataFrame."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "77yDngRpJTK_",
        "outputId": "57f776bf-2b66-4f9b-8058-006449d8fb6c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Jumlah duplikasi geolocation:  261836 \n",
            "\n",
            "Jumlah duplikasi orders:  0 \n",
            "\n",
            "Jumlah duplikasi order items:  0 \n",
            "\n",
            "Jumlah duplikasi order reviews:  0 \n",
            "\n",
            "Jumlah duplikasi customers:  0 \n",
            "\n",
            "Jumlah duplikasi order payments:  0 \n",
            "\n",
            "Jumlah duplikasi products:  0 \n",
            "\n",
            "Jumlah duplikasi sellers:  0 \n",
            "\n",
            "Jumlah duplikasi product category:  0 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(\"Jumlah duplikasi geolocation: \", geoloc.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi orders: \", orders.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi order items: \", order_items.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi order reviews: \", order_revs.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi customers: \", customers.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi order payments: \", order_pays.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi products: \", products.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi sellers: \", sellers.duplicated().sum(), \"\\n\")\n",
        "print(\"Jumlah duplikasi product category: \", product_cat.duplicated().sum(), \"\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lnaj8XfDLYF0"
      },
      "source": [
        "Terdapat duplikat pada dataset geolocation sehingga harus dilakukan drop duplikat pada tahap data cleaning."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iDZkUDSZKCpu"
      },
      "source": [
        "#### Describe semua DataFrame."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LZnv-PrbKJYO",
        "outputId": "22b62aa1-a695-4ac2-ae1d-ca9d96e0e295"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Data describe geolocation:\n",
            "         geolocation_zip_code_prefix  geolocation_lat  geolocation_lng  \\\n",
            "count                  1.000163e+06     1.000163e+06     1.000163e+06   \n",
            "unique                          NaN              NaN              NaN   \n",
            "top                             NaN              NaN              NaN   \n",
            "freq                            NaN              NaN              NaN   \n",
            "mean                   3.657417e+04    -2.117615e+01    -4.639054e+01   \n",
            "std                    3.054934e+04     5.715866e+00     4.269748e+00   \n",
            "min                    1.001000e+03    -3.660537e+01    -1.014668e+02   \n",
            "25%                    1.107500e+04    -2.360355e+01    -4.857317e+01   \n",
            "50%                    2.653000e+04    -2.291938e+01    -4.663788e+01   \n",
            "75%                    6.350400e+04    -1.997962e+01    -4.376771e+01   \n",
            "max                    9.999000e+04     4.506593e+01     1.211054e+02   \n",
            "\n",
            "       geolocation_city geolocation_state  \n",
            "count           1000163           1000163  \n",
            "unique             8011                27  \n",
            "top           sao paulo                SP  \n",
            "freq             135800            404268  \n",
            "mean                NaN               NaN  \n",
            "std                 NaN               NaN  \n",
            "min                 NaN               NaN  \n",
            "25%                 NaN               NaN  \n",
            "50%                 NaN               NaN  \n",
            "75%                 NaN               NaN  \n",
            "max                 NaN               NaN   \n",
            "\n",
            "Data describe orders:\n",
            "                                 order_id                       customer_id  \\\n",
            "count                              99441                             99441   \n",
            "unique                             99441                             99441   \n",
            "top     e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
            "freq                                   1                                 1   \n",
            "\n",
            "       order_status order_purchase_timestamp    order_approved_at  \\\n",
            "count         99441                    99441                99281   \n",
            "unique            8                    98875                90733   \n",
            "top       delivered      2018-04-11 10:48:14  2018-02-27 04:31:10   \n",
            "freq          96478                        3                    9   \n",
            "\n",
            "       order_delivered_carrier_date order_delivered_customer_date  \\\n",
            "count                         97658                         96476   \n",
            "unique                        81018                         95664   \n",
            "top             2018-05-09 15:48:00           2018-05-08 23:38:46   \n",
            "freq                             47                             3   \n",
            "\n",
            "       order_estimated_delivery_date  \n",
            "count                          99441  \n",
            "unique                           459  \n",
            "top              2017-12-20 00:00:00  \n",
            "freq                             522   \n",
            "\n",
            "Data describe order items:\n",
            "                                 order_id  order_item_id  \\\n",
            "count                             112650  112650.000000   \n",
            "unique                             98666            NaN   \n",
            "top     8272b63d03f5f79c56e9e4120aec44ef            NaN   \n",
            "freq                                  21            NaN   \n",
            "mean                                 NaN       1.197834   \n",
            "std                                  NaN       0.705124   \n",
            "min                                  NaN       1.000000   \n",
            "25%                                  NaN       1.000000   \n",
            "50%                                  NaN       1.000000   \n",
            "75%                                  NaN       1.000000   \n",
            "max                                  NaN      21.000000   \n",
            "\n",
            "                              product_id                         seller_id  \\\n",
            "count                             112650                            112650   \n",
            "unique                             32951                              3095   \n",
            "top     aca2eb7d00ea1a7b8ebd4e68314663af  6560211a19b47992c3666cc44a7e94c0   \n",
            "freq                                 527                              2033   \n",
            "mean                                 NaN                               NaN   \n",
            "std                                  NaN                               NaN   \n",
            "min                                  NaN                               NaN   \n",
            "25%                                  NaN                               NaN   \n",
            "50%                                  NaN                               NaN   \n",
            "75%                                  NaN                               NaN   \n",
            "max                                  NaN                               NaN   \n",
            "\n",
            "        shipping_limit_date          price  freight_value  \n",
            "count                112650  112650.000000  112650.000000  \n",
            "unique                93318            NaN            NaN  \n",
            "top     2017-07-21 18:25:23            NaN            NaN  \n",
            "freq                     21            NaN            NaN  \n",
            "mean                    NaN     120.653739      19.990320  \n",
            "std                     NaN     183.633928      15.806405  \n",
            "min                     NaN       0.850000       0.000000  \n",
            "25%                     NaN      39.900000      13.080000  \n",
            "50%                     NaN      74.990000      16.260000  \n",
            "75%                     NaN     134.900000      21.150000  \n",
            "max                     NaN    6735.000000     409.680000   \n",
            "\n",
            "Data describe order reviews:\n",
            "                                review_id                          order_id  \\\n",
            "count                              99224                             99224   \n",
            "unique                             98410                             98673   \n",
            "top     7b606b0d57b078384f0b58eac1d41d78  c88b1d1b157a9999ce368f218a407141   \n",
            "freq                                   3                                 3   \n",
            "mean                                 NaN                               NaN   \n",
            "std                                  NaN                               NaN   \n",
            "min                                  NaN                               NaN   \n",
            "25%                                  NaN                               NaN   \n",
            "50%                                  NaN                               NaN   \n",
            "75%                                  NaN                               NaN   \n",
            "max                                  NaN                               NaN   \n",
            "\n",
            "        review_score review_comment_title review_comment_message  \\\n",
            "count   99224.000000                11568                  40977   \n",
            "unique           NaN                 4527                  36159   \n",
            "top              NaN            Recomendo              Muito bom   \n",
            "freq             NaN                  423                    230   \n",
            "mean        4.086421                  NaN                    NaN   \n",
            "std         1.347579                  NaN                    NaN   \n",
            "min         1.000000                  NaN                    NaN   \n",
            "25%         4.000000                  NaN                    NaN   \n",
            "50%         5.000000                  NaN                    NaN   \n",
            "75%         5.000000                  NaN                    NaN   \n",
            "max         5.000000                  NaN                    NaN   \n",
            "\n",
            "       review_creation_date review_answer_timestamp  \n",
            "count                 99224                   99224  \n",
            "unique                  636                   98248  \n",
            "top     2017-12-19 00:00:00     2017-06-15 23:21:05  \n",
            "freq                    463                       4  \n",
            "mean                    NaN                     NaN  \n",
            "std                     NaN                     NaN  \n",
            "min                     NaN                     NaN  \n",
            "25%                     NaN                     NaN  \n",
            "50%                     NaN                     NaN  \n",
            "75%                     NaN                     NaN  \n",
            "max                     NaN                     NaN   \n",
            "\n",
            "Data describe customers:\n",
            "                              customer_id                customer_unique_id  \\\n",
            "count                              99441                             99441   \n",
            "unique                             99441                             96096   \n",
            "top     06b8999e2fba1a1fbc88172c00ba8bc7  8d50f5eadf50201ccdcedfb9e2ac8455   \n",
            "freq                                   1                                17   \n",
            "mean                                 NaN                               NaN   \n",
            "std                                  NaN                               NaN   \n",
            "min                                  NaN                               NaN   \n",
            "25%                                  NaN                               NaN   \n",
            "50%                                  NaN                               NaN   \n",
            "75%                                  NaN                               NaN   \n",
            "max                                  NaN                               NaN   \n",
            "\n",
            "        customer_zip_code_prefix customer_city customer_state  \n",
            "count               99441.000000         99441          99441  \n",
            "unique                       NaN          4119             27  \n",
            "top                          NaN     sao paulo             SP  \n",
            "freq                         NaN         15540          41746  \n",
            "mean                35137.474583           NaN            NaN  \n",
            "std                 29797.938996           NaN            NaN  \n",
            "min                  1003.000000           NaN            NaN  \n",
            "25%                 11347.000000           NaN            NaN  \n",
            "50%                 24416.000000           NaN            NaN  \n",
            "75%                 58900.000000           NaN            NaN  \n",
            "max                 99990.000000           NaN            NaN   \n",
            "\n",
            "Data describe order payments:\n",
            "                                 order_id  payment_sequential payment_type  \\\n",
            "count                             103886       103886.000000       103886   \n",
            "unique                             99440                 NaN            5   \n",
            "top     fa65dad1b0e818e3ccc5cb0e39231352                 NaN  credit_card   \n",
            "freq                                  29                 NaN        76795   \n",
            "mean                                 NaN            1.092679          NaN   \n",
            "std                                  NaN            0.706584          NaN   \n",
            "min                                  NaN            1.000000          NaN   \n",
            "25%                                  NaN            1.000000          NaN   \n",
            "50%                                  NaN            1.000000          NaN   \n",
            "75%                                  NaN            1.000000          NaN   \n",
            "max                                  NaN           29.000000          NaN   \n",
            "\n",
            "        payment_installments  payment_value  \n",
            "count          103886.000000  103886.000000  \n",
            "unique                   NaN            NaN  \n",
            "top                      NaN            NaN  \n",
            "freq                     NaN            NaN  \n",
            "mean                2.853349     154.100380  \n",
            "std                 2.687051     217.494064  \n",
            "min                 0.000000       0.000000  \n",
            "25%                 1.000000      56.790000  \n",
            "50%                 1.000000     100.000000  \n",
            "75%                 4.000000     171.837500  \n",
            "max                24.000000   13664.080000   \n",
            "\n",
            "Data describe products:\n",
            "                               product_id product_category_name  \\\n",
            "count                              32951                 32341   \n",
            "unique                             32951                    73   \n",
            "top     1e9e8ef04dbcff4541ed26657ea517e5       cama_mesa_banho   \n",
            "freq                                   1                  3029   \n",
            "mean                                 NaN                   NaN   \n",
            "std                                  NaN                   NaN   \n",
            "min                                  NaN                   NaN   \n",
            "25%                                  NaN                   NaN   \n",
            "50%                                  NaN                   NaN   \n",
            "75%                                  NaN                   NaN   \n",
            "max                                  NaN                   NaN   \n",
            "\n",
            "        product_name_lenght  product_description_lenght  product_photos_qty  \\\n",
            "count          32341.000000                32341.000000        32341.000000   \n",
            "unique                  NaN                         NaN                 NaN   \n",
            "top                     NaN                         NaN                 NaN   \n",
            "freq                    NaN                         NaN                 NaN   \n",
            "mean              48.476949                  771.495285            2.188986   \n",
            "std               10.245741                  635.115225            1.736766   \n",
            "min                5.000000                    4.000000            1.000000   \n",
            "25%               42.000000                  339.000000            1.000000   \n",
            "50%               51.000000                  595.000000            1.000000   \n",
            "75%               57.000000                  972.000000            3.000000   \n",
            "max               76.000000                 3992.000000           20.000000   \n",
            "\n",
            "        product_weight_g  product_length_cm  product_height_cm  \\\n",
            "count       32949.000000       32949.000000       32949.000000   \n",
            "unique               NaN                NaN                NaN   \n",
            "top                  NaN                NaN                NaN   \n",
            "freq                 NaN                NaN                NaN   \n",
            "mean         2276.472488          30.815078          16.937661   \n",
            "std          4282.038731          16.914458          13.637554   \n",
            "min             0.000000           7.000000           2.000000   \n",
            "25%           300.000000          18.000000           8.000000   \n",
            "50%           700.000000          25.000000          13.000000   \n",
            "75%          1900.000000          38.000000          21.000000   \n",
            "max         40425.000000         105.000000         105.000000   \n",
            "\n",
            "        product_width_cm  \n",
            "count       32949.000000  \n",
            "unique               NaN  \n",
            "top                  NaN  \n",
            "freq                 NaN  \n",
            "mean           23.196728  \n",
            "std            12.079047  \n",
            "min             6.000000  \n",
            "25%            15.000000  \n",
            "50%            20.000000  \n",
            "75%            30.000000  \n",
            "max           118.000000   \n",
            "\n",
            "Data describe sellers:\n",
            "                                seller_id  seller_zip_code_prefix seller_city  \\\n",
            "count                               3095             3095.000000        3095   \n",
            "unique                              3095                     NaN         611   \n",
            "top     3442f8959a84dea7ee197c632cb2df15                     NaN   sao paulo   \n",
            "freq                                   1                     NaN         694   \n",
            "mean                                 NaN            32291.059451         NaN   \n",
            "std                                  NaN            32713.453830         NaN   \n",
            "min                                  NaN             1001.000000         NaN   \n",
            "25%                                  NaN             7093.500000         NaN   \n",
            "50%                                  NaN            14940.000000         NaN   \n",
            "75%                                  NaN            64552.500000         NaN   \n",
            "max                                  NaN            99730.000000         NaN   \n",
            "\n",
            "       seller_state  \n",
            "count          3095  \n",
            "unique           23  \n",
            "top              SP  \n",
            "freq           1849  \n",
            "mean            NaN  \n",
            "std             NaN  \n",
            "min             NaN  \n",
            "25%             NaN  \n",
            "50%             NaN  \n",
            "75%             NaN  \n",
            "max             NaN   \n",
            "\n",
            "Data describe product category:\n",
            "        product_category_name product_category_name_english\n",
            "count                     71                            71\n",
            "unique                    71                            71\n",
            "top             beleza_saude                 health_beauty\n",
            "freq                       1                             1 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(\"Data describe geolocation:\\n\", geoloc.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe orders:\\n\", orders.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe order items:\\n\", order_items.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe order reviews:\\n\", order_revs.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe customers:\\n\", customers.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe order payments:\\n\", order_pays.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe products:\\n\", products.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe sellers:\\n\", sellers.describe(include=\"all\"), \"\\n\")\n",
        "print(\"Data describe product category:\\n\", product_cat.describe(include=\"all\"), \"\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EhN5R4hr8DC1"
      },
      "source": [
        "### Cleaning Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Wl7uwmGmKr2"
      },
      "source": [
        "#### Membersihkan dataset geolocation\n",
        "\n",
        "Seperti yang telah dijelaskan sebelumnya, dataset geolocation memiliki data duplikat sehingga dilakukan drop duplicate."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jVnYpprE9Evz",
        "outputId": "5ad42cb7-229f-4fae-975f-044ffdfb7d91"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Jumlah duplikasi geoloc:  0\n"
          ]
        }
      ],
      "source": [
        "# Menghilangkan duplikat\n",
        "geoloc.drop_duplicates(inplace=True)\n",
        "\n",
        "print(\"Jumlah duplikasi geoloc: \", geoloc.duplicated().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Opf8K-rknh-3"
      },
      "source": [
        "#### Membersihkan dataset orders\n",
        "\n",
        "Dataset orders adalah dataset paling penting karena berisi data penting tentang kegiatan di e-commerce. Untuk analisis data ini, data yang akan digunakan hanya data orders yang sudah dikirimkan."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KaHmv6T_tDTB",
        "outputId": "5eb4c77d-7be6-4d6f-c869-01f3cf3961f1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "delivered      96478\n",
            "shipped         1107\n",
            "canceled         625\n",
            "unavailable      609\n",
            "invoiced         314\n",
            "processing       301\n",
            "created            5\n",
            "approved           2\n",
            "Name: order_status, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Melihat jumlah order berdasarkan \"order_status\"\n",
        "print(orders[\"order_status\"].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HBA0De2gtDwZ",
        "outputId": "afe7585a-945b-478f-abf3-0a5c8a0583af"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hanya mengambil data delivered saja, data yang diperoleh sejumlah 97.02% of data\n"
          ]
        }
      ],
      "source": [
        "# Menghitung jumlah data jika hanya diambil data delivered saja\n",
        "delivered_percentage = (orders[\"order_status\"].value_counts()[\"delivered\"] / len(orders)) * 100\n",
        "print(\"Hanya mengambil data delivered saja, data yang diperoleh sejumlah \" + str(round(delivered_percentage, 2)) + \"% of data\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wNkBAG4bx_Yn"
      },
      "source": [
        "Jumlah 97% merupakan jumlah yang masih besar, sehingga data orders yang akan digunakan untuk analisis lebih lanjut adalah data orders \"delivered\". Data dengan status lain akan di drop."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "F32dSwRGvhOi",
        "outputId": "a3a4b5fa-755f-43f7-c143-118ca5b32f10"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "repr_error": "'str' object has no attribute 'empty'",
              "type": "dataframe",
              "variable_name": "orders"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-f1555d4f-b4de-4fe0-9dbb-085b1c9dbd2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>2018-07-26 03:24:27</td>\n",
              "      <td>2018-07-26 14:31:00</td>\n",
              "      <td>2018-08-07 15:27:45</td>\n",
              "      <td>2018-08-13 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>41ce2a54c0b03bf3443c3d931a367089</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>2018-08-08 08:55:23</td>\n",
              "      <td>2018-08-08 13:50:00</td>\n",
              "      <td>2018-08-17 18:06:29</td>\n",
              "      <td>2018-09-04 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>949d5b44dbf5de918fe9c16f97b45f8a</td>\n",
              "      <td>f88197465ea7920adcdbec7375364d82</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 19:28:06</td>\n",
              "      <td>2017-11-18 19:45:59</td>\n",
              "      <td>2017-11-22 13:39:59</td>\n",
              "      <td>2017-12-02 00:28:42</td>\n",
              "      <td>2017-12-15 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ad21c59c0840e6cb83a9ceb5573f8159</td>\n",
              "      <td>8ab97904e6daea8866dbdbc4fb7aad2c</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-13 21:18:39</td>\n",
              "      <td>2018-02-13 22:20:29</td>\n",
              "      <td>2018-02-14 19:46:34</td>\n",
              "      <td>2018-02-16 18:17:02</td>\n",
              "      <td>2018-02-26 00:00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1555d4f-b4de-4fe0-9dbb-085b1c9dbd2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f1555d4f-b4de-4fe0-9dbb-085b1c9dbd2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f1555d4f-b4de-4fe0-9dbb-085b1c9dbd2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fc88d79a-0bdb-42b4-b515-a9ccb15727e7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc88d79a-0bdb-42b4-b515-a9ccb15727e7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fc88d79a-0bdb-42b4-b515-a9ccb15727e7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                           order_id                       customer_id  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "1  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef   \n",
              "2  47770eb9100c2d0c44946d9cf07ec65d  41ce2a54c0b03bf3443c3d931a367089   \n",
              "3  949d5b44dbf5de918fe9c16f97b45f8a  f88197465ea7920adcdbec7375364d82   \n",
              "4  ad21c59c0840e6cb83a9ceb5573f8159  8ab97904e6daea8866dbdbc4fb7aad2c   \n",
              "\n",
              "  order_status order_purchase_timestamp    order_approved_at  \\\n",
              "0    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15   \n",
              "1    delivered      2018-07-24 20:41:37  2018-07-26 03:24:27   \n",
              "2    delivered      2018-08-08 08:38:49  2018-08-08 08:55:23   \n",
              "3    delivered      2017-11-18 19:28:06  2017-11-18 19:45:59   \n",
              "4    delivered      2018-02-13 21:18:39  2018-02-13 22:20:29   \n",
              "\n",
              "  order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "0          2017-10-04 19:55:00           2017-10-10 21:25:13   \n",
              "1          2018-07-26 14:31:00           2018-08-07 15:27:45   \n",
              "2          2018-08-08 13:50:00           2018-08-17 18:06:29   \n",
              "3          2017-11-22 13:39:59           2017-12-02 00:28:42   \n",
              "4          2018-02-14 19:46:34           2018-02-16 18:17:02   \n",
              "\n",
              "  order_estimated_delivery_date  \n",
              "0           2017-10-18 00:00:00  \n",
              "1           2018-08-13 00:00:00  \n",
              "2           2018-09-04 00:00:00  \n",
              "3           2017-12-15 00:00:00  \n",
              "4           2018-02-26 00:00:00  "
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Menghapus data yang tidak/belum terkirim\n",
        "delivered_orders = orders.drop(orders[orders['order_status'] != 'delivered'].index)\n",
        "\n",
        "orders = delivered_orders\n",
        "orders.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g0ZLDzf9vfYQ"
      },
      "source": [
        "Periksa lagi missing value di dataset orders."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9K8hn-Wb1OuL",
        "outputId": "ea9a7cb3-8a66-484d-85fc-99b16bb039f2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "order_id                          0\n",
              "customer_id                       0\n",
              "order_status                      0\n",
              "order_purchase_timestamp          0\n",
              "order_approved_at                14\n",
              "order_delivered_carrier_date      2\n",
              "order_delivered_customer_date     8\n",
              "order_estimated_delivery_date     0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "orders.isna().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uwLu4-nr0HgK"
      },
      "source": [
        "Jika dilihat lebih lanjut, dapat disimpulkan bahwa kolom *order_approved_at* dan *order_delivered_carrier_date* tidak terlalu berpengaruh pada pertanyaan yang diajukan. Tetapi terdapat 8 data yang null pada kolom *order_delivered_customer_date* yang berisikan data tanggal order diterima oleh costumer. Data ini akan dihapus/drop."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RoKDWxgj3CsD",
        "outputId": "102d1d90-af85-47b9-f7fa-495ca42c122b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "order_id                         0\n",
              "customer_id                      0\n",
              "order_status                     0\n",
              "order_purchase_timestamp         0\n",
              "order_approved_at                0\n",
              "order_delivered_carrier_date     0\n",
              "order_delivered_customer_date    0\n",
              "order_estimated_delivery_date    0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Drop data null pada order_approved_at, order_delivered_carrier_date, dan order_delivered_customer_date\n",
        "orders = orders.dropna(subset=[\"order_approved_at\", \"order_delivered_carrier_date\", \"order_delivered_customer_date\"])\n",
        "orders.isna().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Ds-KTUKNBcq"
      },
      "source": [
        "Tambahkan satu kolom untuk melihat order tersebut tepat waktu atau telat. Tetapi sebelumnya, kita ubah dulu data type date yang masih berupa object."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zvzCWeP0BEIO",
        "outputId": "0ca0bc21-1522-450e-d4a3-cd143a4df38a"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-21-856a25a7b201>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  orders[column] = pd.to_datetime(orders[column])\n",
            "<ipython-input-21-856a25a7b201>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  orders[column] = pd.to_datetime(orders[column])\n",
            "<ipython-input-21-856a25a7b201>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  orders[column] = pd.to_datetime(orders[column])\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 96455 entries, 0 to 99440\n",
            "Data columns (total 8 columns):\n",
            " #   Column                         Non-Null Count  Dtype         \n",
            "---  ------                         --------------  -----         \n",
            " 0   order_id                       96455 non-null  object        \n",
            " 1   customer_id                    96455 non-null  object        \n",
            " 2   order_status                   96455 non-null  object        \n",
            " 3   order_purchase_timestamp       96455 non-null  datetime64[ns]\n",
            " 4   order_approved_at              96455 non-null  datetime64[ns]\n",
            " 5   order_delivered_carrier_date   96455 non-null  datetime64[ns]\n",
            " 6   order_delivered_customer_date  96455 non-null  datetime64[ns]\n",
            " 7   order_estimated_delivery_date  96455 non-null  datetime64[ns]\n",
            "dtypes: datetime64[ns](5), object(3)\n",
            "memory usage: 6.6+ MB\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-21-856a25a7b201>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  orders[column] = pd.to_datetime(orders[column])\n",
            "<ipython-input-21-856a25a7b201>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  orders[column] = pd.to_datetime(orders[column])\n"
          ]
        }
      ],
      "source": [
        "datetime_columns = [\"order_purchase_timestamp\", \"order_approved_at\", \"order_delivered_carrier_date\", \"order_delivered_customer_date\", \"order_estimated_delivery_date\"]\n",
        "\n",
        "for column in datetime_columns:\n",
        "  orders[column] = pd.to_datetime(orders[column])\n",
        "\n",
        "orders.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i2_XG8_1NA8m",
        "outputId": "11338679-dc3e-488d-d197-5d36d53d77e4"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-22-2f273229b081>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  orders[\"delivered_on_time\"] = np.where(orders[\"order_delivered_customer_date\"] <= orders[\"order_estimated_delivery_date\"], \"On Time\", \"Late\")\n"
          ]
        }
      ],
      "source": [
        "orders[\"delivered_on_time\"] = np.where(orders[\"order_delivered_customer_date\"] <= orders[\"order_estimated_delivery_date\"], \"On Time\", \"Late\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "b_DfaO5EOSL8",
        "outputId": "46572ef3-3b4c-4129-a5c6-d753dd07625b"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"orders\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"68fa78470b45315a116015f3f6bb75fe\",\n          \"6a0725621168540d5200cba214d6ebe7\",\n          \"7711031c008fac004ba9f2bfdaff6200\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"be136dd7dc4b148c005bb99eaa6c8674\",\n          \"09033cfedb9bab5c54a33f339fd94ad0\",\n          \"21f3709294148da4889522e4d1683cbd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"delivered\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_purchase_timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-05-14 23:20:04\",\n        \"max\": \"2018-08-07 20:21:41\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-04-18 16:40:40\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_approved_at\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-05-14 23:30:10\",\n        \"max\": \"2018-08-08 03:25:14\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-04-20 07:32:03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_delivered_carrier_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-05-15 14:11:08\",\n        \"max\": \"2018-08-09 14:59:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-04-25 14:19:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_delivered_customer_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-05-18 11:58:07\",\n        \"max\": \"2018-08-10 15:18:39\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-02 16:05:20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_estimated_delivery_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-05-25 00:00:00\",\n        \"max\": \"2018-08-14 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivered_on_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"On Time\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-8fdb851b-a401-4a94-9f0b-731431a4e94a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>delivered_on_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>69360</th>\n",
              "      <td>d34bae2145edd5228bf4d92832988284</td>\n",
              "      <td>c81fd58c2a3e1fcccc9436fbfe9d1002</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-26 09:06:10</td>\n",
              "      <td>2018-02-28 09:15:38</td>\n",
              "      <td>2018-03-01 19:47:47</td>\n",
              "      <td>2018-04-03 20:58:49</td>\n",
              "      <td>2018-03-16</td>\n",
              "      <td>Late</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72102</th>\n",
              "      <td>68fa78470b45315a116015f3f6bb75fe</td>\n",
              "      <td>be136dd7dc4b148c005bb99eaa6c8674</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-04-18 16:40:40</td>\n",
              "      <td>2018-04-20 07:32:03</td>\n",
              "      <td>2018-04-25 14:19:00</td>\n",
              "      <td>2018-05-02 16:05:20</td>\n",
              "      <td>2018-05-11</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64394</th>\n",
              "      <td>7711031c008fac004ba9f2bfdaff6200</td>\n",
              "      <td>21f3709294148da4889522e4d1683cbd</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-05-14 23:20:04</td>\n",
              "      <td>2017-05-14 23:30:10</td>\n",
              "      <td>2017-05-15 14:11:08</td>\n",
              "      <td>2017-05-18 11:58:07</td>\n",
              "      <td>2017-05-25</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87428</th>\n",
              "      <td>7b689d6aafb025278c974ded9940fc31</td>\n",
              "      <td>ad536b13b5693af9bbedc3daf0529130</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-26 15:36:01</td>\n",
              "      <td>2018-01-26 15:58:13</td>\n",
              "      <td>2018-01-29 20:36:35</td>\n",
              "      <td>2018-02-08 19:21:47</td>\n",
              "      <td>2018-02-22</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8638</th>\n",
              "      <td>6a0725621168540d5200cba214d6ebe7</td>\n",
              "      <td>09033cfedb9bab5c54a33f339fd94ad0</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-07 20:21:41</td>\n",
              "      <td>2018-08-08 03:25:14</td>\n",
              "      <td>2018-08-09 14:59:00</td>\n",
              "      <td>2018-08-10 15:18:39</td>\n",
              "      <td>2018-08-14</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8fdb851b-a401-4a94-9f0b-731431a4e94a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8fdb851b-a401-4a94-9f0b-731431a4e94a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8fdb851b-a401-4a94-9f0b-731431a4e94a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ba6a2af1-fcff-4d3f-a7a4-6952ed37d14a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba6a2af1-fcff-4d3f-a7a4-6952ed37d14a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ba6a2af1-fcff-4d3f-a7a4-6952ed37d14a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                               order_id                       customer_id  \\\n",
              "69360  d34bae2145edd5228bf4d92832988284  c81fd58c2a3e1fcccc9436fbfe9d1002   \n",
              "72102  68fa78470b45315a116015f3f6bb75fe  be136dd7dc4b148c005bb99eaa6c8674   \n",
              "64394  7711031c008fac004ba9f2bfdaff6200  21f3709294148da4889522e4d1683cbd   \n",
              "87428  7b689d6aafb025278c974ded9940fc31  ad536b13b5693af9bbedc3daf0529130   \n",
              "8638   6a0725621168540d5200cba214d6ebe7  09033cfedb9bab5c54a33f339fd94ad0   \n",
              "\n",
              "      order_status order_purchase_timestamp   order_approved_at  \\\n",
              "69360    delivered      2018-02-26 09:06:10 2018-02-28 09:15:38   \n",
              "72102    delivered      2018-04-18 16:40:40 2018-04-20 07:32:03   \n",
              "64394    delivered      2017-05-14 23:20:04 2017-05-14 23:30:10   \n",
              "87428    delivered      2018-01-26 15:36:01 2018-01-26 15:58:13   \n",
              "8638     delivered      2018-08-07 20:21:41 2018-08-08 03:25:14   \n",
              "\n",
              "      order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "69360          2018-03-01 19:47:47           2018-04-03 20:58:49   \n",
              "72102          2018-04-25 14:19:00           2018-05-02 16:05:20   \n",
              "64394          2017-05-15 14:11:08           2017-05-18 11:58:07   \n",
              "87428          2018-01-29 20:36:35           2018-02-08 19:21:47   \n",
              "8638           2018-08-09 14:59:00           2018-08-10 15:18:39   \n",
              "\n",
              "      order_estimated_delivery_date delivered_on_time  \n",
              "69360                    2018-03-16              Late  \n",
              "72102                    2018-05-11           On Time  \n",
              "64394                    2017-05-25           On Time  \n",
              "87428                    2018-02-22           On Time  \n",
              "8638                     2018-08-14           On Time  "
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "orders.sample(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GfrPL1BQqaVh"
      },
      "source": [
        "#### Membersihkan dataset order items\n",
        "\n",
        "Terdapat kesalahan data type pada dataset order items. Data type kolom *shipping_limit_date* diubah dari object menjadi datetime."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fct0wGox4pVq",
        "outputId": "9f9387d9-46ac-49cd-9457-049c6cc398bf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 112650 entries, 0 to 112649\n",
            "Data columns (total 7 columns):\n",
            " #   Column               Non-Null Count   Dtype         \n",
            "---  ------               --------------   -----         \n",
            " 0   order_id             112650 non-null  object        \n",
            " 1   order_item_id        112650 non-null  int64         \n",
            " 2   product_id           112650 non-null  object        \n",
            " 3   seller_id            112650 non-null  object        \n",
            " 4   shipping_limit_date  112650 non-null  datetime64[ns]\n",
            " 5   price                112650 non-null  float64       \n",
            " 6   freight_value        112650 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(2), int64(1), object(3)\n",
            "memory usage: 6.0+ MB\n"
          ]
        }
      ],
      "source": [
        "datetime_columns = [\"shipping_limit_date\"]\n",
        "\n",
        "for column in datetime_columns:\n",
        "  order_items[column] = pd.to_datetime(order_items[column])\n",
        "\n",
        "order_items.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "URKKoPP-5owZ"
      },
      "source": [
        "#### membersihkan data order reviews\n",
        "\n",
        "Pada kolom *review_comment_title*, dan *review_comment_message* terdapat data null."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "sKF4tYee6kZQ",
        "outputId": "56b13f23-3eae-4268-911b-2defd386fd15"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "repr_error": "'str' object has no attribute 'empty'",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-65e24a58-f187-4dd4-9be2-aa06d5eafc3d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_id</th>\n",
              "      <th>order_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_title</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7bc2406110b926393aa56f80a40eba40</td>\n",
              "      <td>73fc7af87114b39712e6da79b0a377eb</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-01-18 00:00:00</td>\n",
              "      <td>2018-01-18 21:46:59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80e641a11e56f04c1ad469d5645fdfde</td>\n",
              "      <td>a548910a1c6147796b98fdf73dbeba33</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-03-10 00:00:00</td>\n",
              "      <td>2018-03-11 03:05:13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>228ce5500dc1d8e020d8d1322874b6f0</td>\n",
              "      <td>f9e4b658b201a9f2ecdecbb34bed034b</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-02-17 00:00:00</td>\n",
              "      <td>2018-02-18 14:36:24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e64fb393e7b32834bb789ff8bb30750e</td>\n",
              "      <td>658677c97b385a9be170737859d3511b</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recebi bem antes do prazo estipulado.</td>\n",
              "      <td>2017-04-21 00:00:00</td>\n",
              "      <td>2017-04-21 22:02:06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>f7c4243c7fe1938f181bec41a392bdeb</td>\n",
              "      <td>8e6bfb81e283fa7e4f11123a3fb894f1</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Parabéns lojas lannister adorei comprar pela I...</td>\n",
              "      <td>2018-03-01 00:00:00</td>\n",
              "      <td>2018-03-02 10:26:53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99219</th>\n",
              "      <td>574ed12dd733e5fa530cfd4bbf39d7c9</td>\n",
              "      <td>2a8c23fee101d4d5662fa670396eb8da</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-07-07 00:00:00</td>\n",
              "      <td>2018-07-14 17:18:30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99220</th>\n",
              "      <td>f3897127253a9592a73be9bdfdf4ed7a</td>\n",
              "      <td>22ec9f0669f784db00fa86d035cf8602</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-12-09 00:00:00</td>\n",
              "      <td>2017-12-11 20:06:42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99221</th>\n",
              "      <td>b3de70c89b1510c4cd3d0649fd302472</td>\n",
              "      <td>55d4004744368f5571d1f590031933e4</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Excelente mochila, entrega super rápida. Super...</td>\n",
              "      <td>2018-03-22 00:00:00</td>\n",
              "      <td>2018-03-23 09:10:43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99222</th>\n",
              "      <td>1adeb9d84d72fe4e337617733eb85149</td>\n",
              "      <td>7725825d039fc1f0ceb7635e3f7d9206</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-07-01 00:00:00</td>\n",
              "      <td>2018-07-02 12:59:13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99223</th>\n",
              "      <td>efe49f1d6f951dd88b51e6ccd4cc548f</td>\n",
              "      <td>90531360ecb1eec2a1fbb265a0db0508</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>meu produto chegou e ja tenho que devolver, po...</td>\n",
              "      <td>2017-07-03 00:00:00</td>\n",
              "      <td>2017-07-03 21:01:49</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>87656 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65e24a58-f187-4dd4-9be2-aa06d5eafc3d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-65e24a58-f187-4dd4-9be2-aa06d5eafc3d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-65e24a58-f187-4dd4-9be2-aa06d5eafc3d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-668d73e9-9053-41c5-ae3c-255bc331eca3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-668d73e9-9053-41c5-ae3c-255bc331eca3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-668d73e9-9053-41c5-ae3c-255bc331eca3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                              review_id                          order_id  \\\n",
              "0      7bc2406110b926393aa56f80a40eba40  73fc7af87114b39712e6da79b0a377eb   \n",
              "1      80e641a11e56f04c1ad469d5645fdfde  a548910a1c6147796b98fdf73dbeba33   \n",
              "2      228ce5500dc1d8e020d8d1322874b6f0  f9e4b658b201a9f2ecdecbb34bed034b   \n",
              "3      e64fb393e7b32834bb789ff8bb30750e  658677c97b385a9be170737859d3511b   \n",
              "4      f7c4243c7fe1938f181bec41a392bdeb  8e6bfb81e283fa7e4f11123a3fb894f1   \n",
              "...                                 ...                               ...   \n",
              "99219  574ed12dd733e5fa530cfd4bbf39d7c9  2a8c23fee101d4d5662fa670396eb8da   \n",
              "99220  f3897127253a9592a73be9bdfdf4ed7a  22ec9f0669f784db00fa86d035cf8602   \n",
              "99221  b3de70c89b1510c4cd3d0649fd302472  55d4004744368f5571d1f590031933e4   \n",
              "99222  1adeb9d84d72fe4e337617733eb85149  7725825d039fc1f0ceb7635e3f7d9206   \n",
              "99223  efe49f1d6f951dd88b51e6ccd4cc548f  90531360ecb1eec2a1fbb265a0db0508   \n",
              "\n",
              "       review_score review_comment_title  \\\n",
              "0                 4                  NaN   \n",
              "1                 5                  NaN   \n",
              "2                 5                  NaN   \n",
              "3                 5                  NaN   \n",
              "4                 5                  NaN   \n",
              "...             ...                  ...   \n",
              "99219             5                  NaN   \n",
              "99220             5                  NaN   \n",
              "99221             5                  NaN   \n",
              "99222             4                  NaN   \n",
              "99223             1                  NaN   \n",
              "\n",
              "                                  review_comment_message review_creation_date  \\\n",
              "0                                                    NaN  2018-01-18 00:00:00   \n",
              "1                                                    NaN  2018-03-10 00:00:00   \n",
              "2                                                    NaN  2018-02-17 00:00:00   \n",
              "3                  Recebi bem antes do prazo estipulado.  2017-04-21 00:00:00   \n",
              "4      Parabéns lojas lannister adorei comprar pela I...  2018-03-01 00:00:00   \n",
              "...                                                  ...                  ...   \n",
              "99219                                                NaN  2018-07-07 00:00:00   \n",
              "99220                                                NaN  2017-12-09 00:00:00   \n",
              "99221  Excelente mochila, entrega super rápida. Super...  2018-03-22 00:00:00   \n",
              "99222                                                NaN  2018-07-01 00:00:00   \n",
              "99223  meu produto chegou e ja tenho que devolver, po...  2017-07-03 00:00:00   \n",
              "\n",
              "      review_answer_timestamp  \n",
              "0         2018-01-18 21:46:59  \n",
              "1         2018-03-11 03:05:13  \n",
              "2         2018-02-18 14:36:24  \n",
              "3         2017-04-21 22:02:06  \n",
              "4         2018-03-02 10:26:53  \n",
              "...                       ...  \n",
              "99219     2018-07-14 17:18:30  \n",
              "99220     2017-12-11 20:06:42  \n",
              "99221     2018-03-23 09:10:43  \n",
              "99222     2018-07-02 12:59:13  \n",
              "99223     2017-07-03 21:01:49  \n",
              "\n",
              "[87656 rows x 7 columns]"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat missing value di review_comment_title\n",
        "order_revs[order_revs.review_comment_title.isna()]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "64OvXVOp9brM"
      },
      "source": [
        "Jumlah data null di review_comment_title adalah 87656 dari total 99223 data sehingga kolom ini akan kita hapus saja."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "r4aAgYmI9ttE"
      },
      "outputs": [],
      "source": [
        "# Menghapus kolom review_comment_title\n",
        "order_revs.drop(\"review_comment_title\", axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bInroOw797Pj"
      },
      "source": [
        "Kemudian untuk data null di review_comment_message, akan kita isikan dengan nilai \"no comment\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "QuJFyex164My",
        "outputId": "3c8ead24-332f-42dd-90db-fb53ddbf9d9c"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "repr_error": "'str' object has no attribute 'empty'",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a6e7dd95-69f5-4ebc-acf6-3b1aba8c79f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_id</th>\n",
              "      <th>order_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7bc2406110b926393aa56f80a40eba40</td>\n",
              "      <td>73fc7af87114b39712e6da79b0a377eb</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-01-18 00:00:00</td>\n",
              "      <td>2018-01-18 21:46:59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80e641a11e56f04c1ad469d5645fdfde</td>\n",
              "      <td>a548910a1c6147796b98fdf73dbeba33</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-03-10 00:00:00</td>\n",
              "      <td>2018-03-11 03:05:13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>228ce5500dc1d8e020d8d1322874b6f0</td>\n",
              "      <td>f9e4b658b201a9f2ecdecbb34bed034b</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-02-17 00:00:00</td>\n",
              "      <td>2018-02-18 14:36:24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>15197aa66ff4d0650b5434f1b46cda19</td>\n",
              "      <td>b18dcdf73be66366873cd26c5724d1dc</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-04-13 00:00:00</td>\n",
              "      <td>2018-04-16 00:39:37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>07f9bee5d1b850860defd761afa7ff16</td>\n",
              "      <td>e48aa0d2dcec3a2e87348811bcfdf22b</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-07-16 00:00:00</td>\n",
              "      <td>2017-07-18 19:30:34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99217</th>\n",
              "      <td>c6b270c61f67c9f7cb07d84ea8aeaf8b</td>\n",
              "      <td>48f7ee67313eda32bfcf5b9c1dd9522d</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-12-13 00:00:00</td>\n",
              "      <td>2017-12-14 11:09:36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99218</th>\n",
              "      <td>af2dc0519de6e0720ef0c74292fb4114</td>\n",
              "      <td>d699c734a0b1c8111f2272a3f36d398c</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-04-27 00:00:00</td>\n",
              "      <td>2018-04-30 01:18:57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99219</th>\n",
              "      <td>574ed12dd733e5fa530cfd4bbf39d7c9</td>\n",
              "      <td>2a8c23fee101d4d5662fa670396eb8da</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-07-07 00:00:00</td>\n",
              "      <td>2018-07-14 17:18:30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99220</th>\n",
              "      <td>f3897127253a9592a73be9bdfdf4ed7a</td>\n",
              "      <td>22ec9f0669f784db00fa86d035cf8602</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-12-09 00:00:00</td>\n",
              "      <td>2017-12-11 20:06:42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99222</th>\n",
              "      <td>1adeb9d84d72fe4e337617733eb85149</td>\n",
              "      <td>7725825d039fc1f0ceb7635e3f7d9206</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-07-01 00:00:00</td>\n",
              "      <td>2018-07-02 12:59:13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>58247 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6e7dd95-69f5-4ebc-acf6-3b1aba8c79f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a6e7dd95-69f5-4ebc-acf6-3b1aba8c79f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a6e7dd95-69f5-4ebc-acf6-3b1aba8c79f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-baf2191a-ea0d-4ab6-8447-f41ccf2e7c95\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-baf2191a-ea0d-4ab6-8447-f41ccf2e7c95')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-baf2191a-ea0d-4ab6-8447-f41ccf2e7c95 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                              review_id                          order_id  \\\n",
              "0      7bc2406110b926393aa56f80a40eba40  73fc7af87114b39712e6da79b0a377eb   \n",
              "1      80e641a11e56f04c1ad469d5645fdfde  a548910a1c6147796b98fdf73dbeba33   \n",
              "2      228ce5500dc1d8e020d8d1322874b6f0  f9e4b658b201a9f2ecdecbb34bed034b   \n",
              "5      15197aa66ff4d0650b5434f1b46cda19  b18dcdf73be66366873cd26c5724d1dc   \n",
              "6      07f9bee5d1b850860defd761afa7ff16  e48aa0d2dcec3a2e87348811bcfdf22b   \n",
              "...                                 ...                               ...   \n",
              "99217  c6b270c61f67c9f7cb07d84ea8aeaf8b  48f7ee67313eda32bfcf5b9c1dd9522d   \n",
              "99218  af2dc0519de6e0720ef0c74292fb4114  d699c734a0b1c8111f2272a3f36d398c   \n",
              "99219  574ed12dd733e5fa530cfd4bbf39d7c9  2a8c23fee101d4d5662fa670396eb8da   \n",
              "99220  f3897127253a9592a73be9bdfdf4ed7a  22ec9f0669f784db00fa86d035cf8602   \n",
              "99222  1adeb9d84d72fe4e337617733eb85149  7725825d039fc1f0ceb7635e3f7d9206   \n",
              "\n",
              "       review_score review_comment_message review_creation_date  \\\n",
              "0                 4                    NaN  2018-01-18 00:00:00   \n",
              "1                 5                    NaN  2018-03-10 00:00:00   \n",
              "2                 5                    NaN  2018-02-17 00:00:00   \n",
              "5                 1                    NaN  2018-04-13 00:00:00   \n",
              "6                 5                    NaN  2017-07-16 00:00:00   \n",
              "...             ...                    ...                  ...   \n",
              "99217             5                    NaN  2017-12-13 00:00:00   \n",
              "99218             5                    NaN  2018-04-27 00:00:00   \n",
              "99219             5                    NaN  2018-07-07 00:00:00   \n",
              "99220             5                    NaN  2017-12-09 00:00:00   \n",
              "99222             4                    NaN  2018-07-01 00:00:00   \n",
              "\n",
              "      review_answer_timestamp  \n",
              "0         2018-01-18 21:46:59  \n",
              "1         2018-03-11 03:05:13  \n",
              "2         2018-02-18 14:36:24  \n",
              "5         2018-04-16 00:39:37  \n",
              "6         2017-07-18 19:30:34  \n",
              "...                       ...  \n",
              "99217     2017-12-14 11:09:36  \n",
              "99218     2018-04-30 01:18:57  \n",
              "99219     2018-07-14 17:18:30  \n",
              "99220     2017-12-11 20:06:42  \n",
              "99222     2018-07-02 12:59:13  \n",
              "\n",
              "[58247 rows x 6 columns]"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat missing value di review_comment_message\n",
        "order_revs[order_revs.review_comment_message.isna()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pwHEoPM4-JNH",
        "outputId": "46a84a58-45a0-44b5-fe55-82fd0446053f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Data null pada order reviews: \n",
            " review_id                  0\n",
            "order_id                   0\n",
            "review_score               0\n",
            "review_comment_message     0\n",
            "review_creation_date       0\n",
            "review_answer_timestamp    0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "order_revs[\"review_comment_message\"].fillna(\"No Comment\", inplace=True)\n",
        "print(\"Data null pada order reviews: \\n\", order_revs.isna().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jvocg-EN57Vc"
      },
      "source": [
        "Terdapat juga kesalahan data type. Data type kolom *review_creation_date* akan diubah dari object ke datetime."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c7esL5uc5V0V",
        "outputId": "a7030680-50ee-46bc-c4bc-bc6efae7a407"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99224 entries, 0 to 99223\n",
            "Data columns (total 6 columns):\n",
            " #   Column                   Non-Null Count  Dtype         \n",
            "---  ------                   --------------  -----         \n",
            " 0   review_id                99224 non-null  object        \n",
            " 1   order_id                 99224 non-null  object        \n",
            " 2   review_score             99224 non-null  int64         \n",
            " 3   review_comment_message   99224 non-null  object        \n",
            " 4   review_creation_date     99224 non-null  datetime64[ns]\n",
            " 5   review_answer_timestamp  99224 non-null  object        \n",
            "dtypes: datetime64[ns](1), int64(1), object(4)\n",
            "memory usage: 4.5+ MB\n"
          ]
        }
      ],
      "source": [
        "datetime_columns = [\"review_creation_date\"]\n",
        "\n",
        "for column in datetime_columns:\n",
        "  order_revs[column] = pd.to_datetime(order_revs[column])\n",
        "\n",
        "order_revs.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z3FzhpSW4eTK"
      },
      "source": [
        "#### Membersihkan dataset products"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6PRLhuj6-dG6"
      },
      "source": [
        "Untuk column *product_weight_g*, *product_length_cm*, *product_height_cm*, *product_width_cm* terdapat masing-masing 2 data null. Data ini akan kita hapus/drop. Selain itu, kolom *product_name_length* dan *producs_description_length* juga tidak terlalu digunakan untuk menjawab pertanyaan bisnis sehingga dua kolom ini akan dihapus juga."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "cUm2d1UZBXlV"
      },
      "outputs": [],
      "source": [
        "products.dropna(subset=[\"product_name_lenght\", \"product_description_lenght\", \"product_height_cm\", \"product_width_cm\"], inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8xDfq5_sC0KH"
      },
      "source": [
        "Untuk data null di kolom *product_category_name* akan diisikan value \"others\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "zRDBLFllBz-y"
      },
      "outputs": [],
      "source": [
        "products[\"product_category_name\"].fillna(value=\"other\", inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MY8QNt6NDHhL"
      },
      "source": [
        "Untuk data null di kolom *product_photos_quantity* akan diasumsikan bahwa produk tidak memiliki foto sehingga akan diisikan nilai 0."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "ng_N09KGDPPa"
      },
      "outputs": [],
      "source": [
        "products[\"product_photos_qty\"].fillna(value=0, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kpwXDcV2Dfhq",
        "outputId": "a8151619-5def-4e87-f046-d794f83e9438"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "product_id                    0\n",
              "product_category_name         0\n",
              "product_name_lenght           0\n",
              "product_description_lenght    0\n",
              "product_photos_qty            0\n",
              "product_weight_g              0\n",
              "product_length_cm             0\n",
              "product_height_cm             0\n",
              "product_width_cm              0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Memeriksa kembali data null di products\n",
        "products.isna().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gp-Y6wU38DC1"
      },
      "source": [
        "## Exploratory Data Analysis (EDA)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RKRSmuRdLL53"
      },
      "source": [
        "### Explore geolocation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dsQxLTAwLOBq",
        "outputId": "bae83345-3257-40a4-eec5-a5b5409b9cdf"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"geoloc\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"geolocation_zip_code_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42039,\n        \"min\": 2876,\n        \"max\": 88053,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          80520,\n          13015,\n          2876\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geolocation_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.881479035134766,\n        \"min\": -27.4442746,\n        \"max\": -22.90712789,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -25.41806779,\n          -22.90712789,\n          -23.44678084\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geolocation_lng\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.229219545652594,\n        \"min\": -49.27195979,\n        \"max\": -46.44544535,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -49.27195979,\n          -47.05295611,\n          -46.69799138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geolocation_city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"curitiba\",\n          \"campinas\",\n          \"florian\\u00f3polis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geolocation_state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"SC\",\n          \"PR\",\n          \"SP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-8623ba4a-4a12-483e-8053-af0a262b943d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geolocation_zip_code_prefix</th>\n",
              "      <th>geolocation_lat</th>\n",
              "      <th>geolocation_lng</th>\n",
              "      <th>geolocation_city</th>\n",
              "      <th>geolocation_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>902209</th>\n",
              "      <td>88053</td>\n",
              "      <td>-27.444275</td>\n",
              "      <td>-48.496021</td>\n",
              "      <td>florianópolis</td>\n",
              "      <td>SC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>846946</th>\n",
              "      <td>80520</td>\n",
              "      <td>-25.418068</td>\n",
              "      <td>-49.271960</td>\n",
              "      <td>curitiba</td>\n",
              "      <td>PR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38108</th>\n",
              "      <td>2876</td>\n",
              "      <td>-23.446781</td>\n",
              "      <td>-46.697991</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195831</th>\n",
              "      <td>8011</td>\n",
              "      <td>-23.494694</td>\n",
              "      <td>-46.445445</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286815</th>\n",
              "      <td>13015</td>\n",
              "      <td>-22.907128</td>\n",
              "      <td>-47.052956</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8623ba4a-4a12-483e-8053-af0a262b943d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8623ba4a-4a12-483e-8053-af0a262b943d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8623ba4a-4a12-483e-8053-af0a262b943d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-57471a99-cf9e-4f9d-985f-efc883fe14b2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-57471a99-cf9e-4f9d-985f-efc883fe14b2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-57471a99-cf9e-4f9d-985f-efc883fe14b2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "        geolocation_zip_code_prefix  geolocation_lat  geolocation_lng  \\\n",
              "902209                        88053       -27.444275       -48.496021   \n",
              "846946                        80520       -25.418068       -49.271960   \n",
              "38108                          2876       -23.446781       -46.697991   \n",
              "195831                         8011       -23.494694       -46.445445   \n",
              "286815                        13015       -22.907128       -47.052956   \n",
              "\n",
              "       geolocation_city geolocation_state  \n",
              "902209    florianópolis                SC  \n",
              "846946         curitiba                PR  \n",
              "38108         sao paulo                SP  \n",
              "195831        sao paulo                SP  \n",
              "286815         campinas                SP  "
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geoloc.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nim8LiAaLReg",
        "outputId": "2b5aaf34-9a43-43d9-9deb-7c85085c6e79"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "geolocation_zip_code_prefix\n",
              "38400    779\n",
              "35500    751\n",
              "11680    727\n",
              "11740    678\n",
              "36400    627\n",
              "        ... \n",
              "40024      1\n",
              "39999      1\n",
              "39955      1\n",
              "39931      1\n",
              "93616      1\n",
              "Length: 19015, dtype: int64"
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# mengelompokkan geoloc menurut geolocation zio code prefix\n",
        "geoloc.groupby(by=\"geolocation_zip_code_prefix\").size().sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pJ3oTy1JMBtl"
      },
      "source": [
        "### Explore orders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "rdC1xcMuMGNJ",
        "outputId": "ff6a89b4-5e38-4c54-fce7-eefa5c857cf6"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"orders\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"b5f223689362e69338adf9d075524007\",\n          \"5c673b6f0d8e4e50fabaf4428fd2f944\",\n          \"e9ce52cd563d0124dced659e69eab10a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"4a8c7005bd83d0abec06eea4d1000fb5\",\n          \"e0d3183e8ff8cac00ec77df643595074\",\n          \"9a80c8377644236e27f59e83862f1ae2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"delivered\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_purchase_timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-02-06 22:25:58\",\n        \"max\": \"2018-05-09 11:25:30\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-06 04:40:17\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_approved_at\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-02-06 22:35:20\",\n        \"max\": \"2018-05-09 12:15:19\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-06 04:55:20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_delivered_carrier_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-02-07 14:55:23\",\n        \"max\": \"2018-05-10 15:12:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-08 15:13:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_delivered_customer_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-02-21 12:33:37\",\n        \"max\": \"2018-05-12 11:28:42\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-11 22:32:42\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_estimated_delivery_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-03-15 00:00:00\",\n        \"max\": \"2018-05-28 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-05-28 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivered_on_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Late\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-57cc6762-77d5-4276-91ce-60d1c427e1a4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>delivered_on_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>38995</th>\n",
              "      <td>9d70de973b8b083b57fc62f12634f914</td>\n",
              "      <td>0c2f74f093d807cf61e0efa724e6978e</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-02-06 22:25:58</td>\n",
              "      <td>2017-02-06 22:35:20</td>\n",
              "      <td>2017-02-07 14:55:23</td>\n",
              "      <td>2017-02-21 12:33:37</td>\n",
              "      <td>2017-03-15</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77903</th>\n",
              "      <td>b5f223689362e69338adf9d075524007</td>\n",
              "      <td>4a8c7005bd83d0abec06eea4d1000fb5</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-05-06 04:40:17</td>\n",
              "      <td>2018-05-06 04:55:20</td>\n",
              "      <td>2018-05-08 15:13:00</td>\n",
              "      <td>2018-05-11 22:32:42</td>\n",
              "      <td>2018-05-28</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>e9ce52cd563d0124dced659e69eab10a</td>\n",
              "      <td>9a80c8377644236e27f59e83862f1ae2</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-07-10 12:23:05</td>\n",
              "      <td>2017-07-12 02:10:59</td>\n",
              "      <td>2017-07-13 18:35:37</td>\n",
              "      <td>2017-07-17 17:03:47</td>\n",
              "      <td>2017-07-28</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71389</th>\n",
              "      <td>4c8f74d2fa5a183591988e2c68c931e0</td>\n",
              "      <td>c1ac0c8e43e2940a6ab5efb9e4fcbbc2</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-05-09 11:25:30</td>\n",
              "      <td>2018-05-09 12:15:19</td>\n",
              "      <td>2018-05-10 15:12:00</td>\n",
              "      <td>2018-05-12 11:28:42</td>\n",
              "      <td>2018-05-17</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33980</th>\n",
              "      <td>5c673b6f0d8e4e50fabaf4428fd2f944</td>\n",
              "      <td>e0d3183e8ff8cac00ec77df643595074</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-12-06 13:05:37</td>\n",
              "      <td>2017-12-07 03:16:15</td>\n",
              "      <td>2017-12-13 19:16:44</td>\n",
              "      <td>2018-01-09 12:04:56</td>\n",
              "      <td>2017-12-29</td>\n",
              "      <td>Late</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57cc6762-77d5-4276-91ce-60d1c427e1a4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-57cc6762-77d5-4276-91ce-60d1c427e1a4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-57cc6762-77d5-4276-91ce-60d1c427e1a4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-28e52abd-39dd-42ff-8fd9-86fe6f7c3904\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-28e52abd-39dd-42ff-8fd9-86fe6f7c3904')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-28e52abd-39dd-42ff-8fd9-86fe6f7c3904 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                               order_id                       customer_id  \\\n",
              "38995  9d70de973b8b083b57fc62f12634f914  0c2f74f093d807cf61e0efa724e6978e   \n",
              "77903  b5f223689362e69338adf9d075524007  4a8c7005bd83d0abec06eea4d1000fb5   \n",
              "139    e9ce52cd563d0124dced659e69eab10a  9a80c8377644236e27f59e83862f1ae2   \n",
              "71389  4c8f74d2fa5a183591988e2c68c931e0  c1ac0c8e43e2940a6ab5efb9e4fcbbc2   \n",
              "33980  5c673b6f0d8e4e50fabaf4428fd2f944  e0d3183e8ff8cac00ec77df643595074   \n",
              "\n",
              "      order_status order_purchase_timestamp   order_approved_at  \\\n",
              "38995    delivered      2017-02-06 22:25:58 2017-02-06 22:35:20   \n",
              "77903    delivered      2018-05-06 04:40:17 2018-05-06 04:55:20   \n",
              "139      delivered      2017-07-10 12:23:05 2017-07-12 02:10:59   \n",
              "71389    delivered      2018-05-09 11:25:30 2018-05-09 12:15:19   \n",
              "33980    delivered      2017-12-06 13:05:37 2017-12-07 03:16:15   \n",
              "\n",
              "      order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "38995          2017-02-07 14:55:23           2017-02-21 12:33:37   \n",
              "77903          2018-05-08 15:13:00           2018-05-11 22:32:42   \n",
              "139            2017-07-13 18:35:37           2017-07-17 17:03:47   \n",
              "71389          2018-05-10 15:12:00           2018-05-12 11:28:42   \n",
              "33980          2017-12-13 19:16:44           2018-01-09 12:04:56   \n",
              "\n",
              "      order_estimated_delivery_date delivered_on_time  \n",
              "38995                    2017-03-15           On Time  \n",
              "77903                    2018-05-28           On Time  \n",
              "139                      2017-07-28           On Time  \n",
              "71389                    2018-05-17           On Time  \n",
              "33980                    2017-12-29              Late  "
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "orders.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yuL9vuxwMhQZ",
        "outputId": "02a95b2b-a30d-4e31-c44a-babc8d076439"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "On Time    88630\n",
              "Late        7825\n",
              "Name: delivered_on_time, dtype: int64"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat jumlah data order yang dikirimkan tepat waktu dan telat\n",
        "orders[\"delivered_on_time\"].value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MW7WF2kr8DC1"
      },
      "source": [
        "### Explore customers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "e9CQCZjk8DC2",
        "outputId": "2b5bc070-4ba7-4e31-c6f6-5aa54cad5288"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"customers\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0c851ae2a8765037fce6c6482ce93c8b\",\n          \"2b780e5c520679289485e7d0029203f9\",\n          \"4ff641591219dcd73b025f1081674247\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_unique_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9ebed8d67f69d67295c405cce49e6fa4\",\n          \"a2c849f289065fe4cfe65b094aad297f\",\n          \"ece905d3c9bb0dc1665e13caa84ab302\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_zip_code_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24785,\n        \"min\": 5102,\n        \"max\": 69089,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          69089,\n          38412,\n          28640\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"manaus\",\n          \"uberlandia\",\n          \"carmo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"AM\",\n          \"MG\",\n          \"RJ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-75e04a1c-d94c-49f4-8a8e-59c1945c7e71\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>93304</th>\n",
              "      <td>a9d27ae943179884354286b37d064e0f</td>\n",
              "      <td>d1c7d1a41c2487c703c2f8653c7920f4</td>\n",
              "      <td>56215</td>\n",
              "      <td>santa cruz</td>\n",
              "      <td>PE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94167</th>\n",
              "      <td>0c851ae2a8765037fce6c6482ce93c8b</td>\n",
              "      <td>9ebed8d67f69d67295c405cce49e6fa4</td>\n",
              "      <td>69089</td>\n",
              "      <td>manaus</td>\n",
              "      <td>AM</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69130</th>\n",
              "      <td>4ff641591219dcd73b025f1081674247</td>\n",
              "      <td>ece905d3c9bb0dc1665e13caa84ab302</td>\n",
              "      <td>28640</td>\n",
              "      <td>carmo</td>\n",
              "      <td>RJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40312</th>\n",
              "      <td>360da4d51093e4cc0e38a1f408b51979</td>\n",
              "      <td>46da36c3df7118852b770394d1ba2be5</td>\n",
              "      <td>5102</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89798</th>\n",
              "      <td>2b780e5c520679289485e7d0029203f9</td>\n",
              "      <td>a2c849f289065fe4cfe65b094aad297f</td>\n",
              "      <td>38412</td>\n",
              "      <td>uberlandia</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75e04a1c-d94c-49f4-8a8e-59c1945c7e71')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-75e04a1c-d94c-49f4-8a8e-59c1945c7e71 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-75e04a1c-d94c-49f4-8a8e-59c1945c7e71');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5f908c40-1201-4ea5-94e7-c2d7870f1696\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f908c40-1201-4ea5-94e7-c2d7870f1696')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5f908c40-1201-4ea5-94e7-c2d7870f1696 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                            customer_id                customer_unique_id  \\\n",
              "93304  a9d27ae943179884354286b37d064e0f  d1c7d1a41c2487c703c2f8653c7920f4   \n",
              "94167  0c851ae2a8765037fce6c6482ce93c8b  9ebed8d67f69d67295c405cce49e6fa4   \n",
              "69130  4ff641591219dcd73b025f1081674247  ece905d3c9bb0dc1665e13caa84ab302   \n",
              "40312  360da4d51093e4cc0e38a1f408b51979  46da36c3df7118852b770394d1ba2be5   \n",
              "89798  2b780e5c520679289485e7d0029203f9  a2c849f289065fe4cfe65b094aad297f   \n",
              "\n",
              "       customer_zip_code_prefix customer_city customer_state  \n",
              "93304                     56215    santa cruz             PE  \n",
              "94167                     69089        manaus             AM  \n",
              "69130                     28640         carmo             RJ  \n",
              "40312                      5102     sao paulo             SP  \n",
              "89798                     38412    uberlandia             MG  "
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "customers.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "25iRhTg0KoJY",
        "outputId": "1431662b-9d06-422d-ca50-2402e54262b9"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"customers\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"99441\",\n          \"06b8999e2fba1a1fbc88172c00ba8bc7\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_unique_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          96096,\n          \"17\",\n          \"99441\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_zip_code_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37798.83972148887,\n        \"min\": 1003.0,\n        \"max\": 99990.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          35137.47458291851,\n          24416.0,\n          99441.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4119,\n          \"15540\",\n          \"99441\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          27,\n          \"41746\",\n          \"99441\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-7903420a-98cf-4fab-a581-68d9cfdf2f0b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>99441</td>\n",
              "      <td>99441</td>\n",
              "      <td>99441.000000</td>\n",
              "      <td>99441</td>\n",
              "      <td>99441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>99441</td>\n",
              "      <td>96096</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4119</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>06b8999e2fba1a1fbc88172c00ba8bc7</td>\n",
              "      <td>8d50f5eadf50201ccdcedfb9e2ac8455</td>\n",
              "      <td>NaN</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15540</td>\n",
              "      <td>41746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>35137.474583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>29797.938996</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1003.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11347.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>24416.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>58900.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>99990.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7903420a-98cf-4fab-a581-68d9cfdf2f0b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7903420a-98cf-4fab-a581-68d9cfdf2f0b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7903420a-98cf-4fab-a581-68d9cfdf2f0b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1bdd96a9-2c46-477a-9276-96541b5db4a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bdd96a9-2c46-477a-9276-96541b5db4a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1bdd96a9-2c46-477a-9276-96541b5db4a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                             customer_id                customer_unique_id  \\\n",
              "count                              99441                             99441   \n",
              "unique                             99441                             96096   \n",
              "top     06b8999e2fba1a1fbc88172c00ba8bc7  8d50f5eadf50201ccdcedfb9e2ac8455   \n",
              "freq                                   1                                17   \n",
              "mean                                 NaN                               NaN   \n",
              "std                                  NaN                               NaN   \n",
              "min                                  NaN                               NaN   \n",
              "25%                                  NaN                               NaN   \n",
              "50%                                  NaN                               NaN   \n",
              "75%                                  NaN                               NaN   \n",
              "max                                  NaN                               NaN   \n",
              "\n",
              "        customer_zip_code_prefix customer_city customer_state  \n",
              "count               99441.000000         99441          99441  \n",
              "unique                       NaN          4119             27  \n",
              "top                          NaN     sao paulo             SP  \n",
              "freq                         NaN         15540          41746  \n",
              "mean                35137.474583           NaN            NaN  \n",
              "std                 29797.938996           NaN            NaN  \n",
              "min                  1003.000000           NaN            NaN  \n",
              "25%                 11347.000000           NaN            NaN  \n",
              "50%                 24416.000000           NaN            NaN  \n",
              "75%                 58900.000000           NaN            NaN  \n",
              "max                 99990.000000           NaN            NaN  "
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "customers.describe(include=\"all\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xB4SW0KDLC6E",
        "outputId": "d0a22878-90c9-4c52-b657-d08651dfbc7a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "customer_city\n",
              "sao paulo         15540\n",
              "rio de janeiro     6882\n",
              "belo horizonte     2773\n",
              "brasilia           2131\n",
              "curitiba           1521\n",
              "                  ...  \n",
              "ibiara                1\n",
              "rio espera            1\n",
              "rio dos indios        1\n",
              "rio dos cedros        1\n",
              "lagoao                1\n",
              "Name: customer_id, Length: 4119, dtype: int64"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat demografi pelanggan berdasarkan customer city.\n",
        "customers.groupby(by=\"customer_city\").customer_id.nunique().sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X6-kscRxLkFQ",
        "outputId": "ea513fd7-734d-4036-c65b-cbd41e8f9d10"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "customer_state\n",
              "SP    41746\n",
              "RJ    12852\n",
              "MG    11635\n",
              "RS     5466\n",
              "PR     5045\n",
              "SC     3637\n",
              "BA     3380\n",
              "DF     2140\n",
              "ES     2033\n",
              "GO     2020\n",
              "PE     1652\n",
              "CE     1336\n",
              "PA      975\n",
              "MT      907\n",
              "MA      747\n",
              "MS      715\n",
              "PB      536\n",
              "PI      495\n",
              "RN      485\n",
              "AL      413\n",
              "SE      350\n",
              "TO      280\n",
              "RO      253\n",
              "AM      148\n",
              "AC       81\n",
              "AP       68\n",
              "RR       46\n",
              "Name: customer_id, dtype: int64"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat demografi pelanggan berdasarkan customer state\n",
        "customers.groupby(by=\"customer_state\").customer_id.nunique().sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NwZAy6zKSVSi"
      },
      "source": [
        "### Explore orders payment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "368TVtMOSY9a",
        "outputId": "a3f6ca00-eee6-476f-f692-608b47f37c02"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"order_pays\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"971171cf40bc61462c80044a0b198f61\",\n          \"98cdb0b0199939368746cb2beba58efe\",\n          \"4b944ced0a85068eda08572e1c5e890f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_sequential\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"credit_card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_installments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 262.82884834051225,\n        \"min\": 39.61,\n        \"max\": 703.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          175.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-6379e09b-80d2-4f9f-a8b3-a3e8355e8ce7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>48818</th>\n",
              "      <td>7d2fd74a17ae87c4bf3f882f55b81515</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>234.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25143</th>\n",
              "      <td>971171cf40bc61462c80044a0b198f61</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>5</td>\n",
              "      <td>175.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47138</th>\n",
              "      <td>4b944ced0a85068eda08572e1c5e890f</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>10</td>\n",
              "      <td>105.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49533</th>\n",
              "      <td>9d2bdda2af62f91df2492e397af26e09</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>9</td>\n",
              "      <td>703.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27484</th>\n",
              "      <td>98cdb0b0199939368746cb2beba58efe</td>\n",
              "      <td>2</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>39.61</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6379e09b-80d2-4f9f-a8b3-a3e8355e8ce7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6379e09b-80d2-4f9f-a8b3-a3e8355e8ce7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6379e09b-80d2-4f9f-a8b3-a3e8355e8ce7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-739300d5-c064-4aee-8f42-6b1a6861d41a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-739300d5-c064-4aee-8f42-6b1a6861d41a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-739300d5-c064-4aee-8f42-6b1a6861d41a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                               order_id  payment_sequential payment_type  \\\n",
              "48818  7d2fd74a17ae87c4bf3f882f55b81515                   1  credit_card   \n",
              "25143  971171cf40bc61462c80044a0b198f61                   1  credit_card   \n",
              "47138  4b944ced0a85068eda08572e1c5e890f                   1  credit_card   \n",
              "49533  9d2bdda2af62f91df2492e397af26e09                   1  credit_card   \n",
              "27484  98cdb0b0199939368746cb2beba58efe                   2  credit_card   \n",
              "\n",
              "       payment_installments  payment_value  \n",
              "48818                     1         234.40  \n",
              "25143                     5         175.32  \n",
              "47138                    10         105.28  \n",
              "49533                     9         703.10  \n",
              "27484                     1          39.61  "
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "order_pays.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "erVdxB1uSrMC",
        "outputId": "d3452dbd-f2cb-4a28-d033-fa44a3c6fd30"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "payment_type\n",
              "credit_card    76505\n",
              "boleto         19784\n",
              "voucher         3866\n",
              "debit_card      1528\n",
              "not_defined        3\n",
              "Name: order_id, dtype: int64"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "order_pays.groupby(by=\"payment_type\").order_id.nunique().sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j_PUkv7EPF0n"
      },
      "source": [
        "### Explore orders dan customers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RzOjuPx8PMHg"
      },
      "source": [
        "* Merge customers dan orders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "47KBnwgvPRQv",
        "outputId": "9b120535-cb0e-469e-b3f2-11f4d2f92ee5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"customers_orders\",\n  \"rows\": 99441,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99441,\n        \"samples\": [\n          \"c7432c6d237ffd6aa36a007b4237ec38\",\n          \"7f399d641e2e2064470145178c9e8778\",\n          \"ba5642b730704dc0f74b7cf715b41ed5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_unique_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 96096,\n        \"samples\": [\n          \"b5d6fa3d2213927296ac893f14f4461c\",\n          \"0520a11c7af8a73b703f1d2e722c7c8a\",\n          \"7a19f3fff09616cbb1cf8fdaa05ae032\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_zip_code_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29797,\n        \"min\": 1003,\n        \"max\": 99990,\n        \"num_unique_values\": 14994,\n        \"samples\": [\n          4343,\n          96820,\n          8598\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4119,\n        \"samples\": [\n          \"luis antonio\",\n          \"canitar\",\n          \"lagoinha do piaui\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"ES\",\n          \"DF\",\n          \"BA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 96455,\n        \"samples\": [\n          \"cfae1e992eeb0f51ba0de3ddb87b33da\",\n          \"7d3636cf3c3e12cd619c2ba47773c24f\",\n          \"da54ad083bc7a0be3d23ddbf932d24a8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"delivered\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_purchase_timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-09-15 12:16:38\",\n        \"max\": \"2018-08-29 15:00:37\",\n        \"num_unique_values\": 95933,\n        \"samples\": [\n          \"2018-04-03 09:47:49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_approved_at\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-09-15 12:16:38\",\n        \"max\": \"2018-08-29 15:10:26\",\n        \"num_unique_values\": 88266,\n        \"samples\": [\n          \"2018-02-09 02:50:19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_delivered_carrier_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-10-08 10:34:01\",\n        \"max\": \"2018-09-11 19:48:28\",\n        \"num_unique_values\": 80094,\n        \"samples\": [\n          \"2017-09-12 16:33:30\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_delivered_customer_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-10-11 13:46:32\",\n        \"max\": \"2018-10-17 13:22:46\",\n        \"num_unique_values\": 95643,\n        \"samples\": [\n          \"2018-02-05 21:56:35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_estimated_delivery_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-10-04 00:00:00\",\n        \"max\": \"2018-10-25 00:00:00\",\n        \"num_unique_values\": 445,\n        \"samples\": [\n          \"2018-10-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivered_on_time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Late\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "customers_orders"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-326c09a5-6720-4fed-8487-9d86e277c85a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>delivered_on_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>06b8999e2fba1a1fbc88172c00ba8bc7</td>\n",
              "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
              "      <td>14409</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "      <td>00e7ee1b050b8499577073aeb2a297a1</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-05-16 15:05:35</td>\n",
              "      <td>2017-05-16 15:22:12</td>\n",
              "      <td>2017-05-23 10:47:57</td>\n",
              "      <td>2017-05-25 10:35:35</td>\n",
              "      <td>2017-06-05</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18955e83d337fd6b2def6b18a428ac77</td>\n",
              "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
              "      <td>9790</td>\n",
              "      <td>sao bernardo do campo</td>\n",
              "      <td>SP</td>\n",
              "      <td>29150127e6685892b6eab3eec79f59c7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-12 20:48:24</td>\n",
              "      <td>2018-01-12 20:58:32</td>\n",
              "      <td>2018-01-15 17:14:59</td>\n",
              "      <td>2018-01-29 12:41:19</td>\n",
              "      <td>2018-02-06</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4e7b3e00288586ebd08712fdd0374a03</td>\n",
              "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
              "      <td>1151</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>b2059ed67ce144a36e2aa97d2c9e9ad2</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-05-19 16:07:45</td>\n",
              "      <td>2018-05-20 16:19:10</td>\n",
              "      <td>2018-06-11 14:31:00</td>\n",
              "      <td>2018-06-14 17:58:51</td>\n",
              "      <td>2018-06-13</td>\n",
              "      <td>Late</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b2b6027bc5c5109e529d4dc6358b12c3</td>\n",
              "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
              "      <td>8775</td>\n",
              "      <td>mogi das cruzes</td>\n",
              "      <td>SP</td>\n",
              "      <td>951670f92359f4fe4a63112aa7306eba</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-03-13 16:06:38</td>\n",
              "      <td>2018-03-13 17:29:19</td>\n",
              "      <td>2018-03-27 23:22:42</td>\n",
              "      <td>2018-03-28 16:04:25</td>\n",
              "      <td>2018-04-10</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4f2d8ab171c80ec8364f7c12e35b23ad</td>\n",
              "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
              "      <td>13056</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "      <td>6b7d50bd145f6fc7f33cebabd7e49d0f</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-29 09:51:30</td>\n",
              "      <td>2018-07-29 10:10:09</td>\n",
              "      <td>2018-07-30 15:16:00</td>\n",
              "      <td>2018-08-09 20:55:48</td>\n",
              "      <td>2018-08-15</td>\n",
              "      <td>On Time</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-326c09a5-6720-4fed-8487-9d86e277c85a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-326c09a5-6720-4fed-8487-9d86e277c85a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-326c09a5-6720-4fed-8487-9d86e277c85a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c69cac43-f379-4e33-b70b-a8fe7f0511ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c69cac43-f379-4e33-b70b-a8fe7f0511ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c69cac43-f379-4e33-b70b-a8fe7f0511ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                        customer_id                customer_unique_id  \\\n",
              "0  06b8999e2fba1a1fbc88172c00ba8bc7  861eff4711a542e4b93843c6dd7febb0   \n",
              "1  18955e83d337fd6b2def6b18a428ac77  290c77bc529b7ac935b93aa66c333dc3   \n",
              "2  4e7b3e00288586ebd08712fdd0374a03  060e732b5b29e8181a18229c7b0b2b5e   \n",
              "3  b2b6027bc5c5109e529d4dc6358b12c3  259dac757896d24d7702b9acbbff3f3c   \n",
              "4  4f2d8ab171c80ec8364f7c12e35b23ad  345ecd01c38d18a9036ed96c73b8d066   \n",
              "\n",
              "   customer_zip_code_prefix          customer_city customer_state  \\\n",
              "0                     14409                 franca             SP   \n",
              "1                      9790  sao bernardo do campo             SP   \n",
              "2                      1151              sao paulo             SP   \n",
              "3                      8775        mogi das cruzes             SP   \n",
              "4                     13056               campinas             SP   \n",
              "\n",
              "                           order_id order_status order_purchase_timestamp  \\\n",
              "0  00e7ee1b050b8499577073aeb2a297a1    delivered      2017-05-16 15:05:35   \n",
              "1  29150127e6685892b6eab3eec79f59c7    delivered      2018-01-12 20:48:24   \n",
              "2  b2059ed67ce144a36e2aa97d2c9e9ad2    delivered      2018-05-19 16:07:45   \n",
              "3  951670f92359f4fe4a63112aa7306eba    delivered      2018-03-13 16:06:38   \n",
              "4  6b7d50bd145f6fc7f33cebabd7e49d0f    delivered      2018-07-29 09:51:30   \n",
              "\n",
              "    order_approved_at order_delivered_carrier_date  \\\n",
              "0 2017-05-16 15:22:12          2017-05-23 10:47:57   \n",
              "1 2018-01-12 20:58:32          2018-01-15 17:14:59   \n",
              "2 2018-05-20 16:19:10          2018-06-11 14:31:00   \n",
              "3 2018-03-13 17:29:19          2018-03-27 23:22:42   \n",
              "4 2018-07-29 10:10:09          2018-07-30 15:16:00   \n",
              "\n",
              "  order_delivered_customer_date order_estimated_delivery_date  \\\n",
              "0           2017-05-25 10:35:35                    2017-06-05   \n",
              "1           2018-01-29 12:41:19                    2018-02-06   \n",
              "2           2018-06-14 17:58:51                    2018-06-13   \n",
              "3           2018-03-28 16:04:25                    2018-04-10   \n",
              "4           2018-08-09 20:55:48                    2018-08-15   \n",
              "\n",
              "  delivered_on_time  \n",
              "0           On Time  \n",
              "1           On Time  \n",
              "2              Late  \n",
              "3           On Time  \n",
              "4           On Time  "
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "customers_orders = pd.merge(\n",
        "    left=customers,\n",
        "    right=orders,\n",
        "    how=\"left\",\n",
        "    left_on=\"customer_id\",\n",
        "    right_on=\"customer_id\"\n",
        ")\n",
        "customers_orders.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H_MOQ_NcGn09"
      },
      "source": [
        "### Explore order payments dan order reviews"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b6UxicZjGuZ8"
      },
      "source": [
        "* Merge order_pays dan order_revs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "AL0cdDJRGzG7",
        "outputId": "a0800ee5-9368-47bf-ebde-2555d5815d66"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "payments_reviews"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a686bf0b-d3be-4e84-9326-a6c4a8d0c308\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>b81ef226f3fe1789b1e8b2acac839d17</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>99.33</td>\n",
              "      <td>4ce650e117a5b292bf5ea980a61eb61e</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Produto com qualidade ruim, amassado e descasc...</td>\n",
              "      <td>2018-05-10</td>\n",
              "      <td>2018-05-15 23:38:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>a9810da82917af2d9aefd1278f1dcfa0</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>24.39</td>\n",
              "      <td>ad2036caca61484fc435d7e673c020f2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2018-06-30</td>\n",
              "      <td>2018-07-03 11:23:16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25e8ea4e93396b6fa0d3dd708e76c1bd</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>65.71</td>\n",
              "      <td>bcddfa0f7d2e54cfc74bae4f01b84d92</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Aprovada</td>\n",
              "      <td>2017-12-19</td>\n",
              "      <td>2017-12-22 17:55:30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ba78997921bbcdc1373bb41e913ab953</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>107.78</td>\n",
              "      <td>c37a0e51e5df82bdb55d38ff0ffb6af3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2017-12-21</td>\n",
              "      <td>2017-12-21 21:42:31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ba78997921bbcdc1373bb41e913ab953</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>107.78</td>\n",
              "      <td>5bc7680443b4ef765fec11a8201eeb0c</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2017-12-21</td>\n",
              "      <td>2017-12-22 01:10:39</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a686bf0b-d3be-4e84-9326-a6c4a8d0c308')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a686bf0b-d3be-4e84-9326-a6c4a8d0c308 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a686bf0b-d3be-4e84-9326-a6c4a8d0c308');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8e213465-217f-442f-b5df-f19aee30a078\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e213465-217f-442f-b5df-f19aee30a078')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8e213465-217f-442f-b5df-f19aee30a078 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                           order_id  payment_sequential payment_type  \\\n",
              "0  b81ef226f3fe1789b1e8b2acac839d17                   1  credit_card   \n",
              "1  a9810da82917af2d9aefd1278f1dcfa0                   1  credit_card   \n",
              "2  25e8ea4e93396b6fa0d3dd708e76c1bd                   1  credit_card   \n",
              "3  ba78997921bbcdc1373bb41e913ab953                   1  credit_card   \n",
              "4  ba78997921bbcdc1373bb41e913ab953                   1  credit_card   \n",
              "\n",
              "   payment_installments  payment_value                         review_id  \\\n",
              "0                     8          99.33  4ce650e117a5b292bf5ea980a61eb61e   \n",
              "1                     1          24.39  ad2036caca61484fc435d7e673c020f2   \n",
              "2                     1          65.71  bcddfa0f7d2e54cfc74bae4f01b84d92   \n",
              "3                     8         107.78  c37a0e51e5df82bdb55d38ff0ffb6af3   \n",
              "4                     8         107.78  5bc7680443b4ef765fec11a8201eeb0c   \n",
              "\n",
              "   review_score                             review_comment_message  \\\n",
              "0           1.0  Produto com qualidade ruim, amassado e descasc...   \n",
              "1           5.0                                         No Comment   \n",
              "2           5.0                                           Aprovada   \n",
              "3           5.0                                         No Comment   \n",
              "4           5.0                                         No Comment   \n",
              "\n",
              "  review_creation_date review_answer_timestamp  \n",
              "0           2018-05-10     2018-05-15 23:38:00  \n",
              "1           2018-06-30     2018-07-03 11:23:16  \n",
              "2           2017-12-19     2017-12-22 17:55:30  \n",
              "3           2017-12-21     2017-12-21 21:42:31  \n",
              "4           2017-12-21     2017-12-22 01:10:39  "
            ]
          },
          "execution_count": 45,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "payments_reviews = pd.merge(\n",
        "    left=order_pays,\n",
        "    right=order_revs,\n",
        "    how=\"left\",\n",
        "    left_on=\"order_id\",\n",
        "    right_on=\"order_id\"\n",
        ")\n",
        "payments_reviews.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "2E7BLfroHOm5",
        "outputId": "3a81ddab-f78e-4a8b-cd08-8aba9e899f5c"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-54cd1dbc-3e71-4667-bd15-f8187f0f825d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>52415</th>\n",
              "      <td>03caa2c082116e1d31e67e9ae3700499</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>13664.08</td>\n",
              "      <td>211fa81a22870cc634265ea85b751e40</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Peço por favor verificar a entrega do pedido, ...</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>2017-10-19 13:10:39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34565</th>\n",
              "      <td>736e1922ae60d0d6a89247b851902527</td>\n",
              "      <td>1</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1</td>\n",
              "      <td>7274.88</td>\n",
              "      <td>6b9a600f1bb824da4ca38f65baf42526</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Comprei 04 unidades, e foram entregues apenas ...</td>\n",
              "      <td>2018-07-27</td>\n",
              "      <td>2018-07-28 02:36:10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41660</th>\n",
              "      <td>0812eb902a67711a1cb742b3cdaa65ae</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>6929.31</td>\n",
              "      <td>e2fbd9f0ef7b724c7ecb351601a857e7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Mesmo a máquina ter vindo errada, já se pronti...</td>\n",
              "      <td>2017-03-04</td>\n",
              "      <td>2017-03-04 21:40:41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49871</th>\n",
              "      <td>fefacc66af859508bf1a7934eab1e97f</td>\n",
              "      <td>1</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1</td>\n",
              "      <td>6922.21</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86018</th>\n",
              "      <td>f5136e38d1a14a4dbd87dff67da82701</td>\n",
              "      <td>1</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1</td>\n",
              "      <td>6726.66</td>\n",
              "      <td>1b73e6c7cd135008ebeb18404b776ddc</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2017-06-06</td>\n",
              "      <td>2017-06-07 19:35:23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78326</th>\n",
              "      <td>fa65dad1b0e818e3ccc5cb0e39231352</td>\n",
              "      <td>13</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>f28281373ab8815bafafe371218f02ce</td>\n",
              "      <td>1.0</td>\n",
              "      <td>A mercadoria não foi entregue. Entrara em cont...</td>\n",
              "      <td>2017-05-21</td>\n",
              "      <td>2017-05-24 16:21:27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51581</th>\n",
              "      <td>4637ca194b6387e2d538dc89b124b0ee</td>\n",
              "      <td>1</td>\n",
              "      <td>not_defined</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>9efef4d70190c1bdb9b12872cc8144fc</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Recebi o Diario do Bebê c um pequeno rasgo na ...</td>\n",
              "      <td>2018-08-17</td>\n",
              "      <td>2018-08-18 15:32:40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37030</th>\n",
              "      <td>fa65dad1b0e818e3ccc5cb0e39231352</td>\n",
              "      <td>14</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>f28281373ab8815bafafe371218f02ce</td>\n",
              "      <td>1.0</td>\n",
              "      <td>A mercadoria não foi entregue. Entrara em cont...</td>\n",
              "      <td>2017-05-21</td>\n",
              "      <td>2017-05-24 16:21:27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94953</th>\n",
              "      <td>c8c528189310eaa44a745b8d9d26908b</td>\n",
              "      <td>1</td>\n",
              "      <td>not_defined</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>b54d02f7f1520b3995f84b77ab0dacb3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2018-08-24</td>\n",
              "      <td>2018-08-25 02:24:54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20031</th>\n",
              "      <td>8bcbe01d44d147f901cd3192671144db</td>\n",
              "      <td>4</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3d42038fd2a7d35a88b93cb3e51796a3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2018-02-03</td>\n",
              "      <td>2018-02-11 17:34:29</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>104477 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54cd1dbc-3e71-4667-bd15-f8187f0f825d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-54cd1dbc-3e71-4667-bd15-f8187f0f825d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-54cd1dbc-3e71-4667-bd15-f8187f0f825d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bab3327d-62be-44bc-a8bc-8a4522d25bdd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bab3327d-62be-44bc-a8bc-8a4522d25bdd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bab3327d-62be-44bc-a8bc-8a4522d25bdd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                               order_id  payment_sequential payment_type  \\\n",
              "52415  03caa2c082116e1d31e67e9ae3700499                   1  credit_card   \n",
              "34565  736e1922ae60d0d6a89247b851902527                   1       boleto   \n",
              "41660  0812eb902a67711a1cb742b3cdaa65ae                   1  credit_card   \n",
              "49871  fefacc66af859508bf1a7934eab1e97f                   1       boleto   \n",
              "86018  f5136e38d1a14a4dbd87dff67da82701                   1       boleto   \n",
              "...                                 ...                 ...          ...   \n",
              "78326  fa65dad1b0e818e3ccc5cb0e39231352                  13      voucher   \n",
              "51581  4637ca194b6387e2d538dc89b124b0ee                   1  not_defined   \n",
              "37030  fa65dad1b0e818e3ccc5cb0e39231352                  14      voucher   \n",
              "94953  c8c528189310eaa44a745b8d9d26908b                   1  not_defined   \n",
              "20031  8bcbe01d44d147f901cd3192671144db                   4      voucher   \n",
              "\n",
              "       payment_installments  payment_value                         review_id  \\\n",
              "52415                     1       13664.08  211fa81a22870cc634265ea85b751e40   \n",
              "34565                     1        7274.88  6b9a600f1bb824da4ca38f65baf42526   \n",
              "41660                     8        6929.31  e2fbd9f0ef7b724c7ecb351601a857e7   \n",
              "49871                     1        6922.21                               NaN   \n",
              "86018                     1        6726.66  1b73e6c7cd135008ebeb18404b776ddc   \n",
              "...                     ...            ...                               ...   \n",
              "78326                     1           0.00  f28281373ab8815bafafe371218f02ce   \n",
              "51581                     1           0.00  9efef4d70190c1bdb9b12872cc8144fc   \n",
              "37030                     1           0.00  f28281373ab8815bafafe371218f02ce   \n",
              "94953                     1           0.00  b54d02f7f1520b3995f84b77ab0dacb3   \n",
              "20031                     1           0.00  3d42038fd2a7d35a88b93cb3e51796a3   \n",
              "\n",
              "       review_score                             review_comment_message  \\\n",
              "52415           1.0  Peço por favor verificar a entrega do pedido, ...   \n",
              "34565           1.0  Comprei 04 unidades, e foram entregues apenas ...   \n",
              "41660           5.0  Mesmo a máquina ter vindo errada, já se pronti...   \n",
              "49871           NaN                                                NaN   \n",
              "86018           5.0                                         No Comment   \n",
              "...             ...                                                ...   \n",
              "78326           1.0  A mercadoria não foi entregue. Entrara em cont...   \n",
              "51581           3.0  Recebi o Diario do Bebê c um pequeno rasgo na ...   \n",
              "37030           1.0  A mercadoria não foi entregue. Entrara em cont...   \n",
              "94953           1.0                                         No Comment   \n",
              "20031           4.0                                         No Comment   \n",
              "\n",
              "      review_creation_date review_answer_timestamp  \n",
              "52415           2017-10-18     2017-10-19 13:10:39  \n",
              "34565           2018-07-27     2018-07-28 02:36:10  \n",
              "41660           2017-03-04     2017-03-04 21:40:41  \n",
              "49871                  NaT                     NaN  \n",
              "86018           2017-06-06     2017-06-07 19:35:23  \n",
              "...                    ...                     ...  \n",
              "78326           2017-05-21     2017-05-24 16:21:27  \n",
              "51581           2018-08-17     2018-08-18 15:32:40  \n",
              "37030           2017-05-21     2017-05-24 16:21:27  \n",
              "94953           2018-08-24     2018-08-25 02:24:54  \n",
              "20031           2018-02-03     2018-02-11 17:34:29  \n",
              "\n",
              "[104477 rows x 10 columns]"
            ]
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Mengurutkan order dengan biaya jumlah pembayaran tertinggi.\n",
        "payments_reviews.sort_values(by=\"payment_value\", ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "SM8VxcKIHqHR",
        "outputId": "d370185c-c4c2-40ee-e046-8310b10ed220"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"})\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": [\n        \"order_id\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32379,\n        \"min\": 3,\n        \"max\": 76505,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          76505,\n          3866,\n          1528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"payment_value\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.87293387135363,\n        \"min\": 0.0,\n        \"max\": 13.38,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.01,\n          0.0,\n          11.62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"payment_value\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5155.050583127192,\n        \"min\": 0.0,\n        \"max\": 13664.08,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13664.08,\n          3184.34,\n          4445.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-42c9fd7a-5b5e-4ea0-9d55-a1fa21efd904\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th colspan=\"2\" halign=\"left\">payment_value</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>nunique</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>payment_type</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>boleto</th>\n",
              "      <td>19784</td>\n",
              "      <td>11.62</td>\n",
              "      <td>7274.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>credit_card</th>\n",
              "      <td>76505</td>\n",
              "      <td>0.01</td>\n",
              "      <td>13664.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>debit_card</th>\n",
              "      <td>1528</td>\n",
              "      <td>13.38</td>\n",
              "      <td>4445.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>not_defined</th>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>voucher</th>\n",
              "      <td>3866</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3184.34</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42c9fd7a-5b5e-4ea0-9d55-a1fa21efd904')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-42c9fd7a-5b5e-4ea0-9d55-a1fa21efd904 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-42c9fd7a-5b5e-4ea0-9d55-a1fa21efd904');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6f8576c4-2d77-491a-b8f7-ef4db0b8cc9c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f8576c4-2d77-491a-b8f7-ef4db0b8cc9c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6f8576c4-2d77-491a-b8f7-ef4db0b8cc9c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "             order_id payment_value          \n",
              "              nunique           min       max\n",
              "payment_type                                 \n",
              "boleto          19784         11.62   7274.88\n",
              "credit_card     76505          0.01  13664.08\n",
              "debit_card       1528         13.38   4445.50\n",
              "not_defined         3          0.00      0.00\n",
              "voucher          3866          0.00   3184.34"
            ]
          },
          "execution_count": 47,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat demografi jenis pembayaran\n",
        "payments_reviews.groupby(by=\"payment_type\").agg({\n",
        "    \"order_id\": \"nunique\",\n",
        "    \"payment_value\": [\"min\", \"max\"]\n",
        "})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-KhzlnBnIDap"
      },
      "source": [
        "* Merge customers_orders dan payments_reviews"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "id": "1UtUIF8mIH21",
        "outputId": "9cee464e-86af-4dd7-e04c-deef54e34a95"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cust_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-6927637f-c9f9-489a-8bd3-0951f5e0f583\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>...</th>\n",
              "      <th>delivered_on_time</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>06b8999e2fba1a1fbc88172c00ba8bc7</td>\n",
              "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
              "      <td>14409</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "      <td>00e7ee1b050b8499577073aeb2a297a1</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-05-16 15:05:35</td>\n",
              "      <td>2017-05-16 15:22:12</td>\n",
              "      <td>2017-05-23 10:47:57</td>\n",
              "      <td>...</td>\n",
              "      <td>On Time</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2.0</td>\n",
              "      <td>146.87</td>\n",
              "      <td>88b8b52d46df026a9d1ad2136a59b30b</td>\n",
              "      <td>4.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2017-05-26</td>\n",
              "      <td>2017-05-30 22:34:40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18955e83d337fd6b2def6b18a428ac77</td>\n",
              "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
              "      <td>9790</td>\n",
              "      <td>sao bernardo do campo</td>\n",
              "      <td>SP</td>\n",
              "      <td>29150127e6685892b6eab3eec79f59c7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-12 20:48:24</td>\n",
              "      <td>2018-01-12 20:58:32</td>\n",
              "      <td>2018-01-15 17:14:59</td>\n",
              "      <td>...</td>\n",
              "      <td>On Time</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8.0</td>\n",
              "      <td>335.48</td>\n",
              "      <td>02fc48a9efa3e3d0f1a8ea26507eeec3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2018-01-30</td>\n",
              "      <td>2018-02-10 22:43:29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4e7b3e00288586ebd08712fdd0374a03</td>\n",
              "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
              "      <td>1151</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>b2059ed67ce144a36e2aa97d2c9e9ad2</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-05-19 16:07:45</td>\n",
              "      <td>2018-05-20 16:19:10</td>\n",
              "      <td>2018-06-11 14:31:00</td>\n",
              "      <td>...</td>\n",
              "      <td>Late</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>7.0</td>\n",
              "      <td>157.73</td>\n",
              "      <td>5ad6695d76ee186dc473c42706984d87</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2018-06-15</td>\n",
              "      <td>2018-06-15 12:10:59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b2b6027bc5c5109e529d4dc6358b12c3</td>\n",
              "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
              "      <td>8775</td>\n",
              "      <td>mogi das cruzes</td>\n",
              "      <td>SP</td>\n",
              "      <td>951670f92359f4fe4a63112aa7306eba</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-03-13 16:06:38</td>\n",
              "      <td>2018-03-13 17:29:19</td>\n",
              "      <td>2018-03-27 23:22:42</td>\n",
              "      <td>...</td>\n",
              "      <td>On Time</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1.0</td>\n",
              "      <td>173.30</td>\n",
              "      <td>059a801bb31f6aab2266e672cab87bc5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>No Comment</td>\n",
              "      <td>2018-03-29</td>\n",
              "      <td>2018-04-02 18:36:47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4f2d8ab171c80ec8364f7c12e35b23ad</td>\n",
              "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
              "      <td>13056</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "      <td>6b7d50bd145f6fc7f33cebabd7e49d0f</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-29 09:51:30</td>\n",
              "      <td>2018-07-29 10:10:09</td>\n",
              "      <td>2018-07-30 15:16:00</td>\n",
              "      <td>...</td>\n",
              "      <td>On Time</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8.0</td>\n",
              "      <td>252.25</td>\n",
              "      <td>8490879d58d6c5d7773f2739a03f089a</td>\n",
              "      <td>5.0</td>\n",
              "      <td>O baratheon è esxelente Amo adoro o baratheon</td>\n",
              "      <td>2018-08-10</td>\n",
              "      <td>2018-08-17 01:59:52</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6927637f-c9f9-489a-8bd3-0951f5e0f583')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6927637f-c9f9-489a-8bd3-0951f5e0f583 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6927637f-c9f9-489a-8bd3-0951f5e0f583');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a1599252-8a0a-4d11-8f6d-b82a337f010f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1599252-8a0a-4d11-8f6d-b82a337f010f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a1599252-8a0a-4d11-8f6d-b82a337f010f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                        customer_id                customer_unique_id  \\\n",
              "0  06b8999e2fba1a1fbc88172c00ba8bc7  861eff4711a542e4b93843c6dd7febb0   \n",
              "1  18955e83d337fd6b2def6b18a428ac77  290c77bc529b7ac935b93aa66c333dc3   \n",
              "2  4e7b3e00288586ebd08712fdd0374a03  060e732b5b29e8181a18229c7b0b2b5e   \n",
              "3  b2b6027bc5c5109e529d4dc6358b12c3  259dac757896d24d7702b9acbbff3f3c   \n",
              "4  4f2d8ab171c80ec8364f7c12e35b23ad  345ecd01c38d18a9036ed96c73b8d066   \n",
              "\n",
              "   customer_zip_code_prefix          customer_city customer_state  \\\n",
              "0                     14409                 franca             SP   \n",
              "1                      9790  sao bernardo do campo             SP   \n",
              "2                      1151              sao paulo             SP   \n",
              "3                      8775        mogi das cruzes             SP   \n",
              "4                     13056               campinas             SP   \n",
              "\n",
              "                           order_id order_status order_purchase_timestamp  \\\n",
              "0  00e7ee1b050b8499577073aeb2a297a1    delivered      2017-05-16 15:05:35   \n",
              "1  29150127e6685892b6eab3eec79f59c7    delivered      2018-01-12 20:48:24   \n",
              "2  b2059ed67ce144a36e2aa97d2c9e9ad2    delivered      2018-05-19 16:07:45   \n",
              "3  951670f92359f4fe4a63112aa7306eba    delivered      2018-03-13 16:06:38   \n",
              "4  6b7d50bd145f6fc7f33cebabd7e49d0f    delivered      2018-07-29 09:51:30   \n",
              "\n",
              "    order_approved_at order_delivered_carrier_date  ... delivered_on_time  \\\n",
              "0 2017-05-16 15:22:12          2017-05-23 10:47:57  ...           On Time   \n",
              "1 2018-01-12 20:58:32          2018-01-15 17:14:59  ...           On Time   \n",
              "2 2018-05-20 16:19:10          2018-06-11 14:31:00  ...              Late   \n",
              "3 2018-03-13 17:29:19          2018-03-27 23:22:42  ...           On Time   \n",
              "4 2018-07-29 10:10:09          2018-07-30 15:16:00  ...           On Time   \n",
              "\n",
              "  payment_sequential payment_type  payment_installments payment_value  \\\n",
              "0                1.0  credit_card                   2.0        146.87   \n",
              "1                1.0  credit_card                   8.0        335.48   \n",
              "2                1.0  credit_card                   7.0        157.73   \n",
              "3                1.0  credit_card                   1.0        173.30   \n",
              "4                1.0  credit_card                   8.0        252.25   \n",
              "\n",
              "                          review_id  review_score  \\\n",
              "0  88b8b52d46df026a9d1ad2136a59b30b           4.0   \n",
              "1  02fc48a9efa3e3d0f1a8ea26507eeec3           5.0   \n",
              "2  5ad6695d76ee186dc473c42706984d87           5.0   \n",
              "3  059a801bb31f6aab2266e672cab87bc5           5.0   \n",
              "4  8490879d58d6c5d7773f2739a03f089a           5.0   \n",
              "\n",
              "                          review_comment_message  review_creation_date  \\\n",
              "0                                     No Comment            2017-05-26   \n",
              "1                                     No Comment            2018-01-30   \n",
              "2                                     No Comment            2018-06-15   \n",
              "3                                     No Comment            2018-03-29   \n",
              "4  O baratheon è esxelente Amo adoro o baratheon            2018-08-10   \n",
              "\n",
              "  review_answer_timestamp  \n",
              "0     2017-05-30 22:34:40  \n",
              "1     2018-02-10 22:43:29  \n",
              "2     2018-06-15 12:10:59  \n",
              "3     2018-04-02 18:36:47  \n",
              "4     2018-08-17 01:59:52  \n",
              "\n",
              "[5 rows x 22 columns]"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cust_df = pd.merge(\n",
        "    left=customers_orders,\n",
        "    right=payments_reviews,\n",
        "    how=\"left\",\n",
        "    left_on=\"order_id\",\n",
        "    right_on=\"order_id\"\n",
        ")\n",
        "cust_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7ZFpr2GPImfj"
      },
      "source": [
        "### Explore order items dan sellers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SzRUghETIpxx"
      },
      "source": [
        "* Merge order items dan sellers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "m6byWuVvIsXh",
        "outputId": "49cab4bd-e350-4d2c-9c47-1f256becaec9"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "items_sellers"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-274c513a-27b9-4b8a-8a0f-5bea8c0a3e7a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>product_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>00010242fe8c5a6d1ba2dd792cb16214</td>\n",
              "      <td>1</td>\n",
              "      <td>4244733e06e7ecb4970a6e2683c13e61</td>\n",
              "      <td>48436dade18ac8b2bce089ec2a041202</td>\n",
              "      <td>2017-09-19 09:45:35</td>\n",
              "      <td>58.90</td>\n",
              "      <td>13.29</td>\n",
              "      <td>27277</td>\n",
              "      <td>volta redonda</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>00018f77f2f0320c557190d7a144bdd3</td>\n",
              "      <td>1</td>\n",
              "      <td>e5f2d52b802189ee658865ca93d83a8f</td>\n",
              "      <td>dd7ddc04e1b6c2c614352b383efe2d36</td>\n",
              "      <td>2017-05-03 11:05:13</td>\n",
              "      <td>239.90</td>\n",
              "      <td>19.93</td>\n",
              "      <td>3471</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>000229ec398224ef6ca0657da4fc703e</td>\n",
              "      <td>1</td>\n",
              "      <td>c777355d18b72b67abbeef9df44fd0fd</td>\n",
              "      <td>5b51032eddd242adc84c38acab88f23d</td>\n",
              "      <td>2018-01-18 14:48:30</td>\n",
              "      <td>199.00</td>\n",
              "      <td>17.87</td>\n",
              "      <td>37564</td>\n",
              "      <td>borda da mata</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>00024acbcdf0a6daa1e931b038114c75</td>\n",
              "      <td>1</td>\n",
              "      <td>7634da152a4610f1595efa32f14722fc</td>\n",
              "      <td>9d7a1d34a5052409006425275ba1c2b4</td>\n",
              "      <td>2018-08-15 10:10:18</td>\n",
              "      <td>12.99</td>\n",
              "      <td>12.79</td>\n",
              "      <td>14403</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>00042b26cf59d7ce69dfabb4e55b4fd9</td>\n",
              "      <td>1</td>\n",
              "      <td>ac6c3623068f30de03045865e4e10089</td>\n",
              "      <td>df560393f3a51e74553ab94004ba5c87</td>\n",
              "      <td>2017-02-13 13:57:51</td>\n",
              "      <td>199.90</td>\n",
              "      <td>18.14</td>\n",
              "      <td>87900</td>\n",
              "      <td>loanda</td>\n",
              "      <td>PR</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-274c513a-27b9-4b8a-8a0f-5bea8c0a3e7a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-274c513a-27b9-4b8a-8a0f-5bea8c0a3e7a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-274c513a-27b9-4b8a-8a0f-5bea8c0a3e7a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-db3bc4d1-486d-41bb-b3f4-ceeeeefdbc86\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db3bc4d1-486d-41bb-b3f4-ceeeeefdbc86')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-db3bc4d1-486d-41bb-b3f4-ceeeeefdbc86 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                           order_id  order_item_id  \\\n",
              "0  00010242fe8c5a6d1ba2dd792cb16214              1   \n",
              "1  00018f77f2f0320c557190d7a144bdd3              1   \n",
              "2  000229ec398224ef6ca0657da4fc703e              1   \n",
              "3  00024acbcdf0a6daa1e931b038114c75              1   \n",
              "4  00042b26cf59d7ce69dfabb4e55b4fd9              1   \n",
              "\n",
              "                         product_id                         seller_id  \\\n",
              "0  4244733e06e7ecb4970a6e2683c13e61  48436dade18ac8b2bce089ec2a041202   \n",
              "1  e5f2d52b802189ee658865ca93d83a8f  dd7ddc04e1b6c2c614352b383efe2d36   \n",
              "2  c777355d18b72b67abbeef9df44fd0fd  5b51032eddd242adc84c38acab88f23d   \n",
              "3  7634da152a4610f1595efa32f14722fc  9d7a1d34a5052409006425275ba1c2b4   \n",
              "4  ac6c3623068f30de03045865e4e10089  df560393f3a51e74553ab94004ba5c87   \n",
              "\n",
              "  shipping_limit_date   price  freight_value  seller_zip_code_prefix  \\\n",
              "0 2017-09-19 09:45:35   58.90          13.29                   27277   \n",
              "1 2017-05-03 11:05:13  239.90          19.93                    3471   \n",
              "2 2018-01-18 14:48:30  199.00          17.87                   37564   \n",
              "3 2018-08-15 10:10:18   12.99          12.79                   14403   \n",
              "4 2017-02-13 13:57:51  199.90          18.14                   87900   \n",
              "\n",
              "     seller_city seller_state  \n",
              "0  volta redonda           SP  \n",
              "1      sao paulo           SP  \n",
              "2  borda da mata           MG  \n",
              "3         franca           SP  \n",
              "4         loanda           PR  "
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "items_sellers = pd.merge(\n",
        "    left=order_items,\n",
        "    right=sellers,\n",
        "    how=\"left\",\n",
        "    left_on=\"seller_id\",\n",
        "    right_on=\"seller_id\"\n",
        ")\n",
        "items_sellers.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10gluNpdJIXf",
        "outputId": "e639b759-1a1d-40b3-e645-50ab406e85da"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "seller_city\n",
              "sao paulo         694\n",
              "curitiba          127\n",
              "rio de janeiro     96\n",
              "belo horizonte     68\n",
              "ribeirao preto     52\n",
              "guarulhos          50\n",
              "ibitinga           49\n",
              "santo andre        45\n",
              "campinas           41\n",
              "maringa            40\n",
              "Name: seller_id, dtype: int64"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat seller's city\n",
        "items_sellers.groupby(by=\"seller_city\").seller_id.nunique().sort_values(ascending=False).head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qhumcgXbJgMK",
        "outputId": "d0b14ce2-dc53-479c-d924-922044e54ebd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "seller_state\n",
              "SP    1849\n",
              "PR     349\n",
              "MG     244\n",
              "SC     190\n",
              "RJ     171\n",
              "RS     129\n",
              "GO      40\n",
              "DF      30\n",
              "ES      23\n",
              "BA      19\n",
              "Name: seller_id, dtype: int64"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat seller's state\n",
        "items_sellers.groupby(by=\"seller_state\").seller_id.nunique().sort_values(ascending=False).head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6z3fgy1IJtv-"
      },
      "source": [
        "### Explore products dan product category name translation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4jF0exuXJ4Uf"
      },
      "source": [
        "* Merge products dan product category name translation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "VCPT334uJ8Gy",
        "outputId": "1ab72be0-4aab-47ea-dfdb-28c438f97a9b"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"products_category\",\n  \"rows\": 32340,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 32340,\n        \"samples\": [\n          \"668e8ee8f69c3545109fc40f72336e8f\",\n          \"afc026db9e1bc0f06ae19abe8aff3b66\",\n          \"0b13080e2bf193c4ff096b09e0758c7d\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_category_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"utilidades_domesticas\",\n          \"pc_gamer\",\n          \"eletronicos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name_lenght\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.245698759400783,\n        \"min\": 5.0,\n        \"max\": 76.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          13.0,\n          72.0,\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_description_lenght\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 635.1248313619122,\n        \"min\": 4.0,\n        \"max\": 3992.0,\n        \"num_unique_values\": 2960,\n        \"samples\": [\n          1314.0,\n          40.0,\n          123.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_photos_qty\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7367866346882603,\n        \"min\": 1.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1.0,\n          9.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_weight_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4279.291844890443,\n        \"min\": 0.0,\n        \"max\": 40425.0,\n        \"num_unique_values\": 2202,\n        \"samples\": [\n          2975.0,\n          20850.0,\n          4517.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_length_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.955964727614138,\n        \"min\": 7.0,\n        \"max\": 105.0,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          88.0,\n          75.0,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_height_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.636115015503993,\n        \"min\": 2.0,\n        \"max\": 105.0,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          6.0,\n          38.0,\n          54.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_width_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.078762221674578,\n        \"min\": 6.0,\n        \"max\": 118.0,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          80.0,\n          38.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_category_name_english\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          \"fashion_bags_accessories\",\n          \"perfumery\",\n          \"fashio_female_clothing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "products_category"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-c2f648fc-89d9-4bbe-8966-f66505ef0532\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_photos_qty</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>product_category_name_english</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1e9e8ef04dbcff4541ed26657ea517e5</td>\n",
              "      <td>perfumaria</td>\n",
              "      <td>40.0</td>\n",
              "      <td>287.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>perfumery</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3aa071139cb16b67ca9e5dea641aaa2f</td>\n",
              "      <td>artes</td>\n",
              "      <td>44.0</td>\n",
              "      <td>276.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>art</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>96bd76ec8810374ed1b65e291975717f</td>\n",
              "      <td>esporte_lazer</td>\n",
              "      <td>46.0</td>\n",
              "      <td>250.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>sports_leisure</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>cef67bcfe19066a932b7673e239eb23d</td>\n",
              "      <td>bebes</td>\n",
              "      <td>27.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>baby</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9dc1a7de274444849c219cff195d0b71</td>\n",
              "      <td>utilidades_domesticas</td>\n",
              "      <td>37.0</td>\n",
              "      <td>402.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>625.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>housewares</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2f648fc-89d9-4bbe-8966-f66505ef0532')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2f648fc-89d9-4bbe-8966-f66505ef0532 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2f648fc-89d9-4bbe-8966-f66505ef0532');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b3e65c1e-a78d-428b-82bf-9a46ab79d689\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3e65c1e-a78d-428b-82bf-9a46ab79d689')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b3e65c1e-a78d-428b-82bf-9a46ab79d689 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                         product_id  product_category_name  \\\n",
              "0  1e9e8ef04dbcff4541ed26657ea517e5             perfumaria   \n",
              "1  3aa071139cb16b67ca9e5dea641aaa2f                  artes   \n",
              "2  96bd76ec8810374ed1b65e291975717f          esporte_lazer   \n",
              "3  cef67bcfe19066a932b7673e239eb23d                  bebes   \n",
              "4  9dc1a7de274444849c219cff195d0b71  utilidades_domesticas   \n",
              "\n",
              "   product_name_lenght  product_description_lenght  product_photos_qty  \\\n",
              "0                 40.0                       287.0                 1.0   \n",
              "1                 44.0                       276.0                 1.0   \n",
              "2                 46.0                       250.0                 1.0   \n",
              "3                 27.0                       261.0                 1.0   \n",
              "4                 37.0                       402.0                 4.0   \n",
              "\n",
              "   product_weight_g  product_length_cm  product_height_cm  product_width_cm  \\\n",
              "0             225.0               16.0               10.0              14.0   \n",
              "1            1000.0               30.0               18.0              20.0   \n",
              "2             154.0               18.0                9.0              15.0   \n",
              "3             371.0               26.0                4.0              26.0   \n",
              "4             625.0               20.0               17.0              13.0   \n",
              "\n",
              "  product_category_name_english  \n",
              "0                     perfumery  \n",
              "1                           art  \n",
              "2                sports_leisure  \n",
              "3                          baby  \n",
              "4                    housewares  "
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "products_category = pd.merge(\n",
        "    left=products,\n",
        "    right=product_cat,\n",
        "    how=\"left\",\n",
        "    left_on=\"product_category_name\",\n",
        "    right_on=\"product_category_name\"\n",
        ")\n",
        "products_category.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fRmdLYACKSvW",
        "outputId": "e035dc7b-2c29-49eb-eb79-dd1875e453c7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "product_category_name\n",
              "cama_mesa_banho           3029\n",
              "esporte_lazer             2867\n",
              "moveis_decoracao          2657\n",
              "beleza_saude              2444\n",
              "utilidades_domesticas     2335\n",
              "automotivo                1900\n",
              "informatica_acessorios    1639\n",
              "brinquedos                1411\n",
              "relogios_presentes        1329\n",
              "telefonia                 1134\n",
              "Name: product_id, dtype: int64"
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat pengelompokan produk berdasarkan product category name (sebelum didterjemakan)\n",
        "products_category.groupby(by=\"product_category_name\").product_id.nunique().sort_values(ascending=False).head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CFeXSJVoKlSO",
        "outputId": "a745b60e-b517-462e-8708-c2cda6c70b84"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "product_category_name_english\n",
              "bed_bath_table           3029\n",
              "sports_leisure           2867\n",
              "furniture_decor          2657\n",
              "health_beauty            2444\n",
              "housewares               2335\n",
              "auto                     1900\n",
              "computers_accessories    1639\n",
              "toys                     1411\n",
              "watches_gifts            1329\n",
              "telephony                1134\n",
              "Name: product_id, dtype: int64"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat pengelompokan produk berdasarkan product category name (setelah diterjemahkan)\n",
        "products_category.groupby(by=\"product_category_name_english\").product_id.nunique().sort_values(ascending=False).head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ibJ44oZPKuFb"
      },
      "source": [
        "* Merge items_sellers dan product_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "zDGRu1i2KxUg",
        "outputId": "0d851a77-5b85-4c7f-85b6-55d0e23cf7e4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sellers_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-71b7bc2b-7cdb-4d53-8968-a95e70d8f295\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_photos_qty</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>product_category_name_english</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1e9e8ef04dbcff4541ed26657ea517e5</td>\n",
              "      <td>perfumaria</td>\n",
              "      <td>40.0</td>\n",
              "      <td>287.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>perfumery</td>\n",
              "      <td>e17e4f88e31525f7deef66779844ddce</td>\n",
              "      <td>1</td>\n",
              "      <td>5670f4db5b62c43d542e1b2d56b0cf7c</td>\n",
              "      <td>2018-04-30 17:33:54</td>\n",
              "      <td>10.91</td>\n",
              "      <td>7.39</td>\n",
              "      <td>3694</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3aa071139cb16b67ca9e5dea641aaa2f</td>\n",
              "      <td>artes</td>\n",
              "      <td>44.0</td>\n",
              "      <td>276.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>art</td>\n",
              "      <td>5236307716393b7114b53ee991f36956</td>\n",
              "      <td>1</td>\n",
              "      <td>b561927807645834b59ef0d16ba55a24</td>\n",
              "      <td>2018-02-06 19:11:15</td>\n",
              "      <td>248.00</td>\n",
              "      <td>17.99</td>\n",
              "      <td>2955</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>96bd76ec8810374ed1b65e291975717f</td>\n",
              "      <td>esporte_lazer</td>\n",
              "      <td>46.0</td>\n",
              "      <td>250.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>sports_leisure</td>\n",
              "      <td>01f66e58769f84129811d43eefd187fb</td>\n",
              "      <td>1</td>\n",
              "      <td>7b07b3c7487f0ea825fc6df75abd658b</td>\n",
              "      <td>2018-07-11 21:30:20</td>\n",
              "      <td>79.80</td>\n",
              "      <td>7.82</td>\n",
              "      <td>2016</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>cef67bcfe19066a932b7673e239eb23d</td>\n",
              "      <td>bebes</td>\n",
              "      <td>27.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>baby</td>\n",
              "      <td>143d00a4f2dde4e0364ee1821577adb3</td>\n",
              "      <td>1</td>\n",
              "      <td>c510bc1718f0f2961eaa42a23330681a</td>\n",
              "      <td>2018-08-07 09:10:13</td>\n",
              "      <td>112.30</td>\n",
              "      <td>9.54</td>\n",
              "      <td>13330</td>\n",
              "      <td>indaiatuba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9dc1a7de274444849c219cff195d0b71</td>\n",
              "      <td>utilidades_domesticas</td>\n",
              "      <td>37.0</td>\n",
              "      <td>402.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>625.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>housewares</td>\n",
              "      <td>86cafb8794cb99a9b1b77fc8e48fbbbb</td>\n",
              "      <td>1</td>\n",
              "      <td>0be8ff43f22e456b4e0371b2245e4d01</td>\n",
              "      <td>2018-04-17 01:30:23</td>\n",
              "      <td>37.90</td>\n",
              "      <td>8.29</td>\n",
              "      <td>4461</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71b7bc2b-7cdb-4d53-8968-a95e70d8f295')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71b7bc2b-7cdb-4d53-8968-a95e70d8f295 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71b7bc2b-7cdb-4d53-8968-a95e70d8f295');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-69ba2c09-5f9f-4d86-b2eb-e7056a331f44\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69ba2c09-5f9f-4d86-b2eb-e7056a331f44')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-69ba2c09-5f9f-4d86-b2eb-e7056a331f44 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                         product_id  product_category_name  \\\n",
              "0  1e9e8ef04dbcff4541ed26657ea517e5             perfumaria   \n",
              "1  3aa071139cb16b67ca9e5dea641aaa2f                  artes   \n",
              "2  96bd76ec8810374ed1b65e291975717f          esporte_lazer   \n",
              "3  cef67bcfe19066a932b7673e239eb23d                  bebes   \n",
              "4  9dc1a7de274444849c219cff195d0b71  utilidades_domesticas   \n",
              "\n",
              "   product_name_lenght  product_description_lenght  product_photos_qty  \\\n",
              "0                 40.0                       287.0                 1.0   \n",
              "1                 44.0                       276.0                 1.0   \n",
              "2                 46.0                       250.0                 1.0   \n",
              "3                 27.0                       261.0                 1.0   \n",
              "4                 37.0                       402.0                 4.0   \n",
              "\n",
              "   product_weight_g  product_length_cm  product_height_cm  product_width_cm  \\\n",
              "0             225.0               16.0               10.0              14.0   \n",
              "1            1000.0               30.0               18.0              20.0   \n",
              "2             154.0               18.0                9.0              15.0   \n",
              "3             371.0               26.0                4.0              26.0   \n",
              "4             625.0               20.0               17.0              13.0   \n",
              "\n",
              "  product_category_name_english                          order_id  \\\n",
              "0                     perfumery  e17e4f88e31525f7deef66779844ddce   \n",
              "1                           art  5236307716393b7114b53ee991f36956   \n",
              "2                sports_leisure  01f66e58769f84129811d43eefd187fb   \n",
              "3                          baby  143d00a4f2dde4e0364ee1821577adb3   \n",
              "4                    housewares  86cafb8794cb99a9b1b77fc8e48fbbbb   \n",
              "\n",
              "   order_item_id                         seller_id shipping_limit_date  \\\n",
              "0              1  5670f4db5b62c43d542e1b2d56b0cf7c 2018-04-30 17:33:54   \n",
              "1              1  b561927807645834b59ef0d16ba55a24 2018-02-06 19:11:15   \n",
              "2              1  7b07b3c7487f0ea825fc6df75abd658b 2018-07-11 21:30:20   \n",
              "3              1  c510bc1718f0f2961eaa42a23330681a 2018-08-07 09:10:13   \n",
              "4              1  0be8ff43f22e456b4e0371b2245e4d01 2018-04-17 01:30:23   \n",
              "\n",
              "    price  freight_value  seller_zip_code_prefix seller_city seller_state  \n",
              "0   10.91           7.39                    3694   sao paulo           SP  \n",
              "1  248.00          17.99                    2955   sao paulo           SP  \n",
              "2   79.80           7.82                    2016   sao paulo           SP  \n",
              "3  112.30           9.54                   13330  indaiatuba           SP  \n",
              "4   37.90           8.29                    4461   sao paulo           SP  "
            ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sellers_df = pd.merge(\n",
        "    left=products_category,\n",
        "    right=items_sellers,\n",
        "    how=\"left\",\n",
        "    left_on=\"product_id\",\n",
        "    right_on=\"product_id\"\n",
        ")\n",
        "sellers_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "Q6ETBv1WK6gT",
        "outputId": "18a2fc26-eacc-4df3-d53d-b2b9d01ec71e"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-764b9ae6-88ce-4606-81da-53e3b75d76eb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_photos_qty</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>product_category_name_english</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20259</th>\n",
              "      <td>489ae2aa008f021502940f251d4cce7f</td>\n",
              "      <td>utilidades_domesticas</td>\n",
              "      <td>31.0</td>\n",
              "      <td>875.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>30000.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>housewares</td>\n",
              "      <td>0812eb902a67711a1cb742b3cdaa65ae</td>\n",
              "      <td>1</td>\n",
              "      <td>e3b4998c7a498169dc7bce44e6bb6277</td>\n",
              "      <td>2017-02-16 20:37:36</td>\n",
              "      <td>6735.00</td>\n",
              "      <td>194.31</td>\n",
              "      <td>3635</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72948</th>\n",
              "      <td>69c590f7ffc7bf8db97190b6cb6ed62e</td>\n",
              "      <td>pcs</td>\n",
              "      <td>50.0</td>\n",
              "      <td>1935.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5660.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>computers</td>\n",
              "      <td>fefacc66af859508bf1a7934eab1e97f</td>\n",
              "      <td>1</td>\n",
              "      <td>80ceebb4ee9b31afb6c6a916a574a1e2</td>\n",
              "      <td>2018-08-02 04:05:13</td>\n",
              "      <td>6729.00</td>\n",
              "      <td>193.21</td>\n",
              "      <td>86026</td>\n",
              "      <td>londrina</td>\n",
              "      <td>PR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48843</th>\n",
              "      <td>1bdf5e6731585cf01aa8169c7028d6ad</td>\n",
              "      <td>artes</td>\n",
              "      <td>28.0</td>\n",
              "      <td>3954.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7400.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>art</td>\n",
              "      <td>f5136e38d1a14a4dbd87dff67da82701</td>\n",
              "      <td>1</td>\n",
              "      <td>ee27a8f15b1dded4d213a468ba4eb391</td>\n",
              "      <td>2017-06-15 02:45:17</td>\n",
              "      <td>6499.00</td>\n",
              "      <td>227.66</td>\n",
              "      <td>74210</td>\n",
              "      <td>goiania</td>\n",
              "      <td>GO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70869</th>\n",
              "      <td>a6492cc69376c469ab6f61d8f44de961</td>\n",
              "      <td>eletroportateis</td>\n",
              "      <td>41.0</td>\n",
              "      <td>1780.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>22600.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>small_appliances</td>\n",
              "      <td>a96610ab360d42a2e5335a3998b4718a</td>\n",
              "      <td>1</td>\n",
              "      <td>59417c56835dd8e2e72f91f809cd4092</td>\n",
              "      <td>2017-04-18 13:25:18</td>\n",
              "      <td>4799.00</td>\n",
              "      <td>151.34</td>\n",
              "      <td>13480</td>\n",
              "      <td>limeira</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31828</th>\n",
              "      <td>c3ed642d592594bb648ff4a04cee2747</td>\n",
              "      <td>eletroportateis</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2217.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>30000.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>small_appliances</td>\n",
              "      <td>199af31afc78c699f0dbf71fb178d4d4</td>\n",
              "      <td>1</td>\n",
              "      <td>59417c56835dd8e2e72f91f809cd4092</td>\n",
              "      <td>2017-05-09 15:50:15</td>\n",
              "      <td>4690.00</td>\n",
              "      <td>74.34</td>\n",
              "      <td>13480</td>\n",
              "      <td>limeira</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9220</th>\n",
              "      <td>270516a3f41dc035aa87d220228f844c</td>\n",
              "      <td>beleza_saude</td>\n",
              "      <td>45.0</td>\n",
              "      <td>232.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>800.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>health_beauty</td>\n",
              "      <td>8272b63d03f5f79c56e9e4120aec44ef</td>\n",
              "      <td>20</td>\n",
              "      <td>2709af9587499e95e803a6498a5a56e9</td>\n",
              "      <td>2017-07-21 18:25:23</td>\n",
              "      <td>1.20</td>\n",
              "      <td>7.89</td>\n",
              "      <td>3813</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9215</th>\n",
              "      <td>270516a3f41dc035aa87d220228f844c</td>\n",
              "      <td>beleza_saude</td>\n",
              "      <td>45.0</td>\n",
              "      <td>232.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>800.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>health_beauty</td>\n",
              "      <td>8272b63d03f5f79c56e9e4120aec44ef</td>\n",
              "      <td>15</td>\n",
              "      <td>2709af9587499e95e803a6498a5a56e9</td>\n",
              "      <td>2017-07-21 18:25:23</td>\n",
              "      <td>1.20</td>\n",
              "      <td>7.89</td>\n",
              "      <td>3813</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29222</th>\n",
              "      <td>8a3254bee785a526d548a81a9bc3c9be</td>\n",
              "      <td>construcao_ferramentas_construcao</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>construction_tools_construction</td>\n",
              "      <td>6e864b3f0ec71031117ad4cf46b7f2a1</td>\n",
              "      <td>1</td>\n",
              "      <td>96804ea39d96eb908e7c3afdb671bb9e</td>\n",
              "      <td>2018-05-02 20:30:34</td>\n",
              "      <td>0.85</td>\n",
              "      <td>18.23</td>\n",
              "      <td>38950</td>\n",
              "      <td>ibia</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29223</th>\n",
              "      <td>8a3254bee785a526d548a81a9bc3c9be</td>\n",
              "      <td>construcao_ferramentas_construcao</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>construction_tools_construction</td>\n",
              "      <td>c5bdd8ef3c0ec420232e668302179113</td>\n",
              "      <td>2</td>\n",
              "      <td>96804ea39d96eb908e7c3afdb671bb9e</td>\n",
              "      <td>2018-05-07 02:55:22</td>\n",
              "      <td>0.85</td>\n",
              "      <td>22.30</td>\n",
              "      <td>38950</td>\n",
              "      <td>ibia</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29221</th>\n",
              "      <td>8a3254bee785a526d548a81a9bc3c9be</td>\n",
              "      <td>construcao_ferramentas_construcao</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>construction_tools_construction</td>\n",
              "      <td>3ee6513ae7ea23bdfab5b9ab60bffcb5</td>\n",
              "      <td>1</td>\n",
              "      <td>96804ea39d96eb908e7c3afdb671bb9e</td>\n",
              "      <td>2018-05-04 03:55:26</td>\n",
              "      <td>0.85</td>\n",
              "      <td>18.23</td>\n",
              "      <td>38950</td>\n",
              "      <td>ibia</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>111046 rows × 19 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-764b9ae6-88ce-4606-81da-53e3b75d76eb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-764b9ae6-88ce-4606-81da-53e3b75d76eb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-764b9ae6-88ce-4606-81da-53e3b75d76eb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-072ae483-df60-4963-9f8d-3c6388bd6355\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-072ae483-df60-4963-9f8d-3c6388bd6355')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-072ae483-df60-4963-9f8d-3c6388bd6355 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                             product_id              product_category_name  \\\n",
              "20259  489ae2aa008f021502940f251d4cce7f              utilidades_domesticas   \n",
              "72948  69c590f7ffc7bf8db97190b6cb6ed62e                                pcs   \n",
              "48843  1bdf5e6731585cf01aa8169c7028d6ad                              artes   \n",
              "70869  a6492cc69376c469ab6f61d8f44de961                    eletroportateis   \n",
              "31828  c3ed642d592594bb648ff4a04cee2747                    eletroportateis   \n",
              "...                                 ...                                ...   \n",
              "9220   270516a3f41dc035aa87d220228f844c                       beleza_saude   \n",
              "9215   270516a3f41dc035aa87d220228f844c                       beleza_saude   \n",
              "29222  8a3254bee785a526d548a81a9bc3c9be  construcao_ferramentas_construcao   \n",
              "29223  8a3254bee785a526d548a81a9bc3c9be  construcao_ferramentas_construcao   \n",
              "29221  8a3254bee785a526d548a81a9bc3c9be  construcao_ferramentas_construcao   \n",
              "\n",
              "       product_name_lenght  product_description_lenght  product_photos_qty  \\\n",
              "20259                 31.0                       875.0                 2.0   \n",
              "72948                 50.0                      1935.0                 4.0   \n",
              "48843                 28.0                      3954.0                 2.0   \n",
              "70869                 41.0                      1780.0                 2.0   \n",
              "31828                 59.0                      2217.0                 2.0   \n",
              "...                    ...                         ...                 ...   \n",
              "9220                  45.0                       232.0                 3.0   \n",
              "9215                  45.0                       232.0                 3.0   \n",
              "29222                 25.0                      1041.0                 5.0   \n",
              "29223                 25.0                      1041.0                 5.0   \n",
              "29221                 25.0                      1041.0                 5.0   \n",
              "\n",
              "       product_weight_g  product_length_cm  product_height_cm  \\\n",
              "20259           30000.0               60.0               61.0   \n",
              "72948            5660.0               54.0               18.0   \n",
              "48843            7400.0               47.0               25.0   \n",
              "70869           22600.0               55.0               40.0   \n",
              "31828           30000.0               50.0               49.0   \n",
              "...                 ...                ...                ...   \n",
              "9220              800.0               21.0                4.0   \n",
              "9215              800.0               21.0                4.0   \n",
              "29222             200.0               16.0                4.0   \n",
              "29223             200.0               16.0                4.0   \n",
              "29221             200.0               16.0                4.0   \n",
              "\n",
              "       product_width_cm    product_category_name_english  \\\n",
              "20259              33.0                       housewares   \n",
              "72948              47.0                        computers   \n",
              "48843              25.0                              art   \n",
              "70869              40.0                 small_appliances   \n",
              "31828              50.0                 small_appliances   \n",
              "...                 ...                              ...   \n",
              "9220               15.0                    health_beauty   \n",
              "9215               15.0                    health_beauty   \n",
              "29222              11.0  construction_tools_construction   \n",
              "29223              11.0  construction_tools_construction   \n",
              "29221              11.0  construction_tools_construction   \n",
              "\n",
              "                               order_id  order_item_id  \\\n",
              "20259  0812eb902a67711a1cb742b3cdaa65ae              1   \n",
              "72948  fefacc66af859508bf1a7934eab1e97f              1   \n",
              "48843  f5136e38d1a14a4dbd87dff67da82701              1   \n",
              "70869  a96610ab360d42a2e5335a3998b4718a              1   \n",
              "31828  199af31afc78c699f0dbf71fb178d4d4              1   \n",
              "...                                 ...            ...   \n",
              "9220   8272b63d03f5f79c56e9e4120aec44ef             20   \n",
              "9215   8272b63d03f5f79c56e9e4120aec44ef             15   \n",
              "29222  6e864b3f0ec71031117ad4cf46b7f2a1              1   \n",
              "29223  c5bdd8ef3c0ec420232e668302179113              2   \n",
              "29221  3ee6513ae7ea23bdfab5b9ab60bffcb5              1   \n",
              "\n",
              "                              seller_id shipping_limit_date    price  \\\n",
              "20259  e3b4998c7a498169dc7bce44e6bb6277 2017-02-16 20:37:36  6735.00   \n",
              "72948  80ceebb4ee9b31afb6c6a916a574a1e2 2018-08-02 04:05:13  6729.00   \n",
              "48843  ee27a8f15b1dded4d213a468ba4eb391 2017-06-15 02:45:17  6499.00   \n",
              "70869  59417c56835dd8e2e72f91f809cd4092 2017-04-18 13:25:18  4799.00   \n",
              "31828  59417c56835dd8e2e72f91f809cd4092 2017-05-09 15:50:15  4690.00   \n",
              "...                                 ...                 ...      ...   \n",
              "9220   2709af9587499e95e803a6498a5a56e9 2017-07-21 18:25:23     1.20   \n",
              "9215   2709af9587499e95e803a6498a5a56e9 2017-07-21 18:25:23     1.20   \n",
              "29222  96804ea39d96eb908e7c3afdb671bb9e 2018-05-02 20:30:34     0.85   \n",
              "29223  96804ea39d96eb908e7c3afdb671bb9e 2018-05-07 02:55:22     0.85   \n",
              "29221  96804ea39d96eb908e7c3afdb671bb9e 2018-05-04 03:55:26     0.85   \n",
              "\n",
              "       freight_value  seller_zip_code_prefix seller_city seller_state  \n",
              "20259         194.31                    3635   sao paulo           SP  \n",
              "72948         193.21                   86026    londrina           PR  \n",
              "48843         227.66                   74210     goiania           GO  \n",
              "70869         151.34                   13480     limeira           SP  \n",
              "31828          74.34                   13480     limeira           SP  \n",
              "...              ...                     ...         ...          ...  \n",
              "9220            7.89                    3813   sao paulo           SP  \n",
              "9215            7.89                    3813   sao paulo           SP  \n",
              "29222          18.23                   38950        ibia           MG  \n",
              "29223          22.30                   38950        ibia           MG  \n",
              "29221          18.23                   38950        ibia           MG  \n",
              "\n",
              "[111046 rows x 19 columns]"
            ]
          },
          "execution_count": 56,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Mengurutkan berdasarkan harga tertinggi\n",
        "sellers_df.sort_values(by=\"price\", ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "YfAss4WJK_gc",
        "outputId": "e2c4cbda-e804-4ec8-807b-31b6eaf9eaba"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"})\",\n  \"rows\": 71,\n  \"fields\": [\n    {\n      \"column\": [\n        \"order_id\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2272,\n        \"min\": 2,\n        \"max\": 9417,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          397,\n          1062,\n          350\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.328521247035946,\n        \"min\": 0.85,\n        \"max\": 100.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          6.9,\n          3.49,\n          4.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1624.7725042260079,\n        \"min\": 65.0,\n        \"max\": 6735.0,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          1899.0,\n          2990.0,\n          1097.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-7ff3911c-254c-40f6-81c0-b6c15fe624da\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th colspan=\"2\" halign=\"left\">price</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>nunique</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>product_category_name_english</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>agro_industry_and_commerce</th>\n",
              "      <td>182</td>\n",
              "      <td>12.99</td>\n",
              "      <td>2990.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>air_conditioning</th>\n",
              "      <td>253</td>\n",
              "      <td>10.90</td>\n",
              "      <td>1599.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>art</th>\n",
              "      <td>202</td>\n",
              "      <td>3.50</td>\n",
              "      <td>6499.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arts_and_craftmanship</th>\n",
              "      <td>23</td>\n",
              "      <td>9.80</td>\n",
              "      <td>289.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>audio</th>\n",
              "      <td>350</td>\n",
              "      <td>14.90</td>\n",
              "      <td>598.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stationery</th>\n",
              "      <td>2311</td>\n",
              "      <td>2.29</td>\n",
              "      <td>1693.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tablets_printing_image</th>\n",
              "      <td>79</td>\n",
              "      <td>14.90</td>\n",
              "      <td>889.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>telephony</th>\n",
              "      <td>4199</td>\n",
              "      <td>5.00</td>\n",
              "      <td>2428.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>toys</th>\n",
              "      <td>3886</td>\n",
              "      <td>4.90</td>\n",
              "      <td>1699.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>watches_gifts</th>\n",
              "      <td>5624</td>\n",
              "      <td>8.99</td>\n",
              "      <td>3999.90</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>71 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ff3911c-254c-40f6-81c0-b6c15fe624da')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7ff3911c-254c-40f6-81c0-b6c15fe624da button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7ff3911c-254c-40f6-81c0-b6c15fe624da');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3b7ebedd-8cb1-4b56-9925-d7ffa0e4e7cf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b7ebedd-8cb1-4b56-9925-d7ffa0e4e7cf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3b7ebedd-8cb1-4b56-9925-d7ffa0e4e7cf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                              order_id  price         \n",
              "                               nunique    min      max\n",
              "product_category_name_english                         \n",
              "agro_industry_and_commerce         182  12.99  2990.00\n",
              "air_conditioning                   253  10.90  1599.00\n",
              "art                                202   3.50  6499.00\n",
              "arts_and_craftmanship               23   9.80   289.49\n",
              "audio                              350  14.90   598.99\n",
              "...                                ...    ...      ...\n",
              "stationery                        2311   2.29  1693.00\n",
              "tablets_printing_image              79  14.90   889.99\n",
              "telephony                         4199   5.00  2428.00\n",
              "toys                              3886   4.90  1699.99\n",
              "watches_gifts                     5624   8.99  3999.90\n",
              "\n",
              "[71 rows x 3 columns]"
            ]
          },
          "execution_count": 57,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat pengelompokkan product category name yang sudah diterjemahkan\n",
        "sellers_df.groupby(by=\"product_category_name_english\").agg({\n",
        "    \"order_id\": \"nunique\",\n",
        "    \"price\":  [\"min\", \"max\"]\n",
        "})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m3u0AU9FLvYy"
      },
      "source": [
        "### Explore all data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GPXhmaaaLxS5"
      },
      "source": [
        "* Merge all data\n",
        "Dalam penggabungan seluruh data ini, data geolocation tidak digabung karena dianggap tidak terlalu penting."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 760
        },
        "id": "gp8z_WALLyoD",
        "outputId": "6bc38646-8e1f-42a8-98ae-16a6e5512064"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "all_data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-08157fc2-62fa-450b-acda-cae8f145ce26\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>...</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>product_category_name_english</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>06b8999e2fba1a1fbc88172c00ba8bc7</td>\n",
              "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
              "      <td>14409</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "      <td>00e7ee1b050b8499577073aeb2a297a1</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-05-16 15:05:35</td>\n",
              "      <td>2017-05-16 15:22:12</td>\n",
              "      <td>2017-05-23 10:47:57</td>\n",
              "      <td>...</td>\n",
              "      <td>31.0</td>\n",
              "      <td>office_furniture</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7c67e1448b00f6e969d365cea6b010ab</td>\n",
              "      <td>2017-05-22 15:22:12</td>\n",
              "      <td>124.99</td>\n",
              "      <td>21.88</td>\n",
              "      <td>8577.0</td>\n",
              "      <td>itaquaquecetuba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18955e83d337fd6b2def6b18a428ac77</td>\n",
              "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
              "      <td>9790</td>\n",
              "      <td>sao bernardo do campo</td>\n",
              "      <td>SP</td>\n",
              "      <td>29150127e6685892b6eab3eec79f59c7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-12 20:48:24</td>\n",
              "      <td>2018-01-12 20:58:32</td>\n",
              "      <td>2018-01-15 17:14:59</td>\n",
              "      <td>...</td>\n",
              "      <td>40.0</td>\n",
              "      <td>housewares</td>\n",
              "      <td>1.0</td>\n",
              "      <td>b8bc237ba3788b23da09c0f1f3a3288c</td>\n",
              "      <td>2018-01-18 20:58:32</td>\n",
              "      <td>289.00</td>\n",
              "      <td>46.48</td>\n",
              "      <td>88303.0</td>\n",
              "      <td>itajai</td>\n",
              "      <td>SC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4e7b3e00288586ebd08712fdd0374a03</td>\n",
              "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
              "      <td>1151</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>b2059ed67ce144a36e2aa97d2c9e9ad2</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-05-19 16:07:45</td>\n",
              "      <td>2018-05-20 16:19:10</td>\n",
              "      <td>2018-06-11 14:31:00</td>\n",
              "      <td>...</td>\n",
              "      <td>17.0</td>\n",
              "      <td>office_furniture</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7c67e1448b00f6e969d365cea6b010ab</td>\n",
              "      <td>2018-06-05 16:19:10</td>\n",
              "      <td>139.94</td>\n",
              "      <td>17.79</td>\n",
              "      <td>8577.0</td>\n",
              "      <td>itaquaquecetuba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b2b6027bc5c5109e529d4dc6358b12c3</td>\n",
              "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
              "      <td>8775</td>\n",
              "      <td>mogi das cruzes</td>\n",
              "      <td>SP</td>\n",
              "      <td>951670f92359f4fe4a63112aa7306eba</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-03-13 16:06:38</td>\n",
              "      <td>2018-03-13 17:29:19</td>\n",
              "      <td>2018-03-27 23:22:42</td>\n",
              "      <td>...</td>\n",
              "      <td>28.0</td>\n",
              "      <td>office_furniture</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7c67e1448b00f6e969d365cea6b010ab</td>\n",
              "      <td>2018-03-27 16:31:16</td>\n",
              "      <td>149.94</td>\n",
              "      <td>23.36</td>\n",
              "      <td>8577.0</td>\n",
              "      <td>itaquaquecetuba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4f2d8ab171c80ec8364f7c12e35b23ad</td>\n",
              "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
              "      <td>13056</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "      <td>6b7d50bd145f6fc7f33cebabd7e49d0f</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-29 09:51:30</td>\n",
              "      <td>2018-07-29 10:10:09</td>\n",
              "      <td>2018-07-30 15:16:00</td>\n",
              "      <td>...</td>\n",
              "      <td>35.0</td>\n",
              "      <td>home_confort</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4a3ca9315b744ce9f8e9374361493884</td>\n",
              "      <td>2018-07-31 10:10:09</td>\n",
              "      <td>230.00</td>\n",
              "      <td>22.25</td>\n",
              "      <td>14940.0</td>\n",
              "      <td>ibitinga</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>879864dab9bc3047522c92c82e1212b8</td>\n",
              "      <td>4c93744516667ad3b8f1fb645a3116a4</td>\n",
              "      <td>89254</td>\n",
              "      <td>jaragua do sul</td>\n",
              "      <td>SC</td>\n",
              "      <td>5741ea1f91b5fbab2bd2dc653a5b5099</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-09-14 18:14:31</td>\n",
              "      <td>2017-09-14 18:25:11</td>\n",
              "      <td>2017-09-18 21:27:40</td>\n",
              "      <td>...</td>\n",
              "      <td>15.0</td>\n",
              "      <td>sports_leisure</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8f2ce03f928b567e3d56181ae20ae952</td>\n",
              "      <td>2017-09-20 18:25:11</td>\n",
              "      <td>259.90</td>\n",
              "      <td>22.31</td>\n",
              "      <td>5141.0</td>\n",
              "      <td>pirituba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>fd826e7cf63160e536e0908c76c3f441</td>\n",
              "      <td>addec96d2e059c80c30fe6871d30d177</td>\n",
              "      <td>4534</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>36e694cf4cbc2a4803200c35e84abdc4</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-19 14:38:35</td>\n",
              "      <td>2018-02-19 14:50:37</td>\n",
              "      <td>2018-02-20 00:03:39</td>\n",
              "      <td>...</td>\n",
              "      <td>13.0</td>\n",
              "      <td>computers_accessories</td>\n",
              "      <td>1.0</td>\n",
              "      <td>9f505651f4a6abe901a56cdc21508025</td>\n",
              "      <td>2018-02-23 14:50:37</td>\n",
              "      <td>14.99</td>\n",
              "      <td>7.78</td>\n",
              "      <td>4102.0</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5e274e7a0c3809e14aba7ad5aae0d407</td>\n",
              "      <td>57b2a98a409812fe9618067b6b8ebe4f</td>\n",
              "      <td>35182</td>\n",
              "      <td>timoteo</td>\n",
              "      <td>MG</td>\n",
              "      <td>1093c8304c7a003280dd34598194913d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-16 19:29:02</td>\n",
              "      <td>2017-11-16 19:55:41</td>\n",
              "      <td>2017-11-22 16:46:33</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>5adf08e34b2e993982a47070956c5c65</td>\n",
              "      <td>1175e95fb47ddff9de6b2b06188f7e0d</td>\n",
              "      <td>81560</td>\n",
              "      <td>curitiba</td>\n",
              "      <td>PR</td>\n",
              "      <td>1ebeea841c590e86a14a0d7a48e7d062</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-18 12:35:44</td>\n",
              "      <td>2018-01-18 12:56:32</td>\n",
              "      <td>2018-01-18 23:25:35</td>\n",
              "      <td>...</td>\n",
              "      <td>12.0</td>\n",
              "      <td>toys</td>\n",
              "      <td>1.0</td>\n",
              "      <td>95e03ca3d4146e4011985981aeb959b9</td>\n",
              "      <td>2018-01-30 12:56:32</td>\n",
              "      <td>25.00</td>\n",
              "      <td>14.10</td>\n",
              "      <td>21210.0</td>\n",
              "      <td>rio de janeiro</td>\n",
              "      <td>RJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>4b7139f34592b3a31687243a302fa75b</td>\n",
              "      <td>9afe194fb833f79e300e37e580171f22</td>\n",
              "      <td>30575</td>\n",
              "      <td>belo horizonte</td>\n",
              "      <td>MG</td>\n",
              "      <td>7433cbcc783205509d66a5260da5b574</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-08 11:22:34</td>\n",
              "      <td>2018-01-08 11:35:27</td>\n",
              "      <td>2018-01-11 01:00:40</td>\n",
              "      <td>...</td>\n",
              "      <td>30.0</td>\n",
              "      <td>furniture_decor</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0241d4d5d36f10f80c644447315af0bd</td>\n",
              "      <td>2018-01-12 11:35:27</td>\n",
              "      <td>99.90</td>\n",
              "      <td>22.57</td>\n",
              "      <td>80330.0</td>\n",
              "      <td>curitiba</td>\n",
              "      <td>PR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>9fb35e4ed6f0a14a4977cd9aea4042bb</td>\n",
              "      <td>2a7745e1ed516b289ed9b29c7d0539a5</td>\n",
              "      <td>39400</td>\n",
              "      <td>montes claros</td>\n",
              "      <td>MG</td>\n",
              "      <td>8428e578bb1cf839ae26a6b7615502b9</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-27 17:23:20</td>\n",
              "      <td>2017-11-27 18:01:20</td>\n",
              "      <td>2017-11-28 23:04:41</td>\n",
              "      <td>...</td>\n",
              "      <td>27.0</td>\n",
              "      <td>auto</td>\n",
              "      <td>1.0</td>\n",
              "      <td>b6e1504972665f739dec4facb9943775</td>\n",
              "      <td>2017-12-01 18:01:20</td>\n",
              "      <td>25.30</td>\n",
              "      <td>15.10</td>\n",
              "      <td>13405.0</td>\n",
              "      <td>piracicaba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>5aa9e4fdd4dfd20959cad2d772509598</td>\n",
              "      <td>2a46fb94aef5cbeeb850418118cee090</td>\n",
              "      <td>20231</td>\n",
              "      <td>rio de janeiro</td>\n",
              "      <td>RJ</td>\n",
              "      <td>f86c5ed7048ac10eb88ec21c00f71892</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-07 11:36:42</td>\n",
              "      <td>2018-02-07 11:55:28</td>\n",
              "      <td>2018-02-08 17:46:32</td>\n",
              "      <td>...</td>\n",
              "      <td>18.0</td>\n",
              "      <td>computers_accessories</td>\n",
              "      <td>1.0</td>\n",
              "      <td>ec8879960bd2221d5c32f8e12f7da711</td>\n",
              "      <td>2018-02-14 11:55:28</td>\n",
              "      <td>129.90</td>\n",
              "      <td>23.23</td>\n",
              "      <td>13253.0</td>\n",
              "      <td>itatiba</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>b2d1536598b73a9abd18e0d75d92f0a3</td>\n",
              "      <td>918dc87cd72cd9f6ed4bd442ed785235</td>\n",
              "      <td>18682</td>\n",
              "      <td>lencois paulista</td>\n",
              "      <td>SP</td>\n",
              "      <td>83d8f70418eefd96f37b483dff430305</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-09-09 09:54:57</td>\n",
              "      <td>2017-09-09 10:10:17</td>\n",
              "      <td>2017-09-12 12:42:43</td>\n",
              "      <td>...</td>\n",
              "      <td>20.0</td>\n",
              "      <td>air_conditioning</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7a241947449cc45dbfda4f9d0798d9d0</td>\n",
              "      <td>2017-09-14 10:10:17</td>\n",
              "      <td>99.00</td>\n",
              "      <td>18.31</td>\n",
              "      <td>37590.0</td>\n",
              "      <td>jacutinga</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>eabebad39a88bb6f5b52376faec28612</td>\n",
              "      <td>295c05e81917928d76245e842748184d</td>\n",
              "      <td>5704</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>852d2f4d37773bcbc21c8e09a05a4ea5</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-03-07 15:57:14</td>\n",
              "      <td>2018-03-07 16:15:30</td>\n",
              "      <td>2018-03-12 23:02:49</td>\n",
              "      <td>...</td>\n",
              "      <td>12.0</td>\n",
              "      <td>telephony</td>\n",
              "      <td>1.0</td>\n",
              "      <td>ea8482cd71df3c1969d7b9473ff13abc</td>\n",
              "      <td>2018-03-13 16:15:30</td>\n",
              "      <td>27.99</td>\n",
              "      <td>8.40</td>\n",
              "      <td>4160.0</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1f1c7bf1c9b041b292af6c1c4470b753</td>\n",
              "      <td>3151a81801c8386361b62277d7fa5ecf</td>\n",
              "      <td>95110</td>\n",
              "      <td>caxias do sul</td>\n",
              "      <td>RS</td>\n",
              "      <td>6c949e670b5d33dc8fb8ad25b6da4860</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-04-01 18:59:31</td>\n",
              "      <td>2018-04-02 17:55:19</td>\n",
              "      <td>2018-04-03 19:33:13</td>\n",
              "      <td>...</td>\n",
              "      <td>15.0</td>\n",
              "      <td>health_beauty</td>\n",
              "      <td>1.0</td>\n",
              "      <td>b2ac621f0d0322434d04a12b078b9369</td>\n",
              "      <td>2018-04-06 17:55:19</td>\n",
              "      <td>84.00</td>\n",
              "      <td>18.47</td>\n",
              "      <td>80220.0</td>\n",
              "      <td>curitiba</td>\n",
              "      <td>PR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>206f3129c0e4d7d0b9550426023f0a08</td>\n",
              "      <td>21f748a16f4e1688a9014eb3ee6fa325</td>\n",
              "      <td>13412</td>\n",
              "      <td>piracicaba</td>\n",
              "      <td>SP</td>\n",
              "      <td>eac76692452422620996fe5e1a7f8bb0</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-29 20:32:08</td>\n",
              "      <td>2018-01-29 21:13:27</td>\n",
              "      <td>2018-02-03 00:09:40</td>\n",
              "      <td>...</td>\n",
              "      <td>33.0</td>\n",
              "      <td>garden_tools</td>\n",
              "      <td>1.0</td>\n",
              "      <td>001cca7ae9ae17fb1caed9dfb1094831</td>\n",
              "      <td>2018-02-02 21:13:27</td>\n",
              "      <td>129.00</td>\n",
              "      <td>40.23</td>\n",
              "      <td>29156.0</td>\n",
              "      <td>cariacica</td>\n",
              "      <td>ES</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>a7c125a0a07b75146167b7f04a7f8e98</td>\n",
              "      <td>5c2991dbd08bbf3cf410713c4de5a0b5</td>\n",
              "      <td>22750</td>\n",
              "      <td>rio de janeiro</td>\n",
              "      <td>RJ</td>\n",
              "      <td>72bab69c50432c6f94d8b50a5f84b69a</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-13 23:45:05</td>\n",
              "      <td>2018-08-13 23:55:13</td>\n",
              "      <td>2018-08-15 12:11:00</td>\n",
              "      <td>...</td>\n",
              "      <td>31.0</td>\n",
              "      <td>auto</td>\n",
              "      <td>1.0</td>\n",
              "      <td>f27e33c6d29b5138fa9967bcd445b6d5</td>\n",
              "      <td>2018-08-19 23:55:13</td>\n",
              "      <td>119.90</td>\n",
              "      <td>17.03</td>\n",
              "      <td>4273.0</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>c5c61596a3b6bd0cee5766992c48a9a1</td>\n",
              "      <td>b6e99561fe6f34a55b0b7da92f8ed775</td>\n",
              "      <td>7124</td>\n",
              "      <td>guarulhos</td>\n",
              "      <td>SP</td>\n",
              "      <td>ec28553b12bef4b538e5d7454464a1c6</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-06-18 13:34:21</td>\n",
              "      <td>2018-06-18 13:55:47</td>\n",
              "      <td>2018-06-19 15:07:00</td>\n",
              "      <td>...</td>\n",
              "      <td>20.0</td>\n",
              "      <td>pet_shop</td>\n",
              "      <td>1.0</td>\n",
              "      <td>e9779976487b77c6d4ac45f75ec7afe9</td>\n",
              "      <td>2018-06-22 13:55:47</td>\n",
              "      <td>7.09</td>\n",
              "      <td>9.44</td>\n",
              "      <td>11701.0</td>\n",
              "      <td>praia grande</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>9b8ce803689b3562defaad4613ef426f</td>\n",
              "      <td>7f3a72e8f988c6e735ba118d54f47458</td>\n",
              "      <td>5416</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>17825f24877a9289214c301ae0c9424b</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-05-11 13:48:47</td>\n",
              "      <td>2017-05-13 11:55:16</td>\n",
              "      <td>2017-05-15 15:30:02</td>\n",
              "      <td>...</td>\n",
              "      <td>40.0</td>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4a3ca9315b744ce9f8e9374361493884</td>\n",
              "      <td>2017-05-19 11:55:16</td>\n",
              "      <td>89.90</td>\n",
              "      <td>12.13</td>\n",
              "      <td>14940.0</td>\n",
              "      <td>ibitinga</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>9b8ce803689b3562defaad4613ef426f</td>\n",
              "      <td>7f3a72e8f988c6e735ba118d54f47458</td>\n",
              "      <td>5416</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>17825f24877a9289214c301ae0c9424b</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-05-11 13:48:47</td>\n",
              "      <td>2017-05-13 11:55:16</td>\n",
              "      <td>2017-05-15 15:30:02</td>\n",
              "      <td>...</td>\n",
              "      <td>40.0</td>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4a3ca9315b744ce9f8e9374361493884</td>\n",
              "      <td>2017-05-19 11:55:16</td>\n",
              "      <td>89.90</td>\n",
              "      <td>12.13</td>\n",
              "      <td>14940.0</td>\n",
              "      <td>ibitinga</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20 rows × 40 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08157fc2-62fa-450b-acda-cae8f145ce26')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-08157fc2-62fa-450b-acda-cae8f145ce26 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-08157fc2-62fa-450b-acda-cae8f145ce26');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7beea4d9-fcb9-486d-ac78-04e74e562aed\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7beea4d9-fcb9-486d-ac78-04e74e562aed')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7beea4d9-fcb9-486d-ac78-04e74e562aed button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                         customer_id                customer_unique_id  \\\n",
              "0   06b8999e2fba1a1fbc88172c00ba8bc7  861eff4711a542e4b93843c6dd7febb0   \n",
              "1   18955e83d337fd6b2def6b18a428ac77  290c77bc529b7ac935b93aa66c333dc3   \n",
              "2   4e7b3e00288586ebd08712fdd0374a03  060e732b5b29e8181a18229c7b0b2b5e   \n",
              "3   b2b6027bc5c5109e529d4dc6358b12c3  259dac757896d24d7702b9acbbff3f3c   \n",
              "4   4f2d8ab171c80ec8364f7c12e35b23ad  345ecd01c38d18a9036ed96c73b8d066   \n",
              "5   879864dab9bc3047522c92c82e1212b8  4c93744516667ad3b8f1fb645a3116a4   \n",
              "6   fd826e7cf63160e536e0908c76c3f441  addec96d2e059c80c30fe6871d30d177   \n",
              "7   5e274e7a0c3809e14aba7ad5aae0d407  57b2a98a409812fe9618067b6b8ebe4f   \n",
              "8   5adf08e34b2e993982a47070956c5c65  1175e95fb47ddff9de6b2b06188f7e0d   \n",
              "9   4b7139f34592b3a31687243a302fa75b  9afe194fb833f79e300e37e580171f22   \n",
              "10  9fb35e4ed6f0a14a4977cd9aea4042bb  2a7745e1ed516b289ed9b29c7d0539a5   \n",
              "11  5aa9e4fdd4dfd20959cad2d772509598  2a46fb94aef5cbeeb850418118cee090   \n",
              "12  b2d1536598b73a9abd18e0d75d92f0a3  918dc87cd72cd9f6ed4bd442ed785235   \n",
              "13  eabebad39a88bb6f5b52376faec28612  295c05e81917928d76245e842748184d   \n",
              "14  1f1c7bf1c9b041b292af6c1c4470b753  3151a81801c8386361b62277d7fa5ecf   \n",
              "15  206f3129c0e4d7d0b9550426023f0a08  21f748a16f4e1688a9014eb3ee6fa325   \n",
              "16  a7c125a0a07b75146167b7f04a7f8e98  5c2991dbd08bbf3cf410713c4de5a0b5   \n",
              "17  c5c61596a3b6bd0cee5766992c48a9a1  b6e99561fe6f34a55b0b7da92f8ed775   \n",
              "18  9b8ce803689b3562defaad4613ef426f  7f3a72e8f988c6e735ba118d54f47458   \n",
              "19  9b8ce803689b3562defaad4613ef426f  7f3a72e8f988c6e735ba118d54f47458   \n",
              "\n",
              "    customer_zip_code_prefix          customer_city customer_state  \\\n",
              "0                      14409                 franca             SP   \n",
              "1                       9790  sao bernardo do campo             SP   \n",
              "2                       1151              sao paulo             SP   \n",
              "3                       8775        mogi das cruzes             SP   \n",
              "4                      13056               campinas             SP   \n",
              "5                      89254         jaragua do sul             SC   \n",
              "6                       4534              sao paulo             SP   \n",
              "7                      35182                timoteo             MG   \n",
              "8                      81560               curitiba             PR   \n",
              "9                      30575         belo horizonte             MG   \n",
              "10                     39400          montes claros             MG   \n",
              "11                     20231         rio de janeiro             RJ   \n",
              "12                     18682       lencois paulista             SP   \n",
              "13                      5704              sao paulo             SP   \n",
              "14                     95110          caxias do sul             RS   \n",
              "15                     13412             piracicaba             SP   \n",
              "16                     22750         rio de janeiro             RJ   \n",
              "17                      7124              guarulhos             SP   \n",
              "18                      5416              sao paulo             SP   \n",
              "19                      5416              sao paulo             SP   \n",
              "\n",
              "                            order_id order_status order_purchase_timestamp  \\\n",
              "0   00e7ee1b050b8499577073aeb2a297a1    delivered      2017-05-16 15:05:35   \n",
              "1   29150127e6685892b6eab3eec79f59c7    delivered      2018-01-12 20:48:24   \n",
              "2   b2059ed67ce144a36e2aa97d2c9e9ad2    delivered      2018-05-19 16:07:45   \n",
              "3   951670f92359f4fe4a63112aa7306eba    delivered      2018-03-13 16:06:38   \n",
              "4   6b7d50bd145f6fc7f33cebabd7e49d0f    delivered      2018-07-29 09:51:30   \n",
              "5   5741ea1f91b5fbab2bd2dc653a5b5099    delivered      2017-09-14 18:14:31   \n",
              "6   36e694cf4cbc2a4803200c35e84abdc4    delivered      2018-02-19 14:38:35   \n",
              "7   1093c8304c7a003280dd34598194913d    delivered      2017-11-16 19:29:02   \n",
              "8   1ebeea841c590e86a14a0d7a48e7d062    delivered      2018-01-18 12:35:44   \n",
              "9   7433cbcc783205509d66a5260da5b574    delivered      2018-01-08 11:22:34   \n",
              "10  8428e578bb1cf839ae26a6b7615502b9    delivered      2017-11-27 17:23:20   \n",
              "11  f86c5ed7048ac10eb88ec21c00f71892    delivered      2018-02-07 11:36:42   \n",
              "12  83d8f70418eefd96f37b483dff430305    delivered      2017-09-09 09:54:57   \n",
              "13  852d2f4d37773bcbc21c8e09a05a4ea5    delivered      2018-03-07 15:57:14   \n",
              "14  6c949e670b5d33dc8fb8ad25b6da4860    delivered      2018-04-01 18:59:31   \n",
              "15  eac76692452422620996fe5e1a7f8bb0    delivered      2018-01-29 20:32:08   \n",
              "16  72bab69c50432c6f94d8b50a5f84b69a    delivered      2018-08-13 23:45:05   \n",
              "17  ec28553b12bef4b538e5d7454464a1c6    delivered      2018-06-18 13:34:21   \n",
              "18  17825f24877a9289214c301ae0c9424b    delivered      2017-05-11 13:48:47   \n",
              "19  17825f24877a9289214c301ae0c9424b    delivered      2017-05-11 13:48:47   \n",
              "\n",
              "     order_approved_at order_delivered_carrier_date  ... product_width_cm  \\\n",
              "0  2017-05-16 15:22:12          2017-05-23 10:47:57  ...             31.0   \n",
              "1  2018-01-12 20:58:32          2018-01-15 17:14:59  ...             40.0   \n",
              "2  2018-05-20 16:19:10          2018-06-11 14:31:00  ...             17.0   \n",
              "3  2018-03-13 17:29:19          2018-03-27 23:22:42  ...             28.0   \n",
              "4  2018-07-29 10:10:09          2018-07-30 15:16:00  ...             35.0   \n",
              "5  2017-09-14 18:25:11          2017-09-18 21:27:40  ...             15.0   \n",
              "6  2018-02-19 14:50:37          2018-02-20 00:03:39  ...             13.0   \n",
              "7  2017-11-16 19:55:41          2017-11-22 16:46:33  ...              NaN   \n",
              "8  2018-01-18 12:56:32          2018-01-18 23:25:35  ...             12.0   \n",
              "9  2018-01-08 11:35:27          2018-01-11 01:00:40  ...             30.0   \n",
              "10 2017-11-27 18:01:20          2017-11-28 23:04:41  ...             27.0   \n",
              "11 2018-02-07 11:55:28          2018-02-08 17:46:32  ...             18.0   \n",
              "12 2017-09-09 10:10:17          2017-09-12 12:42:43  ...             20.0   \n",
              "13 2018-03-07 16:15:30          2018-03-12 23:02:49  ...             12.0   \n",
              "14 2018-04-02 17:55:19          2018-04-03 19:33:13  ...             15.0   \n",
              "15 2018-01-29 21:13:27          2018-02-03 00:09:40  ...             33.0   \n",
              "16 2018-08-13 23:55:13          2018-08-15 12:11:00  ...             31.0   \n",
              "17 2018-06-18 13:55:47          2018-06-19 15:07:00  ...             20.0   \n",
              "18 2017-05-13 11:55:16          2017-05-15 15:30:02  ...             40.0   \n",
              "19 2017-05-13 11:55:16          2017-05-15 15:30:02  ...             40.0   \n",
              "\n",
              "   product_category_name_english order_item_id  \\\n",
              "0               office_furniture           1.0   \n",
              "1                     housewares           1.0   \n",
              "2               office_furniture           1.0   \n",
              "3               office_furniture           1.0   \n",
              "4                   home_confort           1.0   \n",
              "5                 sports_leisure           1.0   \n",
              "6          computers_accessories           1.0   \n",
              "7                            NaN           NaN   \n",
              "8                           toys           1.0   \n",
              "9                furniture_decor           1.0   \n",
              "10                          auto           1.0   \n",
              "11         computers_accessories           1.0   \n",
              "12              air_conditioning           1.0   \n",
              "13                     telephony           1.0   \n",
              "14                 health_beauty           1.0   \n",
              "15                  garden_tools           1.0   \n",
              "16                          auto           1.0   \n",
              "17                      pet_shop           1.0   \n",
              "18                bed_bath_table           1.0   \n",
              "19                bed_bath_table           1.0   \n",
              "\n",
              "                           seller_id shipping_limit_date   price  \\\n",
              "0   7c67e1448b00f6e969d365cea6b010ab 2017-05-22 15:22:12  124.99   \n",
              "1   b8bc237ba3788b23da09c0f1f3a3288c 2018-01-18 20:58:32  289.00   \n",
              "2   7c67e1448b00f6e969d365cea6b010ab 2018-06-05 16:19:10  139.94   \n",
              "3   7c67e1448b00f6e969d365cea6b010ab 2018-03-27 16:31:16  149.94   \n",
              "4   4a3ca9315b744ce9f8e9374361493884 2018-07-31 10:10:09  230.00   \n",
              "5   8f2ce03f928b567e3d56181ae20ae952 2017-09-20 18:25:11  259.90   \n",
              "6   9f505651f4a6abe901a56cdc21508025 2018-02-23 14:50:37   14.99   \n",
              "7                                NaN                 NaT     NaN   \n",
              "8   95e03ca3d4146e4011985981aeb959b9 2018-01-30 12:56:32   25.00   \n",
              "9   0241d4d5d36f10f80c644447315af0bd 2018-01-12 11:35:27   99.90   \n",
              "10  b6e1504972665f739dec4facb9943775 2017-12-01 18:01:20   25.30   \n",
              "11  ec8879960bd2221d5c32f8e12f7da711 2018-02-14 11:55:28  129.90   \n",
              "12  7a241947449cc45dbfda4f9d0798d9d0 2017-09-14 10:10:17   99.00   \n",
              "13  ea8482cd71df3c1969d7b9473ff13abc 2018-03-13 16:15:30   27.99   \n",
              "14  b2ac621f0d0322434d04a12b078b9369 2018-04-06 17:55:19   84.00   \n",
              "15  001cca7ae9ae17fb1caed9dfb1094831 2018-02-02 21:13:27  129.00   \n",
              "16  f27e33c6d29b5138fa9967bcd445b6d5 2018-08-19 23:55:13  119.90   \n",
              "17  e9779976487b77c6d4ac45f75ec7afe9 2018-06-22 13:55:47    7.09   \n",
              "18  4a3ca9315b744ce9f8e9374361493884 2017-05-19 11:55:16   89.90   \n",
              "19  4a3ca9315b744ce9f8e9374361493884 2017-05-19 11:55:16   89.90   \n",
              "\n",
              "    freight_value seller_zip_code_prefix      seller_city seller_state  \n",
              "0           21.88                 8577.0  itaquaquecetuba           SP  \n",
              "1           46.48                88303.0           itajai           SC  \n",
              "2           17.79                 8577.0  itaquaquecetuba           SP  \n",
              "3           23.36                 8577.0  itaquaquecetuba           SP  \n",
              "4           22.25                14940.0         ibitinga           SP  \n",
              "5           22.31                 5141.0         pirituba           SP  \n",
              "6            7.78                 4102.0        sao paulo           SP  \n",
              "7             NaN                    NaN              NaN          NaN  \n",
              "8           14.10                21210.0   rio de janeiro           RJ  \n",
              "9           22.57                80330.0         curitiba           PR  \n",
              "10          15.10                13405.0       piracicaba           SP  \n",
              "11          23.23                13253.0          itatiba           SP  \n",
              "12          18.31                37590.0        jacutinga           MG  \n",
              "13           8.40                 4160.0        sao paulo           SP  \n",
              "14          18.47                80220.0         curitiba           PR  \n",
              "15          40.23                29156.0        cariacica           ES  \n",
              "16          17.03                 4273.0        sao paulo           SP  \n",
              "17           9.44                11701.0     praia grande           SP  \n",
              "18          12.13                14940.0         ibitinga           SP  \n",
              "19          12.13                14940.0         ibitinga           SP  \n",
              "\n",
              "[20 rows x 40 columns]"
            ]
          },
          "execution_count": 58,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "all_data = pd.merge(\n",
        "    left=cust_df,\n",
        "    right=sellers_df,\n",
        "    how=\"left\",\n",
        "    left_on=\"order_id\",\n",
        "    right_on=\"order_id\"\n",
        ")\n",
        "all_data.head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fsNPZNiKOwVi",
        "outputId": "c65260dc-05d1-47f2-c809-e9d5827738e8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 118467 entries, 0 to 118466\n",
            "Data columns (total 40 columns):\n",
            " #   Column                         Non-Null Count   Dtype         \n",
            "---  ------                         --------------   -----         \n",
            " 0   customer_id                    118467 non-null  object        \n",
            " 1   customer_unique_id             118467 non-null  object        \n",
            " 2   customer_zip_code_prefix       118467 non-null  int64         \n",
            " 3   customer_city                  118467 non-null  object        \n",
            " 4   customer_state                 118467 non-null  object        \n",
            " 5   order_id                       115481 non-null  object        \n",
            " 6   order_status                   115481 non-null  object        \n",
            " 7   order_purchase_timestamp       115481 non-null  datetime64[ns]\n",
            " 8   order_approved_at              115481 non-null  datetime64[ns]\n",
            " 9   order_delivered_carrier_date   115481 non-null  datetime64[ns]\n",
            " 10  order_delivered_customer_date  115481 non-null  datetime64[ns]\n",
            " 11  order_estimated_delivery_date  115481 non-null  datetime64[ns]\n",
            " 12  delivered_on_time              115481 non-null  object        \n",
            " 13  payment_sequential             115478 non-null  float64       \n",
            " 14  payment_type                   115478 non-null  object        \n",
            " 15  payment_installments           115478 non-null  float64       \n",
            " 16  payment_value                  115478 non-null  float64       \n",
            " 17  review_id                      114621 non-null  object        \n",
            " 18  review_score                   114621 non-null  float64       \n",
            " 19  review_comment_message         114621 non-null  object        \n",
            " 20  review_creation_date           114621 non-null  datetime64[ns]\n",
            " 21  review_answer_timestamp        114621 non-null  object        \n",
            " 22  product_id                     114061 non-null  object        \n",
            " 23  product_category_name          114061 non-null  object        \n",
            " 24  product_name_lenght            114061 non-null  float64       \n",
            " 25  product_description_lenght     114061 non-null  float64       \n",
            " 26  product_photos_qty             114061 non-null  float64       \n",
            " 27  product_weight_g               114061 non-null  float64       \n",
            " 28  product_length_cm              114061 non-null  float64       \n",
            " 29  product_height_cm              114061 non-null  float64       \n",
            " 30  product_width_cm               114061 non-null  float64       \n",
            " 31  product_category_name_english  114038 non-null  object        \n",
            " 32  order_item_id                  114061 non-null  float64       \n",
            " 33  seller_id                      114061 non-null  object        \n",
            " 34  shipping_limit_date            114061 non-null  datetime64[ns]\n",
            " 35  price                          114061 non-null  float64       \n",
            " 36  freight_value                  114061 non-null  float64       \n",
            " 37  seller_zip_code_prefix         114061 non-null  float64       \n",
            " 38  seller_city                    114061 non-null  object        \n",
            " 39  seller_state                   114061 non-null  object        \n",
            "dtypes: datetime64[ns](7), float64(15), int64(1), object(17)\n",
            "memory usage: 37.1+ MB\n"
          ]
        }
      ],
      "source": [
        "all_data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6SiSDVHVOYfh",
        "outputId": "02b999d4-45bb-4f7f-e793-5b0064d0a502"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "execution_count": 60,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Menghilangkan duplikat\n",
        "all_data.drop_duplicates(inplace=True)\n",
        "all_data.duplicated().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        },
        "id": "McKb80hhPDWb",
        "outputId": "2972ed57-1a13-470c-ca5b-ec0f4a6e9b77"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"})\",\n  \"rows\": 27,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8019,\n        \"min\": 41,\n        \"max\": 40488,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2080,\n          886,\n          1995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1491049.7254489122,\n        \"min\": 11300.880000000001,\n        \"max\": 7434677.68,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          424613.99,\n          251859.09,\n          399201.58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-74f084ad-2696-4283-a239-cdaae063c95e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>payment_value</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>customer_state</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>SP</th>\n",
              "      <td>40488</td>\n",
              "      <td>7434677.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RJ</th>\n",
              "      <td>12348</td>\n",
              "      <td>2694177.84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MG</th>\n",
              "      <td>11351</td>\n",
              "      <td>2287776.67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RS</th>\n",
              "      <td>5342</td>\n",
              "      <td>1108280.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PR</th>\n",
              "      <td>4923</td>\n",
              "      <td>1034601.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BA</th>\n",
              "      <td>3256</td>\n",
              "      <td>772423.42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SC</th>\n",
              "      <td>3546</td>\n",
              "      <td>768405.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GO</th>\n",
              "      <td>1957</td>\n",
              "      <td>496426.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DF</th>\n",
              "      <td>2080</td>\n",
              "      <td>424613.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ES</th>\n",
              "      <td>1995</td>\n",
              "      <td>399201.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PE</th>\n",
              "      <td>1593</td>\n",
              "      <td>361363.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CE</th>\n",
              "      <td>1278</td>\n",
              "      <td>332168.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PA</th>\n",
              "      <td>946</td>\n",
              "      <td>255327.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MT</th>\n",
              "      <td>886</td>\n",
              "      <td>251859.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MA</th>\n",
              "      <td>716</td>\n",
              "      <td>195191.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PB</th>\n",
              "      <td>517</td>\n",
              "      <td>177320.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MS</th>\n",
              "      <td>701</td>\n",
              "      <td>164556.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PI</th>\n",
              "      <td>476</td>\n",
              "      <td>133729.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RN</th>\n",
              "      <td>474</td>\n",
              "      <td>115203.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AL</th>\n",
              "      <td>397</td>\n",
              "      <td>108727.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SE</th>\n",
              "      <td>335</td>\n",
              "      <td>85694.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TO</th>\n",
              "      <td>274</td>\n",
              "      <td>70780.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RO</th>\n",
              "      <td>243</td>\n",
              "      <td>65096.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AM</th>\n",
              "      <td>145</td>\n",
              "      <td>33947.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AC</th>\n",
              "      <td>80</td>\n",
              "      <td>24890.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AP</th>\n",
              "      <td>67</td>\n",
              "      <td>21521.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RR</th>\n",
              "      <td>41</td>\n",
              "      <td>11300.88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74f084ad-2696-4283-a239-cdaae063c95e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74f084ad-2696-4283-a239-cdaae063c95e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74f084ad-2696-4283-a239-cdaae063c95e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-17f13442-80c2-4056-a1e4-e5571c2943de\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17f13442-80c2-4056-a1e4-e5571c2943de')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-17f13442-80c2-4056-a1e4-e5571c2943de button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                order_id  payment_value\n",
              "customer_state                         \n",
              "SP                 40488     7434677.68\n",
              "RJ                 12348     2694177.84\n",
              "MG                 11351     2287776.67\n",
              "RS                  5342     1108280.99\n",
              "PR                  4923     1034601.30\n",
              "BA                  3256      772423.42\n",
              "SC                  3546      768405.87\n",
              "GO                  1957      496426.61\n",
              "DF                  2080      424613.99\n",
              "ES                  1995      399201.58\n",
              "PE                  1593      361363.59\n",
              "CE                  1278      332168.11\n",
              "PA                   946      255327.31\n",
              "MT                   886      251859.09\n",
              "MA                   716      195191.60\n",
              "PB                   517      177320.00\n",
              "MS                   701      164556.97\n",
              "PI                   476      133729.03\n",
              "RN                   474      115203.08\n",
              "AL                   397      108727.76\n",
              "SE                   335       85694.32\n",
              "TO                   274       70780.74\n",
              "RO                   243       65096.98\n",
              "AM                   145       33947.52\n",
              "AC                    80       24890.49\n",
              "AP                    67       21521.71\n",
              "RR                    41       11300.88"
            ]
          },
          "execution_count": 61,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat total pembelian berdasarkan state\n",
        "all_data.groupby(by=\"customer_state\").agg({\n",
        "    \"order_id\": \"nunique\",\n",
        "    \"payment_value\": \"sum\"\n",
        "}).sort_values(by=\"payment_value\", ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "d2E_-8JYPZjC",
        "outputId": "1f6a7c99-8eda-4d5b-f93a-e48e8ef52f41"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"})\",\n  \"rows\": 71,\n  \"fields\": [\n    {\n      \"column\": [\n        \"order_id\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2224,\n        \"min\": 2,\n        \"max\": 9271,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          25,\n          177,\n          483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"review_score\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5277033493826793,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          3.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"review_score\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11867816581938531,\n        \"min\": 4.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-d921158a-2545-4d8a-a1dd-69f8efef4436\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th colspan=\"2\" halign=\"left\">review_score</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>nunique</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>product_category_name_english</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>agro_industry_and_commerce</th>\n",
              "      <td>177</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>air_conditioning</th>\n",
              "      <td>246</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>art</th>\n",
              "      <td>195</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arts_and_craftmanship</th>\n",
              "      <td>23</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>audio</th>\n",
              "      <td>348</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stationery</th>\n",
              "      <td>2264</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tablets_printing_image</th>\n",
              "      <td>79</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>telephony</th>\n",
              "      <td>4092</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>toys</th>\n",
              "      <td>3803</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>watches_gifts</th>\n",
              "      <td>5493</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>71 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d921158a-2545-4d8a-a1dd-69f8efef4436')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d921158a-2545-4d8a-a1dd-69f8efef4436 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d921158a-2545-4d8a-a1dd-69f8efef4436');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1247bdd4-6226-47d5-b752-c2b7f6616ebe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1247bdd4-6226-47d5-b752-c2b7f6616ebe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1247bdd4-6226-47d5-b752-c2b7f6616ebe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                              order_id review_score     \n",
              "                               nunique          min  max\n",
              "product_category_name_english                           \n",
              "agro_industry_and_commerce         177          1.0  5.0\n",
              "air_conditioning                   246          1.0  5.0\n",
              "art                                195          1.0  5.0\n",
              "arts_and_craftmanship               23          1.0  5.0\n",
              "audio                              348          1.0  5.0\n",
              "...                                ...          ...  ...\n",
              "stationery                        2264          1.0  5.0\n",
              "tablets_printing_image              79          1.0  5.0\n",
              "telephony                         4092          1.0  5.0\n",
              "toys                              3803          1.0  5.0\n",
              "watches_gifts                     5493          1.0  5.0\n",
              "\n",
              "[71 rows x 3 columns]"
            ]
          },
          "execution_count": 62,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Melihat data jumlah min dan maks pembelian produk\n",
        "all_data.groupby(by=\"product_category_name_english\").agg({\n",
        "    \"order_id\": \"nunique\",\n",
        "    \"review_score\":  [\"min\", \"max\"]\n",
        "})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pHo1MwR3Pp8Y"
      },
      "source": [
        "### Convert all_data ke .csv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "id": "WTiB0ooYPsvO"
      },
      "outputs": [],
      "source": [
        "# Convert all_data ke .csv\n",
        "all_data.to_csv(\"all_data.csv\", index=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zsyZjqak8DC2"
      },
      "source": [
        "## Visualization & Explanatory Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HZxOiQ6n8DC2"
      },
      "source": [
        "### Pertanyaan 1 : Bagaimana performa penjualan dan revenue perusahaan dalam beberapa bulan terakhir?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fWAWfAGiRPPN"
      },
      "source": [
        "Untuk menjawab pertanyaan ini, perlu dibuat DataFrame baru untuk menampung informasi jumlah order dan total revene per bulan. Sehingga frekuensi data yang awalnya harian harus diubah menjadi bulanan. Kemudian, informasi mengenai performa penjualan dan revenue akan divisualisasikan menggunakan line chart."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "1swJUdAD8DC2",
        "outputId": "3e9e0b3b-b543-409d-f3f2-b11bd7d9b006"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"monthly_orders\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"order_date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"July\",\n          \"June\",\n          \"September\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2576,\n        \"min\": 0,\n        \"max\": 7149,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          6991,\n          3828,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 536084.9190695238,\n        \"min\": 0.0,\n        \"max\": 1536858.63,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          1357598.89,\n          710030.63,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "monthly_orders"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-e95068a4-59c8-496b-9d1e-e8ddd6e61a1d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_date</th>\n",
              "      <th>order_count</th>\n",
              "      <th>revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>September</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>October</td>\n",
              "      <td>265</td>\n",
              "      <td>62185.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>November</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>December</td>\n",
              "      <td>1</td>\n",
              "      <td>19.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>January</td>\n",
              "      <td>715</td>\n",
              "      <td>171054.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>February</td>\n",
              "      <td>1638</td>\n",
              "      <td>325381.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>March</td>\n",
              "      <td>2554</td>\n",
              "      <td>505582.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>April</td>\n",
              "      <td>2278</td>\n",
              "      <td>450650.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>May</td>\n",
              "      <td>3547</td>\n",
              "      <td>705181.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>June</td>\n",
              "      <td>3143</td>\n",
              "      <td>594915.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>July</td>\n",
              "      <td>3828</td>\n",
              "      <td>710030.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>August</td>\n",
              "      <td>4217</td>\n",
              "      <td>849996.67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>September</td>\n",
              "      <td>4169</td>\n",
              "      <td>897290.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>October</td>\n",
              "      <td>4441</td>\n",
              "      <td>1096194.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>November</td>\n",
              "      <td>7149</td>\n",
              "      <td>1536858.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>December</td>\n",
              "      <td>5675</td>\n",
              "      <td>1054699.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>January</td>\n",
              "      <td>6991</td>\n",
              "      <td>1357598.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>February</td>\n",
              "      <td>6536</td>\n",
              "      <td>1280434.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>March</td>\n",
              "      <td>7083</td>\n",
              "      <td>1452494.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>April</td>\n",
              "      <td>6639</td>\n",
              "      <td>1443732.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>May</td>\n",
              "      <td>6940</td>\n",
              "      <td>1513867.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>June</td>\n",
              "      <td>6094</td>\n",
              "      <td>1292834.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>July</td>\n",
              "      <td>6047</td>\n",
              "      <td>1281816.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>August</td>\n",
              "      <td>6504</td>\n",
              "      <td>1246443.51</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e95068a4-59c8-496b-9d1e-e8ddd6e61a1d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e95068a4-59c8-496b-9d1e-e8ddd6e61a1d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e95068a4-59c8-496b-9d1e-e8ddd6e61a1d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d5a842a0-325e-4985-a10d-41dc9ee3daf1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d5a842a0-325e-4985-a10d-41dc9ee3daf1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d5a842a0-325e-4985-a10d-41dc9ee3daf1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   order_date  order_count     revenue\n",
              "0   September            1        0.00\n",
              "1     October          265    62185.82\n",
              "2    November            0        0.00\n",
              "3    December            1       19.62\n",
              "4     January          715   171054.49\n",
              "5    February         1638   325381.93\n",
              "6       March         2554   505582.49\n",
              "7       April         2278   450650.20\n",
              "8         May         3547   705181.88\n",
              "9        June         3143   594915.16\n",
              "10       July         3828   710030.63\n",
              "11     August         4217   849996.67\n",
              "12  September         4169   897290.35\n",
              "13    October         4441  1096194.24\n",
              "14   November         7149  1536858.63\n",
              "15   December         5675  1054699.20\n",
              "16    January         6991  1357598.89\n",
              "17   February         6536  1280434.93\n",
              "18      March         7083  1452494.81\n",
              "19      April         6639  1443732.48\n",
              "20        May         6940  1513867.69\n",
              "21       June         6094  1292834.76\n",
              "22       July         6047  1281816.75\n",
              "23     August         6504  1246443.51"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "monthly_orders = all_data.resample(rule='M', on='order_approved_at').agg({\n",
        "    \"order_id\": \"nunique\",\n",
        "    \"payment_value\": \"sum\"\n",
        "})\n",
        "monthly_orders.index = monthly_orders.index.strftime('%B')\n",
        "monthly_orders = monthly_orders.reset_index()\n",
        "monthly_orders.rename(columns={\n",
        "    \"order_approved_at\": \"order_date\",\n",
        "    \"order_id\": \"order_count\",\n",
        "    \"payment_value\": \"revenue\"\n",
        "}, inplace=True)\n",
        "monthly_orders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "id": "99fnXH_ueB27"
      },
      "outputs": [],
      "source": [
        "# Menghapus data duplikasi per bulan dan hanya mengambil data terakhir (2018)\n",
        "monthly_orders = monthly_orders.sort_values(\"order_count\").drop_duplicates(\"order_date\", keep='last')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "2FdQ_C5cbEF8",
        "outputId": "47abf0ae-b82e-4b9c-84f1-7a94992a4686"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"monthly_orders\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"order_date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"October\",\n          \"December\",\n          \"November\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 989,\n        \"min\": 4169,\n        \"max\": 7149,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          4441,\n          5675,\n          7149\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194193.02885949519,\n        \"min\": 897290.35,\n        \"max\": 1536858.63,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1096194.24,\n          1054699.2,\n          1536858.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-1603f048-2561-4904-ac59-757971183528\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_date</th>\n",
              "      <th>order_count</th>\n",
              "      <th>revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>November</td>\n",
              "      <td>7149</td>\n",
              "      <td>1536858.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>March</td>\n",
              "      <td>7083</td>\n",
              "      <td>1452494.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>January</td>\n",
              "      <td>6991</td>\n",
              "      <td>1357598.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>May</td>\n",
              "      <td>6940</td>\n",
              "      <td>1513867.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>April</td>\n",
              "      <td>6639</td>\n",
              "      <td>1443732.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>February</td>\n",
              "      <td>6536</td>\n",
              "      <td>1280434.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>August</td>\n",
              "      <td>6504</td>\n",
              "      <td>1246443.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>June</td>\n",
              "      <td>6094</td>\n",
              "      <td>1292834.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>July</td>\n",
              "      <td>6047</td>\n",
              "      <td>1281816.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>December</td>\n",
              "      <td>5675</td>\n",
              "      <td>1054699.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>October</td>\n",
              "      <td>4441</td>\n",
              "      <td>1096194.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>September</td>\n",
              "      <td>4169</td>\n",
              "      <td>897290.35</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1603f048-2561-4904-ac59-757971183528')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1603f048-2561-4904-ac59-757971183528 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1603f048-2561-4904-ac59-757971183528');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1444838b-c71b-4abb-a68d-8960e223cd35\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1444838b-c71b-4abb-a68d-8960e223cd35')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1444838b-c71b-4abb-a68d-8960e223cd35 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   order_date  order_count     revenue\n",
              "14   November         7149  1536858.63\n",
              "18      March         7083  1452494.81\n",
              "16    January         6991  1357598.89\n",
              "20        May         6940  1513867.69\n",
              "19      April         6639  1443732.48\n",
              "17   February         6536  1280434.93\n",
              "23     August         6504  1246443.51\n",
              "21       June         6094  1292834.76\n",
              "22       July         6047  1281816.75\n",
              "15   December         5675  1054699.20\n",
              "13    October         4441  1096194.24\n",
              "12  September         4169   897290.35"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "monthly_orders.sort_values(by=\"order_count\", ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "_c2PO7BuaYEu",
        "outputId": "1da60776-b78b-47d1-e484-54d45ae0f662"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "months_order = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n",
        "monthly_orders[\"order_date\"] = pd.Categorical(monthly_orders[\"order_date\"], categories=months_order, ordered=True)\n",
        "monthly_orders = monthly_orders.sort_values(\"order_date\")\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.plot(monthly_orders[\"order_date\"], monthly_orders[\"order_count\"], marker=\"o\", linewidth=2, color=\"#72BCD4\")\n",
        "plt.title(\"Jumlah Pesanan per Bulan (2018)\", loc=\"center\", fontsize=14)\n",
        "plt.xlabel(\"Month\", fontsize=12)\n",
        "plt.ylabel(\"Jumlah Pesanan\", fontsize=12)\n",
        "plt.xticks(rotation=45, fontsize=10)\n",
        "plt.yticks(fontsize=10)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3HPwWKUce4pB"
      },
      "source": [
        "Dari grafik tersebut, terlihat bahwa terdapat penurunan signifikan pada bulan September. Kemudian terjadi kenaikan signifikan pada bulan November."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zLQ_EQ3ofMEb"
      },
      "source": [
        "### Pertanyaan 2: Produk Apa yang Paling Banyak dan Paling Sedikit Terjual?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "183A6imufV1k"
      },
      "source": [
        "untuk menjawab pertanyaan ini, akan dibuat DataFrame baru yang berisikan data produk dan kuantitas. Kemudian, informasi jumlah produk terjual akan divisualisasikan menggunakan bar chart."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "I63TVGurTsFr",
        "outputId": "4284c41a-2850-4d86-8212-96e1f5a02e0a"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"sum_order_items\",\n  \"rows\": 71,\n  \"fields\": [\n    {\n      \"column\": \"product_category_name_english\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          \"home_appliances\",\n          \"bed_bath_table\",\n          \"fashion_underwear_beach\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"products\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2687,\n        \"min\": 2,\n        \"max\": 11813,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          809,\n          11813,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "sum_order_items"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-e1f4f16a-91d2-43bc-af8c-5bf39d400fe2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_category_name_english</th>\n",
              "      <th>products</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>11813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>health_beauty</td>\n",
              "      <td>9816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>sports_leisure</td>\n",
              "      <td>8788</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>furniture_decor</td>\n",
              "      <td>8639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>computers_accessories</td>\n",
              "      <td>7962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>arts_and_craftmanship</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>la_cuisine</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>cds_dvds_musicals</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>fashion_childrens_clothes</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>security_and_services</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>71 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e1f4f16a-91d2-43bc-af8c-5bf39d400fe2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e1f4f16a-91d2-43bc-af8c-5bf39d400fe2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e1f4f16a-91d2-43bc-af8c-5bf39d400fe2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0b0f45ae-3971-4b98-a3f5-aaf0d29a11fe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b0f45ae-3971-4b98-a3f5-aaf0d29a11fe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0b0f45ae-3971-4b98-a3f5-aaf0d29a11fe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   product_category_name_english  products\n",
              "7                 bed_bath_table     11813\n",
              "43                 health_beauty      9816\n",
              "65                sports_leisure      8788\n",
              "39               furniture_decor      8639\n",
              "15         computers_accessories      7962\n",
              "..                           ...       ...\n",
              "3          arts_and_craftmanship        24\n",
              "52                    la_cuisine        16\n",
              "11             cds_dvds_musicals        14\n",
              "29     fashion_childrens_clothes         7\n",
              "61         security_and_services         2\n",
              "\n",
              "[71 rows x 2 columns]"
            ]
          },
          "execution_count": 68,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sum_order_items = all_data.groupby(\"product_category_name_english\")[\"product_id\"].count().reset_index()\n",
        "sum_order_items = sum_order_items.rename(columns={\"product_id\": \"products\"})\n",
        "sum_order_items = sum_order_items.sort_values(by=\"products\", ascending=False)\n",
        "sum_order_items"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "Rupxa0ZnT_8b",
        "outputId": "bd5b032b-bc1c-4db7-c3a3-a1fe70237561"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-69-f62eaa63b84f>:5: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=\"products\", y=\"product_category_name_english\", data=sum_order_items.head(5), palette=colors, ax=ax[0])\n",
            "<ipython-input-69-f62eaa63b84f>:11: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=\"products\", y=\"product_category_name_english\", data=sum_order_items.sort_values(by=\"products\", ascending=True).head(5), palette=colors, ax=ax[1])\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 2400x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))\n",
        "\n",
        "colors = [\"#068DA9\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\"]\n",
        "\n",
        "sns.barplot(x=\"products\", y=\"product_category_name_english\", data=sum_order_items.head(5), palette=colors, ax=ax[0])\n",
        "ax[0].set_ylabel(None)\n",
        "ax[0].set_xlabel(None)\n",
        "ax[0].set_title(\"Produk paling banyak terjual\", loc=\"center\", fontsize=18)\n",
        "ax[0].tick_params(axis ='y', labelsize=15)\n",
        "\n",
        "sns.barplot(x=\"products\", y=\"product_category_name_english\", data=sum_order_items.sort_values(by=\"products\", ascending=True).head(5), palette=colors, ax=ax[1])\n",
        "ax[1].set_ylabel(None)\n",
        "ax[1].set_xlabel(None)\n",
        "ax[1].invert_xaxis()\n",
        "ax[1].yaxis.set_label_position(\"right\")\n",
        "ax[1].yaxis.tick_right()\n",
        "ax[1].set_title(\"Produk paling sedikit terjual\", loc=\"center\", fontsize=18)\n",
        "ax[1].tick_params(axis='y', labelsize=15)\n",
        "\n",
        "plt.suptitle(\"Produk paling banyak dan paling sedikit terjual\", fontsize=20)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9cqXdli_hy4m"
      },
      "source": [
        "Terlihat dari grafik di atas, produk yang paling banyak terjual adalah bed_bath_table dan produk yang paling sedikit terjual adalah security_and_services"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DgHI7CiU8DC2"
      },
      "source": [
        "### Pertanyaan 3: Bagaimana Demografi Pelanggan yang Kita Miliki?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HpHxwsesikAf"
      },
      "source": [
        "* Demografi pelanggan berdasarkan kota"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 770
        },
        "id": "Go0lCsvO8DC2",
        "outputId": "569c5698-fbd4-4d64-fec9-de4d21e4ad9f"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-70-5a33b1277b2f>:9: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=bycity.index,\n"
          ]
        },
        {
          "data": {
            "image/png": "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P/1UQ4YM0alTpyRdP13hyJEjiVpYeHi4JClHjhxu03PkyOHMCw8PV0BAgNv8VKlSKUuWLG5t4ltG7Oe4UZuY+fEZM2aMMmXK5NyCgoISuooAAAAAANwVEhQebN26VYULF9Ybb7yht956S2fOnJEkzZw5U0OGDEmK+pKtIUOGKCIiwrkdOnTI2yUBAAAAAJAkEhQe9O/fXx06dNCff/7pDFgoSY0bN9by5csTtbDAwEBJ0rFjx9ymHzt2zJkXGBio48ePu82/evWqTp065dYmvmXEfo4btYmZHx9fX1/5+fm53QAAAAAAuBclKDxYv369nnnmmTjTc+fO7bGL/63Inz+/AgMDtWTJEmdaZGSkfv31VwUHB0uSgoODdebMGW3cuNFps3TpUkVHR6tKlSpOm+XLl+vKlStOm7CwMBUpUkT+/v5Om9jPE9Mm5nkAAAAAALifJSg88PX1jXdgwD/++EPZs2dP8JNHRUVpy5Yt2rJli6TrgyRu2bJFBw8elMvl0nPPPadXXnlFc+bM0e+//6727dsrV65czhUZihUrpoYNG6pr165at26dVq1apd69e6t169bKlSuXJKlt27by8fFR586dtX37dn377beaMGGC2wCJzz77rBYsWKBx48Zp165dGjlypDZs2KDevXsneJ0AAAAAALjXJCg8ePjhhzV69GjnV3yXy6WDBw9q0KBBatGiRYKffMOGDSpXrpzKlSsn6fppEeXKldPw4cMlSQMHDlSfPn3UrVs3VapUSVFRUVqwYIHbKRNfffWVihYtqnr16qlx48aqUaOGJk2a5MzPlCmTFi1apH379qlChQp6/vnnNXz4cHXr1s1pU61aNX399deaNGmSypQpo++//16zZ89WyZIlE7xOAAAAAADca1xmZjfbOCIiQo8//rg2bNigs2fPKleuXAoPD1dwcLDmzZun9OnTJ2WtydrNXl8z96gP72BVd7cjI3p6uwQAAAAASLZu9ntoYkiVkMaZMmVSWFiYVq1apd9++01RUVEqX768QkJCkqo+AAAAAADgZTcdHnz77beaM2eOLl++rHr16qlnT34VBgAAAADgfnBT4cFHH32kXr16qVChQkqbNq1mzpypv/76S2+++WZS1wcAAAAAALzspgZMfP/99zVixAjt3r1bW7Zs0bRp0/Thh5y7DwAAAADA/eCmwoO9e/fq6aef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nLCwsDCLjIz0cnX3h+joaNu3b59VrFjRFixYYGbXX5e0adPa5MmTzczsypUr3izxrhMdHW0RERH24IMPWooUKeyJJ55wm4c745VXXrGsWbPa+vXr7dKlS94uB3fIG2+8YVmyZLGwsDCbP3++ffTRR5YuXTp75plnbmu5hAdIsMOHDzv/v3btmp0+fdoqVapkH330kVu75557zrJmzWpbtmwxMz4oktq1a9fc7n/wwQdWrVo1M3Pf9kOGDLFcuXLZwYMH72h997rY2/j8+fNWtmxZmzNnjv3999+WO3du69q1qzP/u+++c74k4LqZM2datmzZrG7duvbQQw9Z+vTp7YsvvuCLUxLasWOHFStWzNl3X7lyxbJly2Z58uSxevXq2cKFC71c4f1j1qxZlidPHjMz27p1q7344otWsGBBS5UqlYWEhNiZM2e8XOG96d+fm3///beVKVPGzp8/bzNnzrQMGTI4fx/nz5+3r7/+2v766y9vlHrXif2ZuGnTJitdurQVKVLElixZEm8bJI1//vnHQkND7auvvjIzswMHDtiiRYusZcuW9sYbb9ihQ4e8XCGSwuXLl6158+b2yiuvuE1fsGCBpUqVyt57771bXjanLSBBunXrphdeeEG7du2SdL275eXLl3XixAn5+/tLki5evChJevvtt1WkSBGNGzdO0u2fY4Mbs1hdlN5++2399ttv8vf31++//66jR4/K5XI5A6c0bNhQZqYzZ854seK7n/3/Ln/nzp2TdP39/csvv+j3339X2rRpVbx4cW3atEnVq1dX48aN9fHHH0uSTpw4oQULFmj37t0MYvT/rV69Wj169NAbb7yhpUuX6ocfftD58+fVp08fffnllww2mURcLpdatmypp556SocPH1bhwoXVunVrzZo1S5s3b9Zbb72lmTNnervMe47F0124fPnySpUqlUqUKKGQkBAdP35cI0eO1O7du7VkyRItX77cC5Xe+2I+N3v16qU33nhDly5d0unTp/Xiiy+qc+fOeuONN9S9e3dJ0u7du/XFF1/o0KFD3iw52Yt5f8cMinj16lWVK1dOn332mcxM7733njOmh8vlovt8EkufPr2OHDmiefPmadmyZXr22Wc1fPhwXbx4UUOHDtWkSZO8XSKSwNWrV7V9+3adOnXKmXbt2jWFhoaqa9euWrp0qa5cuXJLf3+EB0iQWrVqafXq1Xr33XedACEgIEB58+Z1dkBp0qTR5cuXJUkFChRQ6tSpvVbv/SD2gJWffPKJXn/9dZ0/f17lypVTyZIl9eqrr+rQoUPOQVKOHDnk5+fH4Gi3yeVyKTw8XCVKlNC6des0ffp0hYaG6u+//5Yk1ahRQ6NGjdIDDzygd99913mN3nnnHa1YsUK1a9e+LwcVfeedd/TJJ584969cuaIdO3aoa9eu6tSpk/bv368SJUroueeeU5cuXdS/f3999913ioiI8GLV96agoCB16dJF6dKl00svvaSaNWtqzJgxqlixooKDg7Vx40bNnDmT8CYRxd5fX7hwwXlfP/DAA/rhhx/02GOP6ZNPPtGbb76pdu3aKSAgQFWrVlWGDBm8WfY9J/YB85YtWzR79mxVqVJF+fLlU79+/fTee++pVatW6tmzp6Trr9VLL70kM1PNmjW9VXayZ/9/HJWwsDD17NlTjz76qEaOHKk9e/aoQoUK+uKLL7R9+3aNHTtWv/76qyR+WEpM8f0g4evrq2HDhmnt2rVq2rSpihYtqtdee01z5sxR//79tXv3bl27ds0L1SKxxPe6p02bVm3atNGyZcucv7WUKVNKkvz8/BQZGalUqVLd0t9fqtsrF/ebJ598UunTp1ffvn0VHR2tXr16qVSpUho+fLj69Omj9u3b6/PPP5ePj4+k65ecqly5spervrfFfAFdu3atNmzYoLffflvBwcGSpMcff1wzZszQgAED1Lt3b/n4+GjEiBHKmjWrKlas6M2y7wkBAQEKCQlRaGiozp49q88++0yhoaGSpB49eujEiRN6+eWX1b9/f6VMmVJRUVGaNWuWfvnll/tuxOno6Gj9888/2rNnj5599llneurUqVW5cmVVqlRJ58+fV6dOndSgQQONGzdO//zzjyZPnqwuXbpIkjp27MiB5i24fPmyUqdOLZfLpdOnT8vHx0fp0qVT+vTplT59ekVHR2vv3r166KGHnC+puXPn1quvvqomTZrwxTWRxB79esyYMVq5cqV+++03de/eXc2aNVOZMmVUunRpSddfs+PHj6tz5866du2aatWq5c3S7zkx+5EJEyboyJEj6tChg+rUqSNJat26tf766y998MEHcrlcunbtmvbs2aPjx49r06ZNSpEihdtrif/jcrk0e/ZstW7d2tlvL1++XJMmTdLixYtVuXJlffnll+rYsaOGDh2q119/nWORRBL7PTlr1iz98ccfypo1q8qUKaMnnnhCDRs21PHjx1WwYEFJ14Oe9evXq0KFCs6XStx9Yr/uu3fv1vnz51W6dGmlTJlSzZo10y+//KL33ntPZqaqVasqMjJSmzZtUv78+W/9eOqWT3jAfeXf5wV+9913lidPHuvWrZvt2bPHrl27ZlOnTrVChQpZkSJF7IknnrAqVapYsWLFGGAoCfTp08ftnPmFCxdaoUKFLCAgwH744Qe3th999JE1atTIXC6XlS5d2mrWrGmXL182s7ivKxJu4cKF5nK5LH369LZy5Uozcz+P8+OPP7bWrVtbnTp17Nlnn7Xt27d7q1SvioqKMrPrg0mama1evdreffddtza7d++2smXL2s8//2xmZvv27bNnnnnGBg8ezACKt+CLL76wq1evOvdnzZplZcqUsZIlS1r58uVt7ty5durUKbtw4YLVr1/f2rZta19//bUNHjzYcuXKZceOHfNi9feuF1980QICAuz999+3Tz75xAoUKGCPP/64876/cuWKTZs2zWrWrGlVqlRx9texX0vcmtj75uPHj1vz5s3N5XLZU0895Tb/zJkz9tlnn1loaKi1adPGXnrpJedYhmOaGzt16pRVrlzZxowZ40z7448/7PHHH7ccOXLY3r17zcxs7dq1VrFiRc63TwIDBgywwMBAq169upUqVcqyZMli77zzjjM/MjLSfv75Z2vUqJGVKlWK9/M9YtCgQZYrVy7z8/OzggUL2ujRoy0qKsqWLFliDz30kOXIkcMqVapkZcuWtVKlSjmfK7cy7gjhARJkxYoVzhsuJkDo2rWr7du3z8zMdu3aZb1797aePXvaiy++yIdtEtiwYYP16dMnzjYdOHCg+fv7W9u2be2ff/6J87itW7c6QY8Zr0liOXfunP3www/2zDPPWMaMGZ1Ruv+9Q7527dp9e/D/xRdfWKVKlezo0aNmdv3gpWPHjlayZEn78MMPnXY///yz+fj42Ny5c+3kyZM2fPhwq1OnjrPPwc3766+/LFeuXM6gqXv27DEfHx8bNWqUTZo0yZ588knz9/e3cePGmZlZWFiYlStXzgoXLmyFChWyTZs2ebP8e9aPP/5ohQsXtrVr15rZ9S9RKVKksIIFC1qTJk1s1apVZnb9b+Gdd97hMzSJbdmyxTp06GA+Pj62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3rhxoxUqVMiqVasW57zTEydOEPAmkUGDBlm2bNns448/ttdee81KlChhtWrVMjOzJUuWWO/evS1DhgxWvHhxt3PBK1euTHf7f4l5v+7cudPWrl1rS5YsceZNmTLFqlWrZk888YStXLnSDh06ZIMHD7YKFSrYmTNnvFXyPadv376WLl06mzZtmhMg7Ny50x544AGrV69enP396dOn7amnnmL/cheL/T1gyJAhljZtWqtataq5XC576KGHbNu2bW7t33//fUuZMqVbb+R9+/ZZpUqVkqQ3LOEBzOz6qLnFihVzLuOyYMEC8/X1tZIlS1qVKlWcN+q/gwLOn0pcsbdveHi42wfwBx98YLly5bLmzZs7086fP29NmjSxkJAQPigS0YkTJ6xcuXL2xhtvONO2b99ujRo1sgceeMAZoGbx4sVWtmxZ55z9+92lS5fs8ccft2effdbMrr8/9+zZY6+88opNmTLFwsPDLSoqynr06GFBQUF25swZTlW4BatXr3Z+VTp58qRFRUXZunXrbNiwYVauXDl76aWXnAPKGGfPnrUhQ4bwa2AS6tOnj7lcLvvyyy+daRs3brSCBQta9erV4x24iv124ojZphs3brQSJUo45/suWrTI0qRJ4/R2inHs2DGnV5SZ2QsvvGAPPPAAvaBiid2T7MEHH7TChQtbYGCgPfroo05vms8//9yaNm1qLpfLihQpYtmyZbPNmzd7sep7R+zj6169epmvr69bgLBjxw7LnTu3NWjQwBlE8d/H6Oxf7m4bN2609u3bO+OYffbZZ1a2bFl75pln3Hofmpl9//33znvm36fdJjbCA5jZ9fO4n3vuOTMz+/HHHy1r1qw2ceJEmz17tmXLls1q1KjBB8IdNGzYMKtSpYoFBQXZ22+/bX///bdFRERY7969rUCBAtawYUPr0qWL1ahRw0qVKuX8csIHReL466+/LDAw0O3Si1evXrWtW7daxYoVbcKECc6HNKNI/5+LFy9aaGioPfvss7Zlyxbr3bu3hYSEWM6cOa1ixYr2zDPPWHR0tB06dMjtwB23ZsOGDVa9enW33gQDBw60cuXK2YgRI5wA4b333uO69YnsRj3uhgwZYqlSpbIvvvjCmbZx40YrUqSIFSpUiMA9EQ0bNsy+/fZbt2mrVq2ywoULm9n1g+mMGTM6p/idPXvWZsyYYf/884/TfsWKFdaxY0fLkSMHp6DFY+HChebn52eTJk2yyMhImz9/vrlcLmvatKmzHc+fP2/r1q2zlStXEqQnkvj2Lz179ow3QMiTJ481bNjQwsPD73SZSELffvutVa5c2WrVquV2ic5PPvnEypUrZ926dYv3x4A78RlDeHAfutEvfcePH7dz585Z7dq17ZVXXjGz/7skY+7cua1z5853ssz7SuwPik8//dRy5MhhkyZNsr59+1ru3Lmte/fudujQIYuMjLSZM2das2bNrHPnzjZy5EhnR8FB6a2Jjo52/iZinyNYqVIlGzx4cJy/l+DgYOvRo4fb4/F/xo8fb1myZDE/Pz9r2bKlffXVV2Zm9vzzz1vjxo29XN3dL2ZfceTIEVuzZo3Vr1/f6tevb7Nnz3baDBo0yCpVqmRPPPGE9ejRw1wuV5xujrh1sffX+/btizM42YABA+IECGvXrrUnnniCgDeR7Nq1y2rXrm1169Z1C89WrFhhVapUsWnTppmfn599+OGHzrylS5fa008/bTt37nSmRURE2DvvvOOMUI//c+bMGevatasz6OfBgwctf/781qpVK8udO7fVr1/f6YWHpDF9+nS3wVhvFCCkTJnS+QEQ94Zp06ZZlSpVzN/fP86Pt59++qlVqlTJWrZs6ZVBugkP7jOxD3qOHz8eJyX+448/LGfOnM6H8ZEjR6xVq1Y2Y8YMxja4AzZu3Gj9+vVzrqpgdr1bYNGiRa1bt272559/xvs4DkhvXcxB//z58y0wMNA+//xzM7t+nmHVqlXtu+++c2vfokULe/HFF91Ch/tR7MBl8+bNtnXrVmfe2rVrbeXKlWb2f+/Nvn372uOPP27nz5+/r7dbYvj2228tderU9vfff9vy5cutefPmVqdOHZs1a5bTZuzYsdaqVSurXbu2M24NEtfAgQOtYMGC5uvra3Xr1rXRo0c77+0BAwaYj4+P2ykMMdhfJ47Vq1dbixYtrE6dOm5j/sScGzxhwgRn2oULF6xx48b22GOPOccyMf+yP/o/sbs7R0dH25dffmm7du2ykydPWrly5axr165mZvbFF1+Yy+WyunXr0ossiRw9etTy589vTZo0sUWLFjnTYwKE2IMo7tu3j/3KXexG+6DZs2db1apVrVGjRnF6Rk2YMME6duzole9mhAf3qaFDh1rJkiUtU6ZM1rx5c/v8888tOjrazp49a7Vq1bLmzZvbrFmzrEGDBla/fv04H7ZIfKtWrbI0adJYxowZberUqW7zvvjiCytatKj17NnTNm7c6KUK7y2xv/x/88035nK5zOVy2ahRo8zs+i9STZs2tcqVK1ufPn3s66+/tl69epmfn5/bL1f3o9jnwpYsWdJy585tVatWtSeffDJO2927d9uLL75ofn5+dJ2/DTHbPDIy0gYNGmTjx4935q1cuTLeAOHixYvOwSVuX+zPv6lTp1qePHlsxowZFhYWZt27d7dKlSpZjx49nNfqxRdfNJfLZQsWLPBWyfek2Afaq1atskcffdRq167tXI507969ziXrJk6caO+9956FhIRYiRIlGOj5JixatMj5FTvmlMhvvvnGgoOD7cCBA2Z2/RfxkJAQK126NONEJJL4vkCuW7fOKleubI888ogtXLjQmd6rVy9Lnz69ffTRR25XeiFAuPvE3hft2bPH/vjjD7cePd98843Vq1fPmjVrFqcHQsx75k7vzwgP7hOx31gffPCB5ciRwyZPnmzfffedNWjQwKpXr25vvvmmmV2/JEitWrUsX758Vq9ePefDgw/bpPfBBx+Yn5+fderUyfmQjvHVV1+Zv7+/jR071kvV3VtidrrfffedpUyZ0mbPnm3Dhg2z9u3bO20iIyNtyJAhVrNmTStUqJDVrl2bsT/+vwULFljGjBnt/ffftyNHjth7771nLpfLHn74YafN2rVrrW7dulayZEmuSJEIfv31V8uXL59VrVrV1q5d63awGRMghISExOktg8S1YMECGzlypNsv25GRkTZu3DgrV66cW2+DiRMnckpZEoh9PLJy5UonQIjpgXD48GFr1qyZlStXzmrVqmVdunRxjmV4PTz7/vvvLUWKFLZhwwZn2qhRo6xAgQLOPmfIkCH20ksvOdsUieffg92uX7/eKlSoYI888ogtXrzYmd62bVurU6fOnS4PiSj2fmzYsGFWvnx58/Pzs0ceecTee+89Z94333xjISEh1rx5c/v111/dluGNnlOEB/eZ5cuX2+uvv+72y/bJkyetT58+VrFiRVu3bp2ZmZ06dcr279/vvLH5sE1cnoKYcePGWa5cuWz48OF26NAht3kLFy4kWb4NH374oa1YscK5v2jRInO5XM7fwwsvvGB169Y1M3PS/Jgd89GjR50Rpu93p06dsqZNm9pbb71lZtcPdoKCgqxx48aWN29ea9q0qdN26dKldvDgQW+Velf790HBihUrrE6dOubr6+vsq2P/6rRq1Sp76KGHrFmzZnb27Nk7Wuv9IDo62sLDw51eSgMGDHCbf+nSJatVq5Z16NAhzmP5DL19sT83//05uGzZsjgBgtn145sLFy4493kdPIuOjrbjx49bkyZNbOTIkc703bt3W+bMma18+fJWv3598/PzcztVDbcu9vv6vffes+bNm8c51WzdunWWL18+CwkJcQsQOPXm3jBy5EjLli2bzZs3z7Zs2WItWrSwHDly2Guvvea0+d///mdly5a1gQMHerHS6wgP7iO7d+92DnpiLkEXs8M5e/asFSxY0F544YU4j6PHQeKKvT1nzZpl7777rk2ePNlt0JM33njDcufObSNGjIh39GIChITbuXOnPfbYY7Znzx5n2p49e9wONMePH281atRwe1zMufv3u5h9RczovlOmTLHNmzfb8ePHrWTJkta9e3e7dOmSDRs2zFwul9WsWdOb5d5T/vrrLzO7/hqsWrXKqlSpYnnz5nV+oYr969/atWvjhI64dfEdlG/bts2yZ89u5cuXt+3bt8e5JndISIhbqIPbF/tz8+OPP7YOHTpYhw4d7NNPP3WmxwQI/z59JwZfsOKK2a7/7kHw8ssvW44cOezkyZPOtA0bNlj79u2tb9++DMCaSGK/J3ft2mUbNmywnDlzWqdOneIECJ9//rllyJDB6tata2vXrnWmc4x+d1u9erWVLVvWli9fbmZmS5YssbRp01qjRo0sX758br2Nw8LCksXrTXhwn5k3b575+/vbI488YqdOnXLbcXXq1Mlat27NB2wSir1tBw0aZDly5LAGDRpYrly57OGHH7aZM2c688eOHWsPPPCAPffcc3G6seHWxFzuZt26dbZ06VJnekwYM3PmTHvwwQed88SHDRtm+fLlY0Co/2/OnDmWL18+W79+vTNt0qRJ1qBBA+cyUdOmTbNq1apZzZo1ORc2ERw6dMhcLpcNHTrUzK7vQ1avXm3VqlWz4sWLO+/NS5cuebPMe1Lsg7SYy9LF7MM3b95s6dOnt0ceecTWr19vV69etYiICKtSpYo9/fTT3ij3vjBw4EALCAiwAQMG2JNPPmlly5a1vn37OvOXLVtmjz/+uJUsWZLg9wYmT57s9Fwyu77NBg4cGGc8pcqVK1vv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Rf369REbG4vz589j1apVaNKkCdzc3HDkyBGEhIRApVJhyJAh0NPT43KMeRyTB0RERERERKRQqVS4evUqoqKicPToUSxevBjR0dFQqVQICAjAmzdvMHz4cNSpU0d5DxMHeR+nLRAREREREZGGVatWYeTIkUhPT4eHhwdatWoFR0dHuLq6AgD+/e9/azlC+tI48oCIiIiIiIg09O3bF61atUJycjIqVqwIIGMVhocPH6Jhw4Zajo60gSMPiIiIiIiI6IPi4+Nx4cIF+Pj44N69ezh//ryy8gJ9PXjGiYiIiIiI6C+JCMLDw+Hr64vU1FScO3eOxRG/Uhx5QERERERERB+UnJyMq1evwtbWFjo6OkhLS+PIg68QkwdERERERET0P1Gr1dDR0dF2GKQFTB4QERERERER0UcxZUREREREREREH8XkARERERERERF9FJMHRERERERERPRRTB4QERERERER0UcxeUBEREREREREH8XkARERERERERF9FJMHRERElG3c3NzQqVMnjW3btm1Dvnz54Ovr+1/fr1KpsGvXrs8THBEREX0yPW0HQERERHnXypUr4enpiaVLl8Ld3V3b4RAREdEn4sgDIiIi+ix+++03DB48GL///ruSOFiyZAmsra1hYGCAypUrY926dcr+5cuXBwB07twZKpVK+fv27dvo2LEjSpQoAWNjY9SvXx+HDh360l+HiIjoq8bkAREREWW70aNH45dffkFAQAA6d+4MANi5cye8vLzw008/4fLlyxgwYADc3d0REhICADh79iwAYM2aNXj06JHyd3x8PJydnREcHIyIiAi0adMG7du3R0xMjHa+HBER0VdIJSKi7SCIiIgob3Bzc8OmTZuQkpKC4OBgtGjRQnnN3t4e1atXx/Lly5VtXbt2RUJCAvbu3Qsgo+bBzp0736ub8Gc2Njbw8PDAoEGDPsv3ICIiIk0ceUBERETZqmbNmihfvjwmTZqE+Ph4ZXtUVBTs7e019rW3t0dUVNRHPy8+Ph4jRoxA1apVYWJiAmNjY0RFRXHkARER0RfE5AERERFlK3Nzcxw5cgSxsbFo06YN3r59+48+b8SIEdi5cyemTZuGY8eO4cKFC6hRowZSUlKyKWIiIiL6b5g8ICIiomxnYWGB0NBQPH78WEkgVK1aFSdOnNDY78SJE6hWrZryt76+PtLT09/bx83NDZ07d0aNGjVQsmRJ3L1790t8DSIiIvoPLtVIREREn0XZsmVx5MgRNG/eHK1bt4aHhwd+/PFH1K5dG46OjvD398eOHTs0Vk4oX748goODYW9vD0NDQ5iamqJixYrYsWMH2rdvD5VKhZ9//hlqtVqL34yIiOjrw5EHRERE9NmUKVMGR44cwfPnz7FkyRLMnDkTs2bNQvXq1bFs2TKsWbMGzZo1U/b39fXFwYMHUbZsWdSuXRsAMHv2bJiamqJx48Zo3749WrdujTp16mjpGxEREX2duNoCEREREREREX0URx4QERERERER0UcxeUBEREREREREH8XkARERERERERF9FJMHRERERERERPRRTB4QERERERER0UcxeUBEREREREREH8XkARERERERERF9FJMHRERERERERPRRTB4QERERERER0UcxeUBEREREREREH8XkARERERERERF9FJMHRERERERERPRR/w/1tkof18KixAAAAABJRU5ErkJggg==",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "bycity = all_data['customer_city'].value_counts().head(10)\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "most_common_city = bycity.idxmax()\n",
        "\n",
        "bycity = bycity.sort_values(ascending=False)\n",
        "\n",
        "sns.barplot(x=bycity.index,\n",
        "            y=bycity.values,\n",
        "            palette=[\"#068DA9\" if city == most_common_city else \"#D3D3D3\" for city in bycity.index]\n",
        "            )\n",
        "\n",
        "plt.title(\"Jumlah Pelanggan Berdasarkan Kota\", fontsize=15)\n",
        "plt.xlabel(\"Kota\")\n",
        "plt.ylabel(\"Jumlah Pelanggan\")\n",
        "plt.xticks(rotation=45, fontsize=10)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5tuOgMpoj3b3"
      },
      "source": [
        "Berdasarkan grafik di atas, Sao paulo memiliki jumlah customer tebanyak."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6ZXOGqgGj-z1"
      },
      "source": [
        "* Demografi berdasarkan state"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "jqqbO3pokA8L",
        "outputId": "e1b76621-5d62-4b40-8f02-8bf14cacbfb3"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-71-e4f501e75c29>:9: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=bystate.index,\n"
          ]
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA/8AAAIxCAYAAAAblwgmAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABnbklEQVR4nO3dd1yV9f//8ecBAXEALsCBo9w5ckuZW3Gnoh9XuStNLaVclVqmWTYtM1ep38YnK80ciZF7lduc5AxTwQ1CCgrv3x/+OB9PoIKMo5eP++3Grbje7+s6r+vNOcfzvMb72IwxRgAAAAAAwLJcnF0AAAAAAADIWoR/AAAAAAAsjvAPAAAAAIDFEf4BAAAAALA4wj8AAAAAABZH+AcAAAAAwOII/wAAAAAAWBzhHwAAAAAAiyP8AwAAAABgcYR/ALjH2Gw22Ww2Z5eRQu/evWWz2bRmzZoMbef48eOy2Wxq2LBhptS1Zs0a+5gl/+TIkUP+/v568skntXr16gw/RmbtO+6sZMmSKf6erq6u8vX1VcuWLbVs2TJnl2hns9lUsmRJZ5eRYXPnzpXNZtPrr7/u7FLSZeHChWrVqpV8fX3l5uamggUL6pFHHtHTTz+t2bNnKyEhwdklAsA9JYezCwAAIDP4+fmpRYsWkqSrV69q165dWrx4sZYsWaJPP/1UAwcOdHKFSI/g4GDlyZNHkvTPP//owIEDCg0NVWhoqCZNmqRRo0Y5uUI4U79+/fTFF19IkqpVq6YGDRrIGKN9+/bpq6++0ldffaU2bdrI39/fvo7NZlOJEiV0/PjxTKnh+PHjKlWqlBo0aMCBQQD3BcI/AMASypcvr7lz59p/N8Zo/Pjxev311/XSSy8pODhYvr6+zisQ6fLee++lOKs+bdo0DRo0SGPHjlWfPn3k5+fnnOLgVAsXLtQXX3whb29v/fzzz3rssccc2o8fP67PP/9cHh4eTqoQAO5NXPYPALAkm82mMWPG6OGHH9aVK1f0yy+/OLskZNDzzz+vgIAAXbt2TZs3b3Z2OXCSBQsWSJIGDx6cIvhLN24defPNN5UvX77sLg0A7mmEfwC4xyXf0967d+9U2291P3ry/cjXr1/Xm2++qdKlS8vT01MVKlTQnDlz7P1WrVqlRo0aycvLS/ny5VPPnj11/vz5NNe3a9cujRgxQjVq1FChQoXk4eGhhx56SM8//7xOnTp123WvXLmiUaNGqUSJEvLw8FDp0qX1zjvvyBiT5se/HRcXF1WtWlWSdOLECftyY4z++9//qnHjxsqXL59y5sypChUq6PXXX9c///yT5u2nd99vnu8gvfu+du1aNW7cWHnz5lW+fPnUqlUrbdu27bb3ax8/flzdu3dXoUKFlDt3btWsWVPffvvtLedduHTpkj755BMFBQXZ6ypQoIBatGihsLCwVOtq2LChbDabjh8/rkWLFqlu3brKnTu38ufPr27duunvv/9O83imRfLVG9evX0/Rdv36dX322WcKDAyUl5eXPD099eijj+qjjz5KtX/y/ALGGH3yySeqWrWqcuXKpUcffdTe58KFCxo8eLCKFCminDlzqmLFipoyZcot/05Xr17V559/rieffFIPPfSQPD095ePjo/r16+vbb79NdZ2EhARNmzZNtWrVUoECBZQrVy6VLFlSbdq0SbHO4cOH9frrryswMFD+/v5yd3dXsWLF1LNnT/3555+pbj/5vSAhIUHjx49X+fLl5eHhofbt26fa/2bvv/++XFxcVL58eftrKCM1JCYm6p133lHZsmXl4eGhgIAAjRw5UvHx8XesJdnZs2clSYUKFUpT/+TXiCT99ddfDvNJ3PwaSM/r+fXXX1epUqUk3Xht3rzNf79XX7hwQaNHj1bFihXl6ekpb29vNW7cWEuXLk3zPgNApjAAgHuKJHPz2/Pq1auNJNOrV69U+/fq1ctIMqtXr06xnRIlSpgOHToYb29v0759e9O8eXPj4eFhJJkvvvjCfP/99yZHjhymXr16plOnTqZo0aJGkqlXr55JSkpK0+N06dLF5MiRw1SvXt20b9/etG/f3pQsWdJIMoULFzYnT5506H/s2DEjyQQGBpp69eqZ/Pnzm44dO5qgoCCTM2dOI8m8+uqraR6v5PFp0KBBqu3NmjUzksz7779vjDEmMTHRdOvWzUgyefLkMQ0bNjQdOnQwAQEBRpKpXbu2+eeff+6pfV+wYIFxdXU1kkzdunVN165dzSOPPGI8PDzMgAEDjCQzbtw4h3UOHTpkChUqZCSZ0qVLm65du5r69esbm81mXnzxxVTHbPny5UaSKVmypGnWrJnp0qWLCQwMNDabzdhsNvP555+nqK1BgwZGkhk+fLhxdXU1DRs2NJ06dbKPZ5kyZVKM5+2UKFHCSDLH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qhEA7hbhHwAszN/fP9UP78mhqmjRordsS+sEXP/973/17LPPKjY29pZ9Ll++nOIDc7FixVLtmzdv3nQ9fjI/Pz+1aNFC0o1QXKBAAdWtW1dt2rSRm5ubJNm/3zssLCzVAwU3O3fu3B3Df3bse3IgCggISHWd4sWLp1h2N+tI0t9//602bdpo9+7dqbZLN/YnNant093+LaXUv+rv+PHjql+/vvr166eSJUuqcePG9uWSNGvWLM2aNeu2271w4UKK531q45E8wVuJEiVS3c6/a0sWHR2tjh07atWqVbes4eYx9PLy0qxZs/Tss89qxIgRGjFihMqWLatGjRrp6aef1uOPP+6w7qpVq9S1a1f7pHd32n4yX1/fO371XfLEiK1atdIXX3xxy9fI3dZwq/eju32e5M6dWz169FCPHj0kSVFRUZozZ47Gjx+vw4cP69VXX73j8+Fmd/t6vpXk5+XNNabm3Llzaa4RADKC8A8A97mkpKRbtrm43P5LXe7Ufid//fWXfWbrjz76SK1bt1bRokXtZ1Yfe+wxbd68OdWZ0TP62P9Wvnx5zZ0797Z9kseqdOnSKULVvxUoUOC27ffSvmeW/v37a/fu3QoODtaIESNUrlw55c2bVy4uLpo5c6aee+65W85ynx37VLJkSY0cOVKDBw/Wxx9/bA//yX/XRx991P7tDreSWgDOmTNnptU4cuRIrVq1Sg0aNNAbb7yhSpUqycfHR66urvrll18UFBSUYgy7deumpk2b6qefftIvv/yitWvXasaMGZoxY4ZCQkL0/vvvS7pxtv0///mPLly4oLFjx6pr164qUaKEPD09ZbPZ1L17d/33v/9N9W+Uln1s2bKl1q1bp19++UULFixQp06dUvTJSA1Z/Rzx8/PTqFGjlCtXLr344otatmxZmtfNyOv5VpKfly1atEj1SqNkBQsWTPM2ASAjCP8AcI9zd3eXpFuejbr5K+yy288//6yEhAS9/PLLevHFF1O0Hz161AlV3Vry2em0HCi4k+za98KFC0u69d85teV3s05cXJzCwsLk5+en+fPnpzhDe6/8LZO/Xu3mS+eT/6716tXTJ598kimPkzyGf/31V6rtt1r+448/ytXVVYsXL5aXl5dD2+3GsFChQurfv7/69+8vY4xWrFihLl266IMPPlDfvn31yCOPaP369Tp//rw6deqkN954I8U2Mvo3ql69ul599VU1b95c3bp1k4uLS4pL1rO6hsyQfFAoPWfUs+L1nPy87N+/v4KDg9O9PgBktnvz1AMAwC45hKT2/dkXLlzQjh07srsku4sXL0pK/ZLvdevWKSoqKrtLuq1atWrJ29tba9eu1YULFzK0reza9+QrFBYsWJCiLTExUQsXLkyx/LHHHpMkrVixQnFxcSnav/vuuxTLoqOjlZSUpMKFC6cI/teuXdOPP/54V/VntuQQdvNcBo0aNZKrq6uWLl1qv/c8o2rUqCFPT09t37491eD37bffprrexYsX5eXllSL4S6mPe2psNptatGih1q1bS5L27dtn37aU+nPu8OHDmfJeUKdOHYWGhsrT01Ndu3bVTz/95NCeHTXcyZ3Ovh8+fFhSytua3NzcdP369VTXuZvXc/KB2Vtts1mzZpJ0z7x2AIDwDwD3uFKlSql48eLas2ePwwfxuLg4Pfvss4qJiXFabckTdX311VcOIfPkyZMaMGCAs8q6JQ8PD40YMUKXL19Wx44dUw11J0+e1JdffnnHbWXXvnfu3Fn58+dXWFhYisA5YcIEHTt2LMU6ZcqUUZMmTXTx4kWNHDnS4daQ1LYj3bgn3NvbW3v37rVPGCjdOMAwcuTIVA8+Zbfjx49r8uTJkqRWrVrZlxctWlR9+/bV8ePH1a1bt1SD2uHDh1M9gHIrefLk0dNPP63ExEQNGTJEV65csbdt27ZNU6dOTXW9smXL6uLFi5o/f77D8g8//FCrV69O0X/nzp1auHChEhISHJZfuHBBv//+u6T/zd2Q/JxbuHChw/32ly5dUr9+/TLtwEdgYKBCQ0Pl4eGh//znP1qyZInD/mVHDbfTv39/TZgwwT4vw83Cw8P10ksvSVKK2xaKFCmiqKgoXbp0KcV6d/N6LliwoNzc3HTkyBH7xIA3Cw4OVsWKFfX111/rzTffTDGngTFGGzdudHi9AUBWIvwDwD3o3xNtjRs3TtKND5ONGzdWu3bt9PDDD+uPP/7Qk08+6YwSJd2YJf2RRx7Rtm3bVLp0aXXq1Elt2rRR2bJllS9fPvsZ6HvJqFGj9PTTT2vt2rWqUKGC6tatq27duik4OFiVKlVSQECA/R7r28mufff29tasWbPk6uqqbt266bHHHlP37t1VuXJlvfXWW3r22Wcl/e8sZLLPPvtMhQoV0qeffqry5cure/fuatiwoVq0aKHnnnsuxTo5cuTQiBEjdP36dTVo0EDNmzdX165dVbp0aU2fPl2DBg3KlP1Jq5dfflm9e/dW79699dRTT6lhw4YqV66cTpw4odq1a9sDXrIpU6aoWbNmWrBggR5++GHVq1dP3bt315NPPqkyZcqoTJkyaTqoc7NJkyapXLly+vnnn/Xwww+ra9euCgoKUmBgoHr27JnqOqNHj5Ykde3aVfXr11f37t31yCOP6OWXX9awYcNS9P/rr78UHBwsX19fNW3aVE899ZTatGmjkiVL6ujRo2rbtq0CAwMlSTVr1lSzZs0UERGhsmXLqkOHDurQoYNKlSqlU6dOZep7wWOPPably5fLzc1NnTp1st8/n5013Mr58+c1ZswYBQQEqEqVKurUqZO6dOmiunXrqmLFijp69Khq166tMWPGOKzXrl07Xb9+XdWrV9dTTz2l/v37691337W3pff17O7urhYtWigyMlJVq1ZVz5491b9/f82ZM0fSjdfUokWLVKpUKY0dO1bFixdXs2bN1KNHDwUFBcnf31/16tXT1q1bs3zMAEAi/APAPeXq1auSbsxifbO+fftqzpw5qlChgjZu3KgtW7aobdu22rx5s3x8fJxQ6Q3u7u5av369Bg4cqJw5c2rp0qU6cOCAhgwZorCwMPss+/cSFxcX/d///Z9++uknNWvWTMeOHdOCBQu0YcMG5cyZU8OHD9cXX3xxx+1k57537NhRv/76qxo2bKg//vhDy5YtU5EiRbR+/Xr7TPX/nqCwTJky+v3339WtWzdduHBBixYtUkxMjObNm6euXbumus4rr7yiefPmqUqVKtq4caN+/fVXVa1aVb/99ptq1qyZafuTFgsWLNC8efM0b948ffPNN9q5c6eqV6+uDz74QOvXr0/xFYaenp5avny55s2bpzp16ujAgQP64YcftG3bNhUqVEhvvPGG/aqBtMqfP782btyogQMHyhijRYsWKSIiQm+//fYt5xbo0aOHli1bprp162rXrl1avny5ihQpolWrVqX6lYJ169bVhAkTVKNGDYWHh+v777/Xtm3bVKVKFX3xxRcprlb46aef9Oqrr6pQoUJavny5tm/frq5du+q3337L9PeCevXq6eeff5abm5uCg4MVGhqa7TWk5tNPP9WsWbPUsWNH+1dTLly4UEePHlWjRo00ffp0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C84uyfLOnz/PmzgeCDExMZIkm83m5EqArHP06FG9+uqr6tevn5YuXerscoAssXPnTtWqVUtnzpxxdikPlISEBEk3PjvejM+RWePUqVNav369rl275uxSsgzh/wG2e/duPfbYY/r22281d+5cde7cWZMnT9bly5edXZplrVy5UlWrVtWGDRt443aCiIgIzZw5U++//74OHz7s7HIsLTw8XD169NCYMWM48w/L+uOPP9S4cWNdunRJjz/+uBo3buzskizvn3/+0ZUrV5xdxgNl9+7deuKJJ9SyZUv5+vo6u5wHRnh4uJ5//nnVqFFDNWrUUPv27TV79mxJkouLC58jM9m+ffvUpk0bTZw4UTt37nR2OVmG8P+A2rt3rx577DENGjRIv/76q86fP69u3bpp+vTpCg8Pd3Z5ltWkSRPlz59fzz33nDZv3swbdzbau3evWrVqpd9//10XLlxQ6dKlHdoJqJlnz549ql+/vooXL64yZcpw5j8bHD58WKNHj1b37t01a9YsXb9+3dklWd6RI0fUokULdenSRdOmTVP//v2VK1cu3kuy0OHDh1W9enWFhIRowYIFDm38e5o1/vjjDwUGBmro0KF655137MuTz0gja+zZs0eBgYGy2Wxq27atXn75ZYWHh+uVV15Rv379JN04AMD7TebYt2+f6tWrp2bNmundd99V7dq1U/SxzFgbPHAiIyNN3rx5TfPmzR2Wnzx50uTPn998++23TqrswVGrVi3z8MMPmw0bNpjExERnl2N5+/btM/ny5TOvvfaaiYuLsy9fsGCBmTdvnv33pKQkZ5RnKceOHTMlSpQwr7zyym2f24x15tm1a5fx9/c3QUFBpmHDhsZms5mxY8c6uyzLe/XVV02rVq1MTEyMs0t5YHz22WfGy8vLzJo1y+TLl8/079/fvPvuuw59+Dc18xw6dMjkyZPHPPvssw7LZ8yYYb744gtz/fp1J1VmbadOnTLly5c3r7zyisPyM2fOmGeffdYULFjQvPTSS06qznouXLhgAgMDzfDhw1O0xcXFOXxescJnF878P4D8/PzUtGlTnTlzRl9++aWio6MlSSdOnNA///zDJV2ZbPXq1Ro/frxef/11LV++XJK0ZcsW5c+fX7169eIKgCwWHR2toUOHqlu3bho/frxy5colSXrnnXfUqVMnTZs2TV9++aWkG/emG6sc2XWS1atXq2LFiho1apR92dGjRxUWFqbRo0crNDRUZ8+e5WqATPLHH3/o8ccfV9++fbV8+XL9+OOPevLJJ/X+++9zFVcWSkpK0vr161W0aFHlzZs3RXvy+wgTpGWurl27Kn/+/CpUqJD++OMPFS9eXAsXLlStWrU0depUHTlyRC4u//toy/t5xoSHh+vKlSvy9va23yr3zjvvaMiQISpbtqxcXV2dXKE17d+/X/ny5dOAAQOUmJgoSbp27ZoKFSqkN998U0888YR+/PFH7d2718mVWkNMTIyuXLmiLl262Jdt2rRJkyZNUuXKldW+fXt99NFHkqwxhxHh/wFy/Phxffrppzp06JAWLlyoMmXK6O2339a6det04MABBQcH67nnnlOjRo2cXaplzJ49W126dNH69es1Z84cPffcc/rhhx8k3TgAULBgQQ4AZLHo6GgdOXJELVu2tH8Q/Oqrr/TKK6/oyy+/VEBAgObMmaN58+ZJssYbuzPt379fx48fV968eeXi4qJvv/1WISEh6t27t+bNm6c+ffro448/JhRlgosXL6pZs2aqUaOGJk6cKJvNJh8fH7m7u9ufx2fPnnVyldaS/EFcunHZc44cOVIsl/73PjJq1Cj9+uuv2VeghV27dk0+Pj4aMmSIfvrpJxUtWlRjxozRpk2bdPjwYb377ruqUaOGJk+erEWLFkni/TyjWrdurblz5+rrr7/WF198oeHDh+u9997TsmXL9Pjjjzu7PMvasWOHwsPDVaRIEfsBFjc3NyUlJcnX11cTJkzQyZMntW3bNidXen87dOiQVq9ercTERO3evVsnTpyQJE2bNk1Dhw7Vzz//rNatW+v69ev68ssvtXLlSidXnEmce+EBsssff/xhypYtazp06GAWLVpkXx4cHGzKlCljChQoYPr3729fzmVzGTdr1izj7u5uvv/+e2OMMatWrTLe3t6mT58+Jj4+3t6PWwCy1k8//WRsNpu5cOGCfdmVK1fMb7/9Zoy5cRtMhw4dTIUKFezLcPfWrFljSpQoYTp16mR69uxpvL29zdChQ82qVauMMcaEhISYkiVLmsjISCdXev+Lj483Y8aMMR4eHmbu3LnGGGMmTZpk3NzcTPXq1U3nzp1NkSJFTP/+/c306dPNiRMnHN57kD7Hjh0zM2bMMFu3bjXGGNOuXTtTtmxZc/nyZWNMyn83Dx06ZDp37mx27dqV7bVaRVJSUorLbNesWWN8fX3Nzp07jTHG9OvXz/j7+5tNmzaZzz77zJQrV85UrVrVnD171gkV3//i4uLM2bNnza+//mr+/vtvY4wxixcvNgULFjSurq5mzpw5zi3wATBnzhzj7e1t9u7da4xJeal5bGysKVGiRIpbXpB2O3fuNHny5DFTp041xhjz4osvGpvNZipWrGjc3NzMpEmT7O/dERERJn/+/GbKlCnOLDnTEP4fAAcOHDD58uUzo0aNMidPnkzR3q9fP5MnTx4zb948888//xhjrHFPizOtXr3a2Gw288YbbzgsL1KkiKlXr56Jjo52uE/08ccfNyVLlrR/qETGHDt2zPz000/GGGP2799vPDw8zMyZM1Pcn5j8+48//mhq1Khhjhw5ku213u8iIiLM7NmzzYwZM8ymTZuMMTfuB23atKlp1KiR+fXXX83Fixft/RcvXmzKlStnIiIinFTx/e/vv/828+fPN99++61Zs2aNmTJlirHZbKZt27amcOHCZunSpSYhIcGcOXPGrFmzxnTp0sUULVrUVKxY0Vy6dMnZ5d+Xbj6AvnjxYmOMMZs2bTLe3t6mQ4cODn2T//0cO3asqV+/vomKisr2eq0gPDzcDB482HTo0MG89957Dm0vvPCC6d69uwkODjZ+fn5mx44d9rZDhw4x5ncpPDzc9OzZ05QvX97kzJnT5M2b13Tv3t1ERESYDRs2GF9fXzN06FDz559/OrtUSzlx4oT56quvzMyZM825c+fMX3/9ZfLkyWMGDhxo75OYmGg/wPj333+bWrVqmSVLljir5Pvarl27TK5cucyoUaPsy2JjY83PP/9spk6dag4dOmRfnpSUZM6dO2caNGhgmTnRCP8Wd+XKFdO5c2czaNAgh+UJCQnm2LFj9oMBzz77rClbtqz56quvTGxsrDNKtZQ///zTPPHEE6Zdu3b2QN+hQwfj5uZmWrdubR5//HHTqlUrM27cOHP8+HGTkJBgGjdubGrUqMHZ/ww6efKkKViwoKlQoYL59ttvzfXr102VKlVMzZo17UfR/2348OGmbdu2DiEVd7Z7925TokQJU7t2bVOgQAHz0EMPOXwYSe0s89ChQ02zZs2YJO0u7d692zz00EOmfPnyJkeOHKZixYrm888/N59++qlxdXU1w4YNs/dNfi+5evWquXz5svnrr7+cVfZ97VYH0P/55x8zefJk4+npaZo3b27Wr19vLly4YDZu3GhefPFF4+XlZXbv3u3Eyu9fu3btMoUKFTLt27c3Xbt2NW5ubg5nOZcuXWry589vKlSoYPbv32+M4aRFRu3evdsULlzYDBgwwMydO9ccOHDAjBw50pQqVcqUK1fOHDlyxISGhprChQubF154wSEg4e7t3bvXVK1a1Tz11FNmxIgR9ufxxIkT7e/p/35uv/LKK6ZcuXKpntDD7e3evdvkypUrxWSKK1asuOV4vvbaa6ZMmTKWOWlB+Le4a9eumSeeeMJ88skn9mWhoaFm6NChxsvLyxQrVsx07NjRGGPMM888Y/z8/Mz8+fOdVa6l/Pnnn6ZFixamdevWpl69eqZ69epm9+7dJj4+3qxatcpMnz7dlCpVyuTNm9eMHDnSnD9/3uTJk8fMmDHD2aXf11avXm1cXFxMrVq1TJs2bcxPP/1kduzYYfz8/Ezjxo3N77//bu97/vx58/LLLxsfHx+zZ88eJ1Z9/0n+B3TUqFEmLi7OhIWFmSJFipjWrVubmJgYk5SU5HAg68yZM2bUqFEmf/78jPVdSh7zESNGmJMnT5olS5aYJk2amBo1apitW7ea119/3dhsNvs3WCQmJqZ62TTS7lYH0OPj48358+fNxo0bzcyZM021atWMzWYzbm5upkKFCqZWrVpc7n+Xdu/ebTw9Pe0fzhMTE83gwYPN0KFD7VcnGmNM+/btTePGjZ1VpqUkv7eMHj3aXLt2zaFt/vz5pmrVqqZ27domNjbWfPfdd6ZEiRKmX79+XC2XQXv37rV/E1F0dLR9+S+//GI++eQTM2rUKOPp6Wnq169vJkyYYD766CPTt29f4+Xl5XC1C9ImIiLCFCxY0PznP/9xWD5+/HhTrFgxc+DAAYfl69atMy+99JLx8fGx32ZkBYR/i4uOjjbly5c3zzzzjDl48KB56623TLly5UxwcLCZMmWK+fzzz02JEiXsl6f36tWLN/NM9Oeff5qmTZsab2/vVA+qXLp0yaxZs8Z+hjQwMNB888032V2m5fTt29c8+uijJjg42DRq1MjMnTvXhIaGGn9/f+Pr62tatWplunTpYpo2bWqKFSvGP6LplPwPaOfOnR2W16pVy5QtWzbFpeXTp083LVu2NGXLlrXUP6DZ6VZjPmPGDJMnTx4THh5url27ZsaMGWNsNpv58ssvnVSptdzuAHqePHlMhQoVTKNGjUxsbKxZuXKlmTt3rtm5cyf3m9+lWz3Pu3TpYh599FFTvnx507RpU/Pdd9+Z0NBQU716dRMWFuakaq0htTFPSkpyOAgwc+ZMkzt3bjNz5kxjzI339IoVKzJ3SwacP3/e1K9f3wwePNhh+aRJk4zNZjNt2rQxM2fONEuWLDE1a9Y0xYoVM1WqVDFPPfXULa9ixO0dO3bM1KpVy7Rr185s2LDBGHNjvAsWLGiWL1/u0HfhwoWmSZMmpl69euaPP/5wRrlZhvD/AFi5cqXJkSOHKVGihMmbN6+ZPn26/XKthIQE07x5c9O9e3cnV2ldhw8fNkFBQaZly5Zm/fr19uX/Prq+aNEiY7PZzOHDh7O7RMu4evWqMcaYZcuWmd69e5vQ0FDTsWNH07BhQ/P999+bqKgoM3jwYNOoUSPTvHlzM2HCBA523YXU/gF96623jM1mM7Vr1zZt27Y1ffr0MZ988onZs2ePmTlzpvnss88Y6wy4ecxvfh/55ZdfTIECBewfTmJjY824ceOMzWazzP2JznS7A+gfffSRmT17tilVqpQZPXq0s0u1hFt9OM+VK5d58803zezZs0358uVNhQoVzLJly0zhwoVNSEgIV7dkwK3eW4xxvJWifv36pn379vbfbz5TjfTbv3+/efjhh82qVavsV8l99tlnxs3NzXzyySemWbNmpm3btmbt2rXGmBsni2JjY01CQoIzy77vJV+V265dO/PMM8+YQoUKmRUrVqToFxoaag4fPmzJ+UMI/w+IiIgIs23bthRnIxITE03nzp3Na6+9xuWhWSj5zaZFixb2DzSpOX78eDZWZQ0RERFm4cKFDsvOnDljypcvb6ZOnWqioqJMx44dTb169ZgcJxPd/A9o//79TaFChcz3339v/vrrL/Pjjz+aCRMmGF9fX1OmTBnTokULZpnPBMlj3rx5c7N//35z+fJlU6hQITNixAiHfpcvXzYTJ0603wuNjEnLAfSePXs6uUrr+Pd7i6+vr8OH8+PHjxubzWZ++OEHs2jRIs6CZoLkMQ8KCnI4AHDzZ8KGDRs6nCji82LGfPnll8bV1dVhHE+cOGHWrVtnjDFmz5499tu6eI5nrvDwcNOsWTPj6elpn0z05gw0duxYU6xYMcvOA0X4f4DFx8eb1157zRQpUoSZW7PBn3/+aVq3bm1q1qyZYhIo/hG9OxEREaZAgQLGZrOZVq1amfnz55vw8HBjzI1Z5Z944glz5swZs3//ftOxY0fTpEkT+2WLxjDuGZX8D2jOnDlT/cqhc+fOme+++46JoTLRn3/+aVq2bGkaNGhg8uXLZ4YOHWpvu/nbLHhuZy4OoGevW304T0hIMH///bepUqWK+e6775xcpbXcfADg5pMUiYmJ5sSJE6Zly5b2rxTleZ5x69evNx4eHmbBggXGGMcxTb4SYObMmaZWrVrm9OnTTqnRyg4fPmyaN29uWrZsaT/gYoyxf33utm3bnFhd1nIRHkhfffWVhg8frlmzZmnp0qUqU6aMs0uyvDJlyujdd99V/fr1ValSJYc2m83mpKrub0lJSSpVqpTq1q2ryMhIhYWFqXnz5po5c6auXLkib29vbdu2TRUqVNCbb74pm82mJUuWKCYmRhLjnlFly5bVZ599pvr162vVqlXasGGDve3atWsqUKCAOnfurNKlSzuxSmspU6aMpkyZIldXV3l5ealDhw72NheX//2TznM7cwUEBKhGjRoqWLCgfVlCQoLGjRunjRs3qmfPnrLZbIx7Jkl+b3niiSe0cuVKrV+/XjabTW5ubpoxY4YuX76sunXrOrtMSylTpow+/vhj2Ww2vfnmm/b3cxcXF02dOlWnTp1SkyZNJPH+khlKliwpb29vzZs3T3/99ZfDmCa/l4eHh6tkyZLKnTu3s8q0rIcfflhTp06VMUYTJ07Uzp07NXnyZL377rvauHGjatSo4ewSs4zNGGOcXQSyV3h4uAYMGKB8+fJp4sSJqlChgrNLeiAlJSU5fFjH3Tl06JBGjRqlpKQk+wfwKVOmyMfHRz/99JNq166tdevWyd3dXeHh4cqdO7eKFSvm7LIt5dChQ3rhhRdkjNGYMWP0+OOPO7skyzt8+LCGDBnCmDvJV199pa1bt2r+/Plavny5qlWr5uySLOnm95ZJkyYpLCxM48aN06ZNmxjzLJLamCcfDKhataqzy7OUBQsWqHv37urSpYtGjRqlihUrSpJiYmI0YcIEzZ49W+vXr9cjjzzi5Eqt69ChQwoJCdGWLVt08eJFbd682dLBXyL8P7DOnDkjDw8PeXt7O7sUIMPCw8M1bNgwJSYm6pNPPlHRokW1Z88eTZw4UV26dNFTTz0lYwxnK7JQ8j+g586d04cffshZuWzAmDsHB9Cz14P44dzZGPPskZiYqNmzZ2vw4MEqXbq0HnvsMbm5uenkyZPatm2bfv75Zw5yZYPw8HCNGDFCb7311gNxoIXwD8ASDh06pMGDB0uSxo4dy5lQJzh48KDGjBmj999/X8WLF3d2OQ8Extw5OICevR60D+f3AsY8+/z++++aPHmyjhw5orx586pevXrq168ft8xlo2vXrsnNzc3ZZWQLwj8Ay7j5csXXXntN9erVc3ZJD5yEhAS5u7s7u4wHCmOOB8GD9OH8XsGYZ5/ExES5uro6uww8AAj/ACyFS6EBAMD95OZbE7lNEVmJ2cYAWErytyoUK1ZMRYoUcXY5AAAAt3Vz2Cf4Iytx5h+AJXEpNAAAAPA/hH8AAAAAACyOy/4BAAAAALA4wj8AAAAAABZH+AcAAAAAwOII/wAAAAAAWBzhHwAAAAAAiyP8AwAAAABgcYR/AAAAAAAsjvAPAAAy7OzZsxo4cKCKFy8uDw8P+fv7KygoSBs3bpQk2Ww2LVq0KN3bLVmypD766KPMLRYAgAdQDmcXAAAA7n/BwcFKSEjQvHnz9NBDDykqKkorV67U+fPnnV0aAACQZDPGGGcXAQAA7l+XLl1Svnz5tGbNGjVo0CBFe8mSJfXXX3/Zfy9RooSOHz+uI0eOKCQkRL/99pvi4uJUoUIFTZo0SU2bNpUkNWzYUGvXrnXYVvLHlg0bNmj06NHatm2bChYsqA4dOmjSpEnKnTt3Fu4pAAD3Ly77BwAAGZInTx7lyZNHixYtUnx8fIr2rVu3SpLmzJmj06dP23+PjY1Vq1attHLlSu3cuVMtWrRQ27ZtFRERIUlauHChihUrpvHjx+v06dM6ffq0JOnIkSNq0aKFgoOD9ccff2j+/PnasGGDBg8enE17DADA/Ycz/wAAIMMWLFigZ555RleuXFH16tXVoEEDde3aVVWqVJF0457/H3/8Ue3bt7/tdipVqqQBAwbYg3zJkiU1dOhQDR061N6nf//+cnV11YwZM+zLNmzYoAYNGiguLk45c+bM9P0DAOB+x5l/AACQYcHBwTp16pQWL16sFi1aaM2aNapevbrmzp17y3ViY2P18ssvq0KFCvLx8VGePHl04MAB+5n/W9m9e7fmzp1rv+IgT548CgoKUlJSko4dO5bJewYAgDUw4R8AAMgUOXPmVLNmzdSsWTONGTNG/fv317hx49S7d+9U+7/88ssKCwvTe++9p9KlS8vT01OdOnVSQkLCbR8nNjZWzz33nF544YUUbcWLF8+MXQEAwHII/wAAIEtUrFjR/vV+bm5uSkxMdGjfuHGjevfurQ4dOki6EeqPHz/u0Mfd3T3FetWrV9f+/ftVunTpLKsdAACr4bJ/AACQIefPn1fjxo311Vdf6Y8//tCxY8f0/fffa/LkyXryyScl3bh3f+XKlYqMjNTFixclSWXKlNHChQu1a9cu7d69W927d1dSUpLDtkuWLKl169bp5MmTOnfunCRp5MiR2rRpkwYPHqxdu3bp0KFD+umnn5jwDwCA2yD8AwCADMmTJ4/q1KmjDz/8UPXr11elSpU0ZswYPfPMM5o6daok6f3331dYWJgCAgJUrVo1SdIHH3ygfPny6bHHHlPbtm0VFBSk6tWrO2x7/PjxOn78uB5++GEVKlRIklSlShWtXbtWf/75p5544glVq1ZNY8eOVZEiRbJ3xwEAuI8w2z8AAAAAABbHmX8AAAAAACyO8A8AAAAAgMUR/gEAAAAAsDjCPwAAAAAAFkf4BwAAAADA4gj/AAAAAABYHOEfAAAAAACLI/wDAAAAAGBxhH8AAAAAACyO8A8AAAAAgMUR/gEAAAAAsLj/B+BzpcrAXqynAAAAAElFTkSuQmCC",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "bystate = all_data['customer_state'].value_counts().head(10)\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "most_common_city = bystate.idxmax()\n",
        "\n",
        "bystate = bystate.sort_values(ascending=False)\n",
        "\n",
        "sns.barplot(x=bystate.index,\n",
        "            y=bystate.values,\n",
        "            palette=[\"#068DA9\" if city == most_common_city else \"#D3D3D3\" for city in bystate.index]\n",
        "            )\n",
        "\n",
        "plt.title(\"Jumlah Pelanggan Berdasarkan State\", fontsize=15)\n",
        "plt.xlabel(\"State\")\n",
        "plt.ylabel(\"Jumlah Pelanggan\")\n",
        "plt.xticks(rotation=45, fontsize=10)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c6lXQpu9kUCt"
      },
      "source": [
        "Berdasarkan grafik di atas, SP adalah state dengan customer terbanyak."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bfp69BZ0kxmN"
      },
      "source": [
        "### RFM Analysis untuk menjawab pertanyaan 4-6"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nhyiAZjOk_Ii"
      },
      "source": [
        "Sebelum membuat analisis RFM, akan dibuat DataFrame baru yang memuat informasi ketiga parameter RFM yaitu recency, frequency, dan monetary."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "e14bOZNck-S6",
        "outputId": "6430e493-0f65-4c4f-f038-fafcd2f626c7"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"rfm\",\n  \"rows\": 99441,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99441,\n        \"samples\": [\n          \"86d3fe4ddf2692de0699c9b1c9e8df57\",\n          \"78500017ab0acb2ba158219a6fda23f4\",\n          \"60ff2959ab18e70859b8ae136c0bea28\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614.1479938192041,\n        \"min\": 0.0,\n        \"max\": 109312.64,\n        \"num_unique_values\": 29749,\n        \"samples\": [\n          338.51,\n          172.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 152.80547620167346,\n        \"min\": 0.0,\n        \"max\": 713.0,\n        \"num_unique_values\": 609,\n        \"samples\": [\n          284.0,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "rfm"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-7e3e709f-e98b-4bbb-9b67-7be452528118\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>frequency</th>\n",
              "      <th>monetary</th>\n",
              "      <th>recency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>00012a2ce6f8dcda20d059ce98491703</td>\n",
              "      <td>1</td>\n",
              "      <td>114.74</td>\n",
              "      <td>288.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>000161a058600d5901f007fab4c27140</td>\n",
              "      <td>1</td>\n",
              "      <td>67.41</td>\n",
              "      <td>409.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0001fd6190edaaf884bcaf3d49edf079</td>\n",
              "      <td>1</td>\n",
              "      <td>195.42</td>\n",
              "      <td>547.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0002414f95344307404f0ace7a26f1d5</td>\n",
              "      <td>1</td>\n",
              "      <td>179.35</td>\n",
              "      <td>377.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>000379cdec625522490c315e70c7a9fb</td>\n",
              "      <td>1</td>\n",
              "      <td>107.01</td>\n",
              "      <td>147.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e3e709f-e98b-4bbb-9b67-7be452528118')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e3e709f-e98b-4bbb-9b67-7be452528118 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e3e709f-e98b-4bbb-9b67-7be452528118');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f84ffe4-1e26-4103-b2e6-81350273b6b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f84ffe4-1e26-4103-b2e6-81350273b6b4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f84ffe4-1e26-4103-b2e6-81350273b6b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                        customer_id  frequency  monetary  recency\n",
              "0  00012a2ce6f8dcda20d059ce98491703          1    114.74    288.0\n",
              "1  000161a058600d5901f007fab4c27140          1     67.41    409.0\n",
              "2  0001fd6190edaaf884bcaf3d49edf079          1    195.42    547.0\n",
              "3  0002414f95344307404f0ace7a26f1d5          1    179.35    377.0\n",
              "4  000379cdec625522490c315e70c7a9fb          1    107.01    147.0"
            ]
          },
          "execution_count": 72,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rfm = all_data.groupby(by=\"customer_id\", as_index=False).agg({\n",
        "    \"order_approved_at\": \"max\", # mengambil tanggal order terakhir\n",
        "    \"order_id\": \"nunique\", # menghitung jumlah order\n",
        "    \"payment_value\": \"sum\" # menghitung jumlah revenue yang dihasilkan\n",
        "})\n",
        "rfm.columns = [\"customer_id\", \"order_purchase_timestamp\", \"frequency\", \"monetary\"]\n",
        "\n",
        "# menghitung kapan terakhir pelanggan melakukan transaksi (hari)\n",
        "rfm[\"order_purchase_timestamp\"] = rfm[\"order_purchase_timestamp\"].dt.date\n",
        "recent_date = orders[\"order_approved_at\"].max()\n",
        "rfm[\"recency\"] = rfm[\"order_purchase_timestamp\"].apply(lambda x: (recent_date - pd.to_datetime(x)).days)\n",
        "\n",
        "rfm.drop(\"order_purchase_timestamp\", axis=1, inplace=True)\n",
        "rfm.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 744
        },
        "id": "amn4Q1STmMuI",
        "outputId": "acbdbe79-264b-4b71-9b7f-09a0617ac83d"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-73-899b2ee8660d>:5: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(y=\"recency\", x=\"customer_id\", data=rfm.sort_values(by=\"recency\", ascending=True).head(5), palette=colors, ax=ax[0])\n",
            "<ipython-input-73-899b2ee8660d>:11: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(y=\"frequency\", x=\"customer_id\", data=rfm.sort_values(by=\"frequency\", ascending=False).head(5), palette=colors, ax=ax[1])\n",
            "<ipython-input-73-899b2ee8660d>:17: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(y=\"monetary\", x=\"customer_id\", data=rfm.sort_values(by=\"monetary\", ascending=False).head(5), palette=colors, ax=ax[2])\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 3000x600 with 3 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))\n",
        "\n",
        "colors = [\"#72BCD4\", \"#72BCD4\", \"#72BCD4\", \"#72BCD4\", \"#72BCD4\"]\n",
        "\n",
        "sns.barplot(y=\"recency\", x=\"customer_id\", data=rfm.sort_values(by=\"recency\", ascending=True).head(5), palette=colors, ax=ax[0])\n",
        "ax[0].set_ylabel(None)\n",
        "ax[0].set_xlabel(None)\n",
        "ax[0].set_title(\"Berdasarkan Recency (hari)\", loc=\"center\", fontsize=18)\n",
        "ax[0].tick_params(axis ='x', rotation=45, labelsize=15)\n",
        "\n",
        "sns.barplot(y=\"frequency\", x=\"customer_id\", data=rfm.sort_values(by=\"frequency\", ascending=False).head(5), palette=colors, ax=ax[1])\n",
        "ax[1].set_ylabel(None)\n",
        "ax[1].set_xlabel(None)\n",
        "ax[1].set_title(\"Berdasarkan Frequency\", loc=\"center\", fontsize=18)\n",
        "ax[1].tick_params(axis='x',rotation=45, labelsize=15)\n",
        "\n",
        "sns.barplot(y=\"monetary\", x=\"customer_id\", data=rfm.sort_values(by=\"monetary\", ascending=False).head(5), palette=colors, ax=ax[2])\n",
        "ax[2].set_ylabel(None)\n",
        "ax[2].set_xlabel(None)\n",
        "ax[2].set_title(\"Berdasrkan Monetary\", loc=\"center\", fontsize=18)\n",
        "ax[2].tick_params(axis='x', rotation=45, labelsize=15)\n",
        "\n",
        "plt.suptitle(\"Pelanggan Terbaik Berdasarkan Analisis RFM\", fontsize=20)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_WeHlCeX8DC2"
      },
      "source": [
        "## Conclusion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZTcyR48Y8DC2"
      },
      "source": [
        "* Berdasarkan analisis yang telah dilakukan, dapat diketahui bahwa penjualan e-commerce cenderung stabil di bulan January-May. Terdapat sedikit naik turun penjualan pada bulan Juni-Agustus. Penurunan signifikan terjadi pada bulan pada bulan September 2018. Kemudian terjadi kenaikan signifikan pula pada bulan November 2018. Terjadi penurunan kembali pada bulan Desember.\n",
        "\n",
        "* Berdasarkan grafik yang telah dibuat, dapat diketahi bahwa produk yang paling banyak terjual adalah bed_bath_table yaitu sebanyak 11814 buah. Sedangkan produk yang paling sedikit terjual adalah security_and_service yaitu sebanyak 2 buah.\n",
        "\n",
        "* Berdasarkan kota pelanggan, kota dengan pelanggan terbanyak adalah Sao Paulo. Sedangkan berdasarkan state pelanggan, state dengan pelanggan terbanyak adalah SP.\n",
        "\n",
        "* Berdasarkan analisis RFM, dapat diketahui bahwa grafik recency kosong, artinya pelanggan melakukan transaksi tidak dalam rentang waktu yang lama atau belum ada satu hari sejak pelanggan terakhir melakukan transaksi. Kemudian untuk frequency, semua pelanggan melakukan transaksi satu kali dalam waktu beberapa bulan terakhir. Untuk monetary, pelanggan paling banyak menghabiskan sejumlah lebih dari 100000 pada suatu transaksi."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:21:23) [MSC v.1916 32 bit (Intel)]"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "972b3bf27e332e87b5379f2791f6ef9dfc79c71018c370b0d7423235e20fe4d7"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
